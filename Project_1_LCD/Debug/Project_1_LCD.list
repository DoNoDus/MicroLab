
Project_1_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b4  080030b4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000080  0800313c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800313c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008091  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  00028141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  000297d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  00029fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022df2  00000000  00000000  0002a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d9d  00000000  00000000  0004d552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d11db  00000000  00000000  000572ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001284ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e8  00000000  00000000  0012851c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ff4 	.word	0x08002ff4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002ff4 	.word	0x08002ff4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800059e:	4a38      	ldr	r2, [pc, #224]	; (8000680 <HD44780_Init+0xec>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <HD44780_Init+0xf0>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <HD44780_Init+0xf4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HD44780_Init+0xec>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d907      	bls.n	80005c8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HD44780_Init+0xf4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <HD44780_Init+0xf4>)
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e006      	b.n	80005d6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HD44780_Init+0xf4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HD44780_Init+0xf4>)
 80005d4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005d6:	f000 f991 	bl	80008fc <DelayInit>
  HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	; 0x32
 80005dc:	f000 fcb4 	bl	8000f48 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <HD44780_Init+0xf0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f94f 	bl	8000888 <ExpanderWrite>
  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fcab 	bl	8000f48 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005f2:	2030      	movs	r0, #48	; 0x30
 80005f4:	f000 f937 	bl	8000866 <Write4Bits>
  DelayUS(4500);
 80005f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005fc:	f000 f9a8 	bl	8000950 <DelayUS>

  Write4Bits(0x03 << 4);
 8000600:	2030      	movs	r0, #48	; 0x30
 8000602:	f000 f930 	bl	8000866 <Write4Bits>
  DelayUS(4500);
 8000606:	f241 1094 	movw	r0, #4500	; 0x1194
 800060a:	f000 f9a1 	bl	8000950 <DelayUS>

  Write4Bits(0x03 << 4);
 800060e:	2030      	movs	r0, #48	; 0x30
 8000610:	f000 f929 	bl	8000866 <Write4Bits>
  DelayUS(4500);
 8000614:	f241 1094 	movw	r0, #4500	; 0x1194
 8000618:	f000 f99a 	bl	8000950 <DelayUS>

  Write4Bits(0x02 << 4);
 800061c:	2020      	movs	r0, #32
 800061e:	f000 f922 	bl	8000866 <Write4Bits>
  DelayUS(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 f994 	bl	8000950 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HD44780_Init+0xf4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f8da 	bl	80007ec <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HD44780_Init+0xf8>)
 800063a:	2204      	movs	r2, #4
 800063c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800063e:	f000 f875 	bl	800072c <HD44780_Display>
  HD44780_Clear();
 8000642:	f000 f82b 	bl	800069c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HD44780_Init+0xfc>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HD44780_Init+0xfc>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f8c8 	bl	80007ec <SendCommand>
  DelayUS(4500);
 800065c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000660:	f000 f976 	bl	8000950 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000664:	490b      	ldr	r1, [pc, #44]	; (8000694 <HD44780_Init+0x100>)
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f876 	bl	8000758 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <HD44780_Init+0x104>)
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f872 	bl	8000758 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000674:	f000 f81d 	bl	80006b2 <HD44780_Home>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000009f 	.word	0x2000009f
 8000684:	200000a0 	.word	0x200000a0
 8000688:	2000009c 	.word	0x2000009c
 800068c:	2000009d 	.word	0x2000009d
 8000690:	2000009e 	.word	0x2000009e
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008

0800069c <HD44780_Clear>:

void HD44780_Clear()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f8a3 	bl	80007ec <SendCommand>
  DelayUS(2000);
 80006a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006aa:	f000 f951 	bl	8000950 <DelayUS>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HD44780_Home>:

void HD44780_Home()
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 f898 	bl	80007ec <SendCommand>
  DelayUS(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f000 f946 	bl	8000950 <DelayUS>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HD44780_SetCursor+0x5c>)
 80006da:	f107 0408 	add.w	r4, r7, #8
 80006de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HD44780_SetCursor+0x60>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d303      	bcc.n	80006f6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HD44780_SetCursor+0x60>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	3318      	adds	r3, #24
 80006fc:	443b      	add	r3, r7
 80006fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4413      	add	r3, r2
 8000708:	b2db      	uxtb	r3, r3
 800070a:	b25b      	sxtb	r3, r3
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f869 	bl	80007ec <SendCommand>
}
 800071a:	bf00      	nop
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	bf00      	nop
 8000724:	0800300c 	.word	0x0800300c
 8000728:	2000009f 	.word	0x2000009f

0800072c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HD44780_Display+0x28>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HD44780_Display+0x28>)
 800073c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HD44780_Display+0x28>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f84f 	bl	80007ec <SendCommand>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000009d 	.word	0x2000009d

08000758 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f836 	bl	80007ec <SendCommand>
  for (int i=0; i<8; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e009      	b.n	800079a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f83a 	bl	8000808 <SendChar>
  for (int i=0; i<8; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b07      	cmp	r3, #7
 800079e:	ddf2      	ble.n	8000786 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007b2:	e006      	b.n	80007c2 <HD44780_PrintStr+0x18>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f823 	bl	8000808 <SendChar>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f4      	bne.n	80007b4 <HD44780_PrintStr+0xa>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HD44780_Backlight+0x14>)
 80007da:	2208      	movs	r2, #8
 80007dc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f852 	bl	8000888 <ExpanderWrite>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000a0 	.word	0x200000a0

080007ec <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f812 	bl	8000824 <Send>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f804 	bl	8000824 <Send>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f023 030f 	bic.w	r3, r3, #15
 800083a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	4313      	orrs	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f80b 	bl	8000866 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	4313      	orrs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f804 	bl	8000866 <Write4Bits>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f808 	bl	8000888 <ExpanderWrite>
  PulseEnable(value);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f820 	bl	80008c0 <PulseEnable>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <ExpanderWrite+0x30>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4313      	orrs	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800089e:	f107 020f 	add.w	r2, r7, #15
 80008a2:	230a      	movs	r3, #10
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	217e      	movs	r1, #126	; 0x7e
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <ExpanderWrite+0x34>)
 80008ac:	f000 ff46 	bl	800173c <HAL_I2C_Master_Transmit>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	200000a4 	.word	0x200000a4

080008c0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ffd8 	bl	8000888 <ExpanderWrite>
  DelayUS(20);
 80008d8:	2014      	movs	r0, #20
 80008da:	f000 f839 	bl	8000950 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f023 0304 	bic.w	r3, r3, #4
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ffce 	bl	8000888 <ExpanderWrite>
  DelayUS(20);
 80008ec:	2014      	movs	r0, #20
 80008ee:	f000 f82f 	bl	8000950 <DelayUS>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <DelayInit>:

static void DelayInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <DelayInit+0x4c>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <DelayInit+0x4c>)
 8000906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800090a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <DelayInit+0x4c>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <DelayInit+0x4c>)
 8000912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000916:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <DelayInit+0x50>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <DelayInit+0x50>)
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <DelayInit+0x50>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <DelayInit+0x50>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <DelayInit+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000936:	bf00      	nop
  __ASM volatile ("NOP");
 8000938:	bf00      	nop
  __ASM volatile ("NOP");
 800093a:	bf00      	nop
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000edf0 	.word	0xe000edf0
 800094c:	e0001000 	.word	0xe0001000

08000950 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <DelayUS+0x44>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <DelayUS+0x48>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9a      	lsrs	r2, r3, #18
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	fb02 f303 	mul.w	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <DelayUS+0x4c>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <DelayUS+0x4c>)
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f6      	bhi.n	8000972 <DelayUS+0x22>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000010 	.word	0x20000010
 8000998:	431bde83 	.word	0x431bde83
 800099c:	e0001000 	.word	0xe0001000

080009a0 <timer>:

int s = 0, m = 0, h = 0;
char _timer[14];
int check = 0;

void timer(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	if(check == 0)
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <timer+0xb8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d124      	bne.n	80009f8 <timer+0x58>
	{
		if(s== 59 && m == 59) sprintf(_timer, "%.2d   %.2d   %.2d", h, m, s);
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <timer+0xbc>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b3b      	cmp	r3, #59	; 0x3b
 80009b4:	d110      	bne.n	80009d8 <timer+0x38>
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <timer+0xc0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b3b      	cmp	r3, #59	; 0x3b
 80009bc:	d10c      	bne.n	80009d8 <timer+0x38>
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <timer+0xc4>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <timer+0xc0>)
 80009c4:	6819      	ldr	r1, [r3, #0]
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <timer+0xbc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	460b      	mov	r3, r1
 80009ce:	4926      	ldr	r1, [pc, #152]	; (8000a68 <timer+0xc8>)
 80009d0:	4826      	ldr	r0, [pc, #152]	; (8000a6c <timer+0xcc>)
 80009d2:	f001 fea1 	bl	8002718 <siprintf>
 80009d6:	e00b      	b.n	80009f0 <timer+0x50>
		else sprintf(_timer, "%.2d : %.2d   %.2d", h, m, s);
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <timer+0xc4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <timer+0xc0>)
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <timer+0xbc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	460b      	mov	r3, r1
 80009e8:	4921      	ldr	r1, [pc, #132]	; (8000a70 <timer+0xd0>)
 80009ea:	4820      	ldr	r0, [pc, #128]	; (8000a6c <timer+0xcc>)
 80009ec:	f001 fe94 	bl	8002718 <siprintf>
		check = 1;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <timer+0xb8>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
		if(m == 60){
			h++;
			m=0;
		}
	}
}
 80009f6:	e02b      	b.n	8000a50 <timer+0xb0>
		sprintf(_timer, "%.2d : %.2d : %.2d", h, m, s);
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <timer+0xc4>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <timer+0xc0>)
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <timer+0xbc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <timer+0xd4>)
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <timer+0xcc>)
 8000a0c:	f001 fe84 	bl	8002718 <siprintf>
		check = 0;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <timer+0xb8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		s++;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <timer+0xbc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <timer+0xbc>)
 8000a1e:	6013      	str	r3, [r2, #0]
		if(s == 60) {
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <timer+0xbc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b3c      	cmp	r3, #60	; 0x3c
 8000a26:	d107      	bne.n	8000a38 <timer+0x98>
			m++;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <timer+0xc0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <timer+0xc0>)
 8000a30:	6013      	str	r3, [r2, #0]
			s=0;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <timer+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
		if(m == 60){
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <timer+0xc0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b3c      	cmp	r3, #60	; 0x3c
 8000a3e:	d107      	bne.n	8000a50 <timer+0xb0>
			h++;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <timer+0xc4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <timer+0xc4>)
 8000a48:	6013      	str	r3, [r2, #0]
			m=0;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <timer+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000114 	.word	0x20000114
 8000a5c:	200000f8 	.word	0x200000f8
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	20000100 	.word	0x20000100
 8000a68:	0800301c 	.word	0x0800301c
 8000a6c:	20000104 	.word	0x20000104
 8000a70:	08003030 	.word	0x08003030
 8000a74:	08003044 	.word	0x08003044

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 f9f2 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f824 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f8c2 	bl	8000c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a88:	f000 f880 	bl	8000b8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HD44780_Init(2); // Define row
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff fd81 	bl	8000594 <HD44780_Init>
	HD44780_Clear(); // Clear Display
 8000a92:	f7ff fe03 	bl	800069c <HD44780_Clear>
	HD44780_Backlight(); // Turn on Light
 8000a96:	f7ff fe9d 	bl	80007d4 <HD44780_Backlight>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HD44780_SetCursor(5,0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f7ff fe13 	bl	80006c8 <HD44780_SetCursor>
	  HD44780_PrintStr("TIMER.");
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <main+0x4c>)
 8000aa4:	f7ff fe81 	bl	80007aa <HD44780_PrintStr>
	  HD44780_SetCursor(2,1);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff fe0c 	bl	80006c8 <HD44780_SetCursor>
	  timer();
 8000ab0:	f7ff ff76 	bl	80009a0 <timer>
	  HD44780_PrintStr(_timer);
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <main+0x50>)
 8000ab6:	f7ff fe78 	bl	80007aa <HD44780_PrintStr>
	  HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abe:	f000 fa43 	bl	8000f48 <HAL_Delay>
	  HD44780_SetCursor(5,0);
 8000ac2:	e7ea      	b.n	8000a9a <main+0x22>
 8000ac4:	08003058 	.word	0x08003058
 8000ac8:	20000104 	.word	0x20000104

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fe14 	bl	8002708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <SystemClock_Config+0xb8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemClock_Config+0xb8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <SystemClock_Config+0xb8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <SystemClock_Config+0xbc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <SystemClock_Config+0xbc>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <SystemClock_Config+0xbc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b34:	2310      	movs	r3, #16
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f97d 	bl	8001e40 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b4c:	f000 f878 	bl	8000c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fbd6 	bl	800231c <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b76:	f000 f863 	bl	8000c40 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x7c>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bca:	f000 fc73 	bl	80014b4 <HAL_I2C_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f834 	bl	8000c40 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bdc:	f001 f8b5 	bl	8001d4a <HAL_I2CEx_ConfigAnalogFilter>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000be6:	f000 f82b 	bl	8000c40 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bee:	f001 f8e8 	bl	8001dc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f000 f822 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000a4 	.word	0x200000a4
 8000c04:	40005400 	.word	0x40005400
 8000c08:	000186a0 	.word	0x000186a0

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_GPIO_Init+0x30>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <MX_GPIO_Init+0x30>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_GPIO_Init+0x30>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_I2C_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_I2C_MspInit+0x8c>)
 8000cfa:	f000 fa2f 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f8c0 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x50>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x16>
		heap_end = &end;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <_sbrk+0x50>)
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <_sbrk+0x54>)
 8000da0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <_sbrk+0x50>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <_sbrk+0x50>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	466a      	mov	r2, sp
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d907      	bls.n	8000dc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000db6:	f001 fc7d 	bl	80026b4 <__errno>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	e006      	b.n	8000dd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <_sbrk+0x50>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <_sbrk+0x50>)
 8000dd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000118 	.word	0x20000118
 8000de0:	20000130 	.word	0x20000130

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SystemInit+0x28>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <SystemInit+0x28>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SystemInit+0x28>)
 8000dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e16:	e003      	b.n	8000e20 <LoopCopyDataInit>

08000e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e1e:	3104      	adds	r1, #4

08000e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e28:	d3f6      	bcc.n	8000e18 <CopyDataInit>
  ldr  r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e2c:	e002      	b.n	8000e34 <LoopFillZerobss>

08000e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e30:	f842 3b04 	str.w	r3, [r2], #4

08000e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e38:	d3f9      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd3 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 fc3f 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fe19 	bl	8000a78 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e48:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e4c:	080030bc 	.word	0x080030bc
  ldr  r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e54:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000e58:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000e5c:	20000130 	.word	0x20000130

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f931 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff feda 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f93b 	bl	8001142 <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f911 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000010 	.word	0x20000010
 8000f00:	20000018 	.word	0x20000018
 8000f04:	20000014 	.word	0x20000014

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	2000011c 	.word	0x2000011c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000018 	.word	0x20000018

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff47 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5c 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb0 	bl	80010b0 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e177      	b.n	8001468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8166 	bne.w	8001462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0xfc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80c0 	beq.w	8001462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_GPIO_Init+0x324>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_GPIO_Init+0x324>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a61      	ldr	r2, [pc, #388]	; (8001484 <HAL_GPIO_Init+0x328>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a58      	ldr	r2, [pc, #352]	; (8001488 <HAL_GPIO_Init+0x32c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d037      	beq.n	800139a <HAL_GPIO_Init+0x23e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a57      	ldr	r2, [pc, #348]	; (800148c <HAL_GPIO_Init+0x330>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d031      	beq.n	8001396 <HAL_GPIO_Init+0x23a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a56      	ldr	r2, [pc, #344]	; (8001490 <HAL_GPIO_Init+0x334>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x236>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a55      	ldr	r2, [pc, #340]	; (8001494 <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x232>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a54      	ldr	r2, [pc, #336]	; (8001498 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a53      	ldr	r2, [pc, #332]	; (800149c <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x22a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x350>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x21a>
 8001372:	2309      	movs	r3, #9
 8001374:	e012      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001376:	230a      	movs	r3, #10
 8001378:	e010      	b.n	800139c <HAL_GPIO_Init+0x240>
 800137a:	2308      	movs	r3, #8
 800137c:	e00e      	b.n	800139c <HAL_GPIO_Init+0x240>
 800137e:	2307      	movs	r3, #7
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001382:	2306      	movs	r3, #6
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x240>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x240>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x240>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x328>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_GPIO_Init+0x354>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013de:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <HAL_GPIO_Init+0x354>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <HAL_GPIO_Init+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_GPIO_Init+0x354>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_GPIO_Init+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_GPIO_Init+0x354>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_GPIO_Init+0x354>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_GPIO_Init+0x354>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f ae84 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40021c00 	.word	0x40021c00
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40022400 	.word	0x40022400
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e12b      	b.n	800171e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fbe0 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001518:	f001 f8b8 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a81      	ldr	r2, [pc, #516]	; (8001728 <HAL_I2C_Init+0x274>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d807      	bhi.n	8001538 <HAL_I2C_Init+0x84>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a80      	ldr	r2, [pc, #512]	; (800172c <HAL_I2C_Init+0x278>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e006      	b.n	8001546 <HAL_I2C_Init+0x92>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <HAL_I2C_Init+0x27c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0e7      	b.n	800171e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4a78      	ldr	r2, [pc, #480]	; (8001734 <HAL_I2C_Init+0x280>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_I2C_Init+0x274>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d802      	bhi.n	8001588 <HAL_I2C_Init+0xd4>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	e009      	b.n	800159c <HAL_I2C_Init+0xe8>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_I2C_Init+0x284>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	495c      	ldr	r1, [pc, #368]	; (8001728 <HAL_I2C_Init+0x274>)
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d819      	bhi.n	80015f0 <HAL_I2C_Init+0x13c>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e59      	subs	r1, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_I2C_Init+0x138>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e59      	subs	r1, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	e051      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e04f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <HAL_I2C_Init+0x168>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e012      	b.n	8001642 <HAL_I2C_Init+0x18e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Init+0x196>
 8001646:	2301      	movs	r3, #1
 8001648:	e022      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <HAL_I2C_Init+0x1bc>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e58      	subs	r0, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	440b      	add	r3, r1
 8001660:	fbb0 f3f3 	udiv	r3, r0, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6809      	ldr	r1, [r1, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6911      	ldr	r1, [r2, #16]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68d2      	ldr	r2, [r2, #12]
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	000186a0 	.word	0x000186a0
 800172c:	001e847f 	.word	0x001e847f
 8001730:	003d08ff 	.word	0x003d08ff
 8001734:	431bde83 	.word	0x431bde83
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	817b      	strh	r3, [r7, #10]
 800174c:	4613      	mov	r3, r2
 800174e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff fbee 	bl	8000f30 <HAL_GetTick>
 8001754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b20      	cmp	r3, #32
 8001760:	f040 80e0 	bne.w	8001924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2319      	movs	r3, #25
 800176a:	2201      	movs	r2, #1
 800176c:	4970      	ldr	r1, [pc, #448]	; (8001930 <HAL_I2C_Master_Transmit+0x1f4>)
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f964 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800177a:	2302      	movs	r3, #2
 800177c:	e0d3      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_I2C_Master_Transmit+0x50>
 8001788:	2302      	movs	r3, #2
 800178a:	e0cc      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d007      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2221      	movs	r2, #33	; 0x21
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2210      	movs	r2, #16
 80017ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	893a      	ldrh	r2, [r7, #8]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_I2C_Master_Transmit+0x1f8>)
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017f4:	8979      	ldrh	r1, [r7, #10]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f89c 	bl	8001938 <I2C_MasterRequestWrite>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e08d      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001820:	e066      	b.n	80018f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f9de 	bl	8001be8 <I2C_WaitOnTXEFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b04      	cmp	r3, #4
 8001838:	d107      	bne.n	800184a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06b      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b04      	cmp	r3, #4
 800188a:	d11b      	bne.n	80018c4 <HAL_I2C_Master_Transmit+0x188>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d017      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f9ce 	bl	8001c6a <I2C_WaitOnBTFFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00d      	beq.n	80018f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d107      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e01a      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d194      	bne.n	8001822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000

08001938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d006      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d003      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e00b      	b.n	800198c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	2b12      	cmp	r3, #18
 800197a:	d107      	bne.n	800198c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f84f 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b2:	d103      	bne.n	80019bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e035      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019c8:	d108      	bne.n	80019dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	e01b      	b.n	8001a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	11db      	asrs	r3, r3, #7
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0306 	and.w	r3, r3, #6
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f063 030f 	orn	r3, r3, #15
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <I2C_MasterRequestWrite+0xfc>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f875 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e010      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a0a:	897b      	ldrh	r3, [r7, #10]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <I2C_MasterRequestWrite+0x100>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f865 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	00010008 	.word	0x00010008
 8001a38:	00010002 	.word	0x00010002

08001a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	e025      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d021      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff fa6b 	bl	8000f30 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d116      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e023      	b.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10d      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	e00c      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4013      	ands	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d0b6      	beq.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af8:	e051      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d123      	bne.n	8001b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e046      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d021      	beq.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f9e9 	bl	8000f30 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0220 	orr.w	r2, r3, #32
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e00b      	b.n	8001bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d18d      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf4:	e02d      	b.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f878 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e02d      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d021      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff f98f 	bl	8000f30 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d116      	bne.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e007      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d1ca      	bne.n	8001bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c76:	e02d      	b.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f837 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02d      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d021      	beq.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f94e 	bl	8000f30 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d1ca      	bne.n	8001c78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d11b      	bne.n	8001d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d129      	bne.n	8001db4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0210 	bic.w	r2, r2, #16
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e000      	b.n	8001db6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d12a      	bne.n	8001e32 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	f023 030f 	bic.w	r3, r3, #15
 8001e02:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	89fa      	ldrh	r2, [r7, #14]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e25e      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b82      	ldr	r3, [pc, #520]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b7e      	ldr	r3, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e239      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x74>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6c      	ldr	r2, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a68      	ldr	r2, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a65      	ldr	r2, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f81a 	bl	8000f30 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f816 	bl	8000f30 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1fe      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f806 	bl	8000f30 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f802 	bl	8000f30 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1ea      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1be      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe ffbb 	bl	8000f30 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ffb7 	bl	8000f30 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e19f      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4925      	ldr	r1, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff9a 	bl	8000f30 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe ff96 	bl	8000f30 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e17e      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe ff7a 	bl	8000f30 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe ff76 	bl	8000f30 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e15e      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x200>
 800205e:	e01b      	b.n	8002098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe ff63 	bl	8000f30 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00e      	b.n	800208c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206e:	f7fe ff5f 	bl	8000f30 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d907      	bls.n	800208c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e147      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
 8002080:	40023800 	.word	0x40023800
 8002084:	42470000 	.word	0x42470000
 8002088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ea      	bne.n	800206e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8097 	beq.w	80021d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b77      	ldr	r3, [pc, #476]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7fe ff1f 	bl	8000f30 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7fe ff1b 	bl	8000f30 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e103      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x2ea>
 800211c:	4b64      	ldr	r3, [pc, #400]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x30c>
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a5b      	ldr	r2, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a57      	ldr	r2, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe fee0 	bl	8000f30 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe fedc 	bl	8000f30 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0c2      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCC_OscConfig+0x334>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe feca 	bl	8000f30 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe fec6 	bl	8000f30 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0ac      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8098 	beq.w	800230e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d05c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d141      	bne.n	8002276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fe9a 	bl	8000f30 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fe96 	bl	8000f30 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e07e      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	491b      	ldr	r1, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fe6f 	bl	8000f30 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fe6b 	bl	8000f30 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e053      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x416>
 8002274:	e04b      	b.n	800230e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fe58 	bl	8000f30 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fe54 	bl	8000f30 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e03c      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
 80022a2:	e034      	b.n	800230e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e02f      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_RCC_OscConfig+0x4d8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d11c      	bne.n	800230a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d115      	bne.n	800230a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0cc      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90c      	bls.n	8002358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0b8      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800237a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	494d      	ldr	r1, [pc, #308]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d044      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d119      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d003      	beq.n	80023da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e067      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4934      	ldr	r1, [pc, #208]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fd90 	bl	8000f30 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7fe fd8c 	bl	8000f30 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e04f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d20c      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e032      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4916      	ldr	r1, [pc, #88]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a2:	f000 f821 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fcf0 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023c00 	.word	0x40023c00
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08003060 	.word	0x08003060
 80024e0:	20000010 	.word	0x20000010
 80024e4:	20000014 	.word	0x20000014

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b090      	sub	sp, #64	; 0x40
 80024ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
 80024f4:	2300      	movs	r3, #0
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d00d      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x40>
 800250c:	2b08      	cmp	r3, #8
 800250e:	f200 80a1 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x16c>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002516:	2b04      	cmp	r3, #4
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x3a>
 800251a:	e09b      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_GetSysClockFreq+0x184>)
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002520:	e09b      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_GetSysClockFreq+0x188>)
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002526:	e098      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002532:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d028      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253e:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	2200      	movs	r2, #0
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	627a      	str	r2, [r7, #36]	; 0x24
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002550:	2100      	movs	r1, #0
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_GetSysClockFreq+0x188>)
 8002554:	fb03 f201 	mul.w	r2, r3, r1
 8002558:	2300      	movs	r3, #0
 800255a:	fb00 f303 	mul.w	r3, r0, r3
 800255e:	4413      	add	r3, r2
 8002560:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_RCC_GetSysClockFreq+0x188>)
 8002562:	fba0 1202 	umull	r1, r2, r0, r2
 8002566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002568:	460a      	mov	r2, r1
 800256a:	62ba      	str	r2, [r7, #40]	; 0x28
 800256c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256e:	4413      	add	r3, r2
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002574:	2200      	movs	r2, #0
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	61fa      	str	r2, [r7, #28]
 800257a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002582:	f7fd fe85 	bl	8000290 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4613      	mov	r3, r2
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258e:	e053      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	617a      	str	r2, [r7, #20]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025a2:	f04f 0b00 	mov.w	fp, #0
 80025a6:	4652      	mov	r2, sl
 80025a8:	465b      	mov	r3, fp
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	0159      	lsls	r1, r3, #5
 80025b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b8:	0150      	lsls	r0, r2, #5
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	ebb2 080a 	subs.w	r8, r2, sl
 80025c2:	eb63 090b 	sbc.w	r9, r3, fp
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025da:	ebb2 0408 	subs.w	r4, r2, r8
 80025de:	eb63 0509 	sbc.w	r5, r3, r9
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	00eb      	lsls	r3, r5, #3
 80025ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025f0:	00e2      	lsls	r2, r4, #3
 80025f2:	4614      	mov	r4, r2
 80025f4:	461d      	mov	r5, r3
 80025f6:	eb14 030a 	adds.w	r3, r4, sl
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	eb45 030b 	adc.w	r3, r5, fp
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800260e:	4629      	mov	r1, r5
 8002610:	028b      	lsls	r3, r1, #10
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002618:	4621      	mov	r1, r4
 800261a:	028a      	lsls	r2, r1, #10
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	2200      	movs	r2, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800262c:	f7fd fe30 	bl	8000290 <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4613      	mov	r3, r2
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_GetSysClockFreq+0x180>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetSysClockFreq+0x184>)
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800265c:	4618      	mov	r0, r3
 800265e:	3740      	adds	r7, #64	; 0x40
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400
 8002670:	017d7840 	.word	0x017d7840

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_GetHCLKFreq+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000010 	.word	0x20000010

0800268c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002690:	f7ff fff0 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08003070 	.word	0x08003070

080026b4 <__errno>:
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <__errno+0x8>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000001c 	.word	0x2000001c

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	; (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	; (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	; (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 fc8e 	bl	8002ff4 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	080030b4 	.word	0x080030b4
 80026fc:	080030b4 	.word	0x080030b4
 8002700:	080030b4 	.word	0x080030b4
 8002704:	080030b8 	.word	0x080030b8

08002708 <memset>:
 8002708:	4402      	add	r2, r0
 800270a:	4603      	mov	r3, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <siprintf>:
 8002718:	b40e      	push	{r1, r2, r3}
 800271a:	b500      	push	{lr}
 800271c:	b09c      	sub	sp, #112	; 0x70
 800271e:	ab1d      	add	r3, sp, #116	; 0x74
 8002720:	9002      	str	r0, [sp, #8]
 8002722:	9006      	str	r0, [sp, #24]
 8002724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002728:	4809      	ldr	r0, [pc, #36]	; (8002750 <siprintf+0x38>)
 800272a:	9107      	str	r1, [sp, #28]
 800272c:	9104      	str	r1, [sp, #16]
 800272e:	4909      	ldr	r1, [pc, #36]	; (8002754 <siprintf+0x3c>)
 8002730:	f853 2b04 	ldr.w	r2, [r3], #4
 8002734:	9105      	str	r1, [sp, #20]
 8002736:	6800      	ldr	r0, [r0, #0]
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	a902      	add	r1, sp, #8
 800273c:	f000 f868 	bl	8002810 <_svfiprintf_r>
 8002740:	9b02      	ldr	r3, [sp, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	b01c      	add	sp, #112	; 0x70
 8002748:	f85d eb04 	ldr.w	lr, [sp], #4
 800274c:	b003      	add	sp, #12
 800274e:	4770      	bx	lr
 8002750:	2000001c 	.word	0x2000001c
 8002754:	ffff0208 	.word	0xffff0208

08002758 <__ssputs_r>:
 8002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	688e      	ldr	r6, [r1, #8]
 800275e:	429e      	cmp	r6, r3
 8002760:	4682      	mov	sl, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4690      	mov	r8, r2
 8002766:	461f      	mov	r7, r3
 8002768:	d838      	bhi.n	80027dc <__ssputs_r+0x84>
 800276a:	898a      	ldrh	r2, [r1, #12]
 800276c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002770:	d032      	beq.n	80027d8 <__ssputs_r+0x80>
 8002772:	6825      	ldr	r5, [r4, #0]
 8002774:	6909      	ldr	r1, [r1, #16]
 8002776:	eba5 0901 	sub.w	r9, r5, r1
 800277a:	6965      	ldr	r5, [r4, #20]
 800277c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002784:	3301      	adds	r3, #1
 8002786:	444b      	add	r3, r9
 8002788:	106d      	asrs	r5, r5, #1
 800278a:	429d      	cmp	r5, r3
 800278c:	bf38      	it	cc
 800278e:	461d      	movcc	r5, r3
 8002790:	0553      	lsls	r3, r2, #21
 8002792:	d531      	bpl.n	80027f8 <__ssputs_r+0xa0>
 8002794:	4629      	mov	r1, r5
 8002796:	f000 fb63 	bl	8002e60 <_malloc_r>
 800279a:	4606      	mov	r6, r0
 800279c:	b950      	cbnz	r0, 80027b4 <__ssputs_r+0x5c>
 800279e:	230c      	movs	r3, #12
 80027a0:	f8ca 3000 	str.w	r3, [sl]
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027aa:	81a3      	strh	r3, [r4, #12]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b4:	6921      	ldr	r1, [r4, #16]
 80027b6:	464a      	mov	r2, r9
 80027b8:	f000 fabe 	bl	8002d38 <memcpy>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	6126      	str	r6, [r4, #16]
 80027ca:	6165      	str	r5, [r4, #20]
 80027cc:	444e      	add	r6, r9
 80027ce:	eba5 0509 	sub.w	r5, r5, r9
 80027d2:	6026      	str	r6, [r4, #0]
 80027d4:	60a5      	str	r5, [r4, #8]
 80027d6:	463e      	mov	r6, r7
 80027d8:	42be      	cmp	r6, r7
 80027da:	d900      	bls.n	80027de <__ssputs_r+0x86>
 80027dc:	463e      	mov	r6, r7
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	4632      	mov	r2, r6
 80027e2:	4641      	mov	r1, r8
 80027e4:	f000 fab6 	bl	8002d54 <memmove>
 80027e8:	68a3      	ldr	r3, [r4, #8]
 80027ea:	1b9b      	subs	r3, r3, r6
 80027ec:	60a3      	str	r3, [r4, #8]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	4433      	add	r3, r6
 80027f2:	6023      	str	r3, [r4, #0]
 80027f4:	2000      	movs	r0, #0
 80027f6:	e7db      	b.n	80027b0 <__ssputs_r+0x58>
 80027f8:	462a      	mov	r2, r5
 80027fa:	f000 fba5 	bl	8002f48 <_realloc_r>
 80027fe:	4606      	mov	r6, r0
 8002800:	2800      	cmp	r0, #0
 8002802:	d1e1      	bne.n	80027c8 <__ssputs_r+0x70>
 8002804:	6921      	ldr	r1, [r4, #16]
 8002806:	4650      	mov	r0, sl
 8002808:	f000 fabe 	bl	8002d88 <_free_r>
 800280c:	e7c7      	b.n	800279e <__ssputs_r+0x46>
	...

08002810 <_svfiprintf_r>:
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002814:	4698      	mov	r8, r3
 8002816:	898b      	ldrh	r3, [r1, #12]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	b09d      	sub	sp, #116	; 0x74
 800281c:	4607      	mov	r7, r0
 800281e:	460d      	mov	r5, r1
 8002820:	4614      	mov	r4, r2
 8002822:	d50e      	bpl.n	8002842 <_svfiprintf_r+0x32>
 8002824:	690b      	ldr	r3, [r1, #16]
 8002826:	b963      	cbnz	r3, 8002842 <_svfiprintf_r+0x32>
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	f000 fb19 	bl	8002e60 <_malloc_r>
 800282e:	6028      	str	r0, [r5, #0]
 8002830:	6128      	str	r0, [r5, #16]
 8002832:	b920      	cbnz	r0, 800283e <_svfiprintf_r+0x2e>
 8002834:	230c      	movs	r3, #12
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	e0d1      	b.n	80029e2 <_svfiprintf_r+0x1d2>
 800283e:	2340      	movs	r3, #64	; 0x40
 8002840:	616b      	str	r3, [r5, #20]
 8002842:	2300      	movs	r3, #0
 8002844:	9309      	str	r3, [sp, #36]	; 0x24
 8002846:	2320      	movs	r3, #32
 8002848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800284c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002850:	2330      	movs	r3, #48	; 0x30
 8002852:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80029fc <_svfiprintf_r+0x1ec>
 8002856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800285a:	f04f 0901 	mov.w	r9, #1
 800285e:	4623      	mov	r3, r4
 8002860:	469a      	mov	sl, r3
 8002862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002866:	b10a      	cbz	r2, 800286c <_svfiprintf_r+0x5c>
 8002868:	2a25      	cmp	r2, #37	; 0x25
 800286a:	d1f9      	bne.n	8002860 <_svfiprintf_r+0x50>
 800286c:	ebba 0b04 	subs.w	fp, sl, r4
 8002870:	d00b      	beq.n	800288a <_svfiprintf_r+0x7a>
 8002872:	465b      	mov	r3, fp
 8002874:	4622      	mov	r2, r4
 8002876:	4629      	mov	r1, r5
 8002878:	4638      	mov	r0, r7
 800287a:	f7ff ff6d 	bl	8002758 <__ssputs_r>
 800287e:	3001      	adds	r0, #1
 8002880:	f000 80aa 	beq.w	80029d8 <_svfiprintf_r+0x1c8>
 8002884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002886:	445a      	add	r2, fp
 8002888:	9209      	str	r2, [sp, #36]	; 0x24
 800288a:	f89a 3000 	ldrb.w	r3, [sl]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a2 	beq.w	80029d8 <_svfiprintf_r+0x1c8>
 8002894:	2300      	movs	r3, #0
 8002896:	f04f 32ff 	mov.w	r2, #4294967295
 800289a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800289e:	f10a 0a01 	add.w	sl, sl, #1
 80028a2:	9304      	str	r3, [sp, #16]
 80028a4:	9307      	str	r3, [sp, #28]
 80028a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028aa:	931a      	str	r3, [sp, #104]	; 0x68
 80028ac:	4654      	mov	r4, sl
 80028ae:	2205      	movs	r2, #5
 80028b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b4:	4851      	ldr	r0, [pc, #324]	; (80029fc <_svfiprintf_r+0x1ec>)
 80028b6:	f7fd fc9b 	bl	80001f0 <memchr>
 80028ba:	9a04      	ldr	r2, [sp, #16]
 80028bc:	b9d8      	cbnz	r0, 80028f6 <_svfiprintf_r+0xe6>
 80028be:	06d0      	lsls	r0, r2, #27
 80028c0:	bf44      	itt	mi
 80028c2:	2320      	movmi	r3, #32
 80028c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028c8:	0711      	lsls	r1, r2, #28
 80028ca:	bf44      	itt	mi
 80028cc:	232b      	movmi	r3, #43	; 0x2b
 80028ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d2:	f89a 3000 	ldrb.w	r3, [sl]
 80028d6:	2b2a      	cmp	r3, #42	; 0x2a
 80028d8:	d015      	beq.n	8002906 <_svfiprintf_r+0xf6>
 80028da:	9a07      	ldr	r2, [sp, #28]
 80028dc:	4654      	mov	r4, sl
 80028de:	2000      	movs	r0, #0
 80028e0:	f04f 0c0a 	mov.w	ip, #10
 80028e4:	4621      	mov	r1, r4
 80028e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ea:	3b30      	subs	r3, #48	; 0x30
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d94e      	bls.n	800298e <_svfiprintf_r+0x17e>
 80028f0:	b1b0      	cbz	r0, 8002920 <_svfiprintf_r+0x110>
 80028f2:	9207      	str	r2, [sp, #28]
 80028f4:	e014      	b.n	8002920 <_svfiprintf_r+0x110>
 80028f6:	eba0 0308 	sub.w	r3, r0, r8
 80028fa:	fa09 f303 	lsl.w	r3, r9, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	9304      	str	r3, [sp, #16]
 8002902:	46a2      	mov	sl, r4
 8002904:	e7d2      	b.n	80028ac <_svfiprintf_r+0x9c>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	1d19      	adds	r1, r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	9103      	str	r1, [sp, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	bfbb      	ittet	lt
 8002912:	425b      	neglt	r3, r3
 8002914:	f042 0202 	orrlt.w	r2, r2, #2
 8002918:	9307      	strge	r3, [sp, #28]
 800291a:	9307      	strlt	r3, [sp, #28]
 800291c:	bfb8      	it	lt
 800291e:	9204      	strlt	r2, [sp, #16]
 8002920:	7823      	ldrb	r3, [r4, #0]
 8002922:	2b2e      	cmp	r3, #46	; 0x2e
 8002924:	d10c      	bne.n	8002940 <_svfiprintf_r+0x130>
 8002926:	7863      	ldrb	r3, [r4, #1]
 8002928:	2b2a      	cmp	r3, #42	; 0x2a
 800292a:	d135      	bne.n	8002998 <_svfiprintf_r+0x188>
 800292c:	9b03      	ldr	r3, [sp, #12]
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	9203      	str	r2, [sp, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfb8      	it	lt
 8002938:	f04f 33ff 	movlt.w	r3, #4294967295
 800293c:	3402      	adds	r4, #2
 800293e:	9305      	str	r3, [sp, #20]
 8002940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a0c <_svfiprintf_r+0x1fc>
 8002944:	7821      	ldrb	r1, [r4, #0]
 8002946:	2203      	movs	r2, #3
 8002948:	4650      	mov	r0, sl
 800294a:	f7fd fc51 	bl	80001f0 <memchr>
 800294e:	b140      	cbz	r0, 8002962 <_svfiprintf_r+0x152>
 8002950:	2340      	movs	r3, #64	; 0x40
 8002952:	eba0 000a 	sub.w	r0, r0, sl
 8002956:	fa03 f000 	lsl.w	r0, r3, r0
 800295a:	9b04      	ldr	r3, [sp, #16]
 800295c:	4303      	orrs	r3, r0
 800295e:	3401      	adds	r4, #1
 8002960:	9304      	str	r3, [sp, #16]
 8002962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002966:	4826      	ldr	r0, [pc, #152]	; (8002a00 <_svfiprintf_r+0x1f0>)
 8002968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800296c:	2206      	movs	r2, #6
 800296e:	f7fd fc3f 	bl	80001f0 <memchr>
 8002972:	2800      	cmp	r0, #0
 8002974:	d038      	beq.n	80029e8 <_svfiprintf_r+0x1d8>
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <_svfiprintf_r+0x1f4>)
 8002978:	bb1b      	cbnz	r3, 80029c2 <_svfiprintf_r+0x1b2>
 800297a:	9b03      	ldr	r3, [sp, #12]
 800297c:	3307      	adds	r3, #7
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	3308      	adds	r3, #8
 8002984:	9303      	str	r3, [sp, #12]
 8002986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002988:	4433      	add	r3, r6
 800298a:	9309      	str	r3, [sp, #36]	; 0x24
 800298c:	e767      	b.n	800285e <_svfiprintf_r+0x4e>
 800298e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002992:	460c      	mov	r4, r1
 8002994:	2001      	movs	r0, #1
 8002996:	e7a5      	b.n	80028e4 <_svfiprintf_r+0xd4>
 8002998:	2300      	movs	r3, #0
 800299a:	3401      	adds	r4, #1
 800299c:	9305      	str	r3, [sp, #20]
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0c0a 	mov.w	ip, #10
 80029a4:	4620      	mov	r0, r4
 80029a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029aa:	3a30      	subs	r2, #48	; 0x30
 80029ac:	2a09      	cmp	r2, #9
 80029ae:	d903      	bls.n	80029b8 <_svfiprintf_r+0x1a8>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0c5      	beq.n	8002940 <_svfiprintf_r+0x130>
 80029b4:	9105      	str	r1, [sp, #20]
 80029b6:	e7c3      	b.n	8002940 <_svfiprintf_r+0x130>
 80029b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80029bc:	4604      	mov	r4, r0
 80029be:	2301      	movs	r3, #1
 80029c0:	e7f0      	b.n	80029a4 <_svfiprintf_r+0x194>
 80029c2:	ab03      	add	r3, sp, #12
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	462a      	mov	r2, r5
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <_svfiprintf_r+0x1f8>)
 80029ca:	a904      	add	r1, sp, #16
 80029cc:	4638      	mov	r0, r7
 80029ce:	f3af 8000 	nop.w
 80029d2:	1c42      	adds	r2, r0, #1
 80029d4:	4606      	mov	r6, r0
 80029d6:	d1d6      	bne.n	8002986 <_svfiprintf_r+0x176>
 80029d8:	89ab      	ldrh	r3, [r5, #12]
 80029da:	065b      	lsls	r3, r3, #25
 80029dc:	f53f af2c 	bmi.w	8002838 <_svfiprintf_r+0x28>
 80029e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029e2:	b01d      	add	sp, #116	; 0x74
 80029e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e8:	ab03      	add	r3, sp, #12
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	462a      	mov	r2, r5
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <_svfiprintf_r+0x1f8>)
 80029f0:	a904      	add	r1, sp, #16
 80029f2:	4638      	mov	r0, r7
 80029f4:	f000 f87a 	bl	8002aec <_printf_i>
 80029f8:	e7eb      	b.n	80029d2 <_svfiprintf_r+0x1c2>
 80029fa:	bf00      	nop
 80029fc:	08003078 	.word	0x08003078
 8002a00:	08003082 	.word	0x08003082
 8002a04:	00000000 	.word	0x00000000
 8002a08:	08002759 	.word	0x08002759
 8002a0c:	0800307e 	.word	0x0800307e

08002a10 <_printf_common>:
 8002a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a14:	4616      	mov	r6, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	688a      	ldr	r2, [r1, #8]
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfb8      	it	lt
 8002a24:	4613      	movlt	r3, r2
 8002a26:	6033      	str	r3, [r6, #0]
 8002a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	b10a      	cbz	r2, 8002a36 <_printf_common+0x26>
 8002a32:	3301      	adds	r3, #1
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0699      	lsls	r1, r3, #26
 8002a3a:	bf42      	ittt	mi
 8002a3c:	6833      	ldrmi	r3, [r6, #0]
 8002a3e:	3302      	addmi	r3, #2
 8002a40:	6033      	strmi	r3, [r6, #0]
 8002a42:	6825      	ldr	r5, [r4, #0]
 8002a44:	f015 0506 	ands.w	r5, r5, #6
 8002a48:	d106      	bne.n	8002a58 <_printf_common+0x48>
 8002a4a:	f104 0a19 	add.w	sl, r4, #25
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	6832      	ldr	r2, [r6, #0]
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	42ab      	cmp	r3, r5
 8002a56:	dc26      	bgt.n	8002aa6 <_printf_common+0x96>
 8002a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a5c:	1e13      	subs	r3, r2, #0
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	0692      	lsls	r2, r2, #26
 8002a66:	d42b      	bmi.n	8002ac0 <_printf_common+0xb0>
 8002a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c0      	blx	r8
 8002a72:	3001      	adds	r0, #1
 8002a74:	d01e      	beq.n	8002ab4 <_printf_common+0xa4>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	68e5      	ldr	r5, [r4, #12]
 8002a7a:	6832      	ldr	r2, [r6, #0]
 8002a7c:	f003 0306 	and.w	r3, r3, #6
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	bf08      	it	eq
 8002a84:	1aad      	subeq	r5, r5, r2
 8002a86:	68a3      	ldr	r3, [r4, #8]
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	bf0c      	ite	eq
 8002a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a90:	2500      	movne	r5, #0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bfc4      	itt	gt
 8002a96:	1a9b      	subgt	r3, r3, r2
 8002a98:	18ed      	addgt	r5, r5, r3
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	341a      	adds	r4, #26
 8002a9e:	42b5      	cmp	r5, r6
 8002aa0:	d11a      	bne.n	8002ad8 <_printf_common+0xc8>
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e008      	b.n	8002ab8 <_printf_common+0xa8>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	4652      	mov	r2, sl
 8002aaa:	4649      	mov	r1, r9
 8002aac:	4638      	mov	r0, r7
 8002aae:	47c0      	blx	r8
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d103      	bne.n	8002abc <_printf_common+0xac>
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abc:	3501      	adds	r5, #1
 8002abe:	e7c6      	b.n	8002a4e <_printf_common+0x3e>
 8002ac0:	18e1      	adds	r1, r4, r3
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aca:	4422      	add	r2, r4
 8002acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	e7c7      	b.n	8002a68 <_printf_common+0x58>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4622      	mov	r2, r4
 8002adc:	4649      	mov	r1, r9
 8002ade:	4638      	mov	r0, r7
 8002ae0:	47c0      	blx	r8
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	d0e6      	beq.n	8002ab4 <_printf_common+0xa4>
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7d9      	b.n	8002a9e <_printf_common+0x8e>
	...

08002aec <_printf_i>:
 8002aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af0:	7e0f      	ldrb	r7, [r1, #24]
 8002af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002af4:	2f78      	cmp	r7, #120	; 0x78
 8002af6:	4691      	mov	r9, r2
 8002af8:	4680      	mov	r8, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	469a      	mov	sl, r3
 8002afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b02:	d807      	bhi.n	8002b14 <_printf_i+0x28>
 8002b04:	2f62      	cmp	r7, #98	; 0x62
 8002b06:	d80a      	bhi.n	8002b1e <_printf_i+0x32>
 8002b08:	2f00      	cmp	r7, #0
 8002b0a:	f000 80d8 	beq.w	8002cbe <_printf_i+0x1d2>
 8002b0e:	2f58      	cmp	r7, #88	; 0x58
 8002b10:	f000 80a3 	beq.w	8002c5a <_printf_i+0x16e>
 8002b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b1c:	e03a      	b.n	8002b94 <_printf_i+0xa8>
 8002b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b22:	2b15      	cmp	r3, #21
 8002b24:	d8f6      	bhi.n	8002b14 <_printf_i+0x28>
 8002b26:	a101      	add	r1, pc, #4	; (adr r1, 8002b2c <_printf_i+0x40>)
 8002b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b2c:	08002b85 	.word	0x08002b85
 8002b30:	08002b99 	.word	0x08002b99
 8002b34:	08002b15 	.word	0x08002b15
 8002b38:	08002b15 	.word	0x08002b15
 8002b3c:	08002b15 	.word	0x08002b15
 8002b40:	08002b15 	.word	0x08002b15
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002b15 	.word	0x08002b15
 8002b4c:	08002b15 	.word	0x08002b15
 8002b50:	08002b15 	.word	0x08002b15
 8002b54:	08002b15 	.word	0x08002b15
 8002b58:	08002ca5 	.word	0x08002ca5
 8002b5c:	08002bc9 	.word	0x08002bc9
 8002b60:	08002c87 	.word	0x08002c87
 8002b64:	08002b15 	.word	0x08002b15
 8002b68:	08002b15 	.word	0x08002b15
 8002b6c:	08002cc7 	.word	0x08002cc7
 8002b70:	08002b15 	.word	0x08002b15
 8002b74:	08002bc9 	.word	0x08002bc9
 8002b78:	08002b15 	.word	0x08002b15
 8002b7c:	08002b15 	.word	0x08002b15
 8002b80:	08002c8f 	.word	0x08002c8f
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	1d1a      	adds	r2, r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	602a      	str	r2, [r5, #0]
 8002b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0a3      	b.n	8002ce0 <_printf_i+0x1f4>
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	6829      	ldr	r1, [r5, #0]
 8002b9c:	0606      	lsls	r6, r0, #24
 8002b9e:	f101 0304 	add.w	r3, r1, #4
 8002ba2:	d50a      	bpl.n	8002bba <_printf_i+0xce>
 8002ba4:	680e      	ldr	r6, [r1, #0]
 8002ba6:	602b      	str	r3, [r5, #0]
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	da03      	bge.n	8002bb4 <_printf_i+0xc8>
 8002bac:	232d      	movs	r3, #45	; 0x2d
 8002bae:	4276      	negs	r6, r6
 8002bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb4:	485e      	ldr	r0, [pc, #376]	; (8002d30 <_printf_i+0x244>)
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	e019      	b.n	8002bee <_printf_i+0x102>
 8002bba:	680e      	ldr	r6, [r1, #0]
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bc2:	bf18      	it	ne
 8002bc4:	b236      	sxthne	r6, r6
 8002bc6:	e7ef      	b.n	8002ba8 <_printf_i+0xbc>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	6820      	ldr	r0, [r4, #0]
 8002bcc:	1d19      	adds	r1, r3, #4
 8002bce:	6029      	str	r1, [r5, #0]
 8002bd0:	0601      	lsls	r1, r0, #24
 8002bd2:	d501      	bpl.n	8002bd8 <_printf_i+0xec>
 8002bd4:	681e      	ldr	r6, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <_printf_i+0xf2>
 8002bd8:	0646      	lsls	r6, r0, #25
 8002bda:	d5fb      	bpl.n	8002bd4 <_printf_i+0xe8>
 8002bdc:	881e      	ldrh	r6, [r3, #0]
 8002bde:	4854      	ldr	r0, [pc, #336]	; (8002d30 <_printf_i+0x244>)
 8002be0:	2f6f      	cmp	r7, #111	; 0x6f
 8002be2:	bf0c      	ite	eq
 8002be4:	2308      	moveq	r3, #8
 8002be6:	230a      	movne	r3, #10
 8002be8:	2100      	movs	r1, #0
 8002bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bee:	6865      	ldr	r5, [r4, #4]
 8002bf0:	60a5      	str	r5, [r4, #8]
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	bfa2      	ittt	ge
 8002bf6:	6821      	ldrge	r1, [r4, #0]
 8002bf8:	f021 0104 	bicge.w	r1, r1, #4
 8002bfc:	6021      	strge	r1, [r4, #0]
 8002bfe:	b90e      	cbnz	r6, 8002c04 <_printf_i+0x118>
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	d04d      	beq.n	8002ca0 <_printf_i+0x1b4>
 8002c04:	4615      	mov	r5, r2
 8002c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8002c0e:	5dc7      	ldrb	r7, [r0, r7]
 8002c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c14:	4637      	mov	r7, r6
 8002c16:	42bb      	cmp	r3, r7
 8002c18:	460e      	mov	r6, r1
 8002c1a:	d9f4      	bls.n	8002c06 <_printf_i+0x11a>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10b      	bne.n	8002c38 <_printf_i+0x14c>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	07de      	lsls	r6, r3, #31
 8002c24:	d508      	bpl.n	8002c38 <_printf_i+0x14c>
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	6861      	ldr	r1, [r4, #4]
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	bfde      	ittt	le
 8002c2e:	2330      	movle	r3, #48	; 0x30
 8002c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c38:	1b52      	subs	r2, r2, r5
 8002c3a:	6122      	str	r2, [r4, #16]
 8002c3c:	f8cd a000 	str.w	sl, [sp]
 8002c40:	464b      	mov	r3, r9
 8002c42:	aa03      	add	r2, sp, #12
 8002c44:	4621      	mov	r1, r4
 8002c46:	4640      	mov	r0, r8
 8002c48:	f7ff fee2 	bl	8002a10 <_printf_common>
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	d14c      	bne.n	8002cea <_printf_i+0x1fe>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b004      	add	sp, #16
 8002c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5a:	4835      	ldr	r0, [pc, #212]	; (8002d30 <_printf_i+0x244>)
 8002c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c60:	6829      	ldr	r1, [r5, #0]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c68:	6029      	str	r1, [r5, #0]
 8002c6a:	061d      	lsls	r5, r3, #24
 8002c6c:	d514      	bpl.n	8002c98 <_printf_i+0x1ac>
 8002c6e:	07df      	lsls	r7, r3, #31
 8002c70:	bf44      	itt	mi
 8002c72:	f043 0320 	orrmi.w	r3, r3, #32
 8002c76:	6023      	strmi	r3, [r4, #0]
 8002c78:	b91e      	cbnz	r6, 8002c82 <_printf_i+0x196>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f023 0320 	bic.w	r3, r3, #32
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	2310      	movs	r3, #16
 8002c84:	e7b0      	b.n	8002be8 <_printf_i+0xfc>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	2378      	movs	r3, #120	; 0x78
 8002c90:	4828      	ldr	r0, [pc, #160]	; (8002d34 <_printf_i+0x248>)
 8002c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c96:	e7e3      	b.n	8002c60 <_printf_i+0x174>
 8002c98:	0659      	lsls	r1, r3, #25
 8002c9a:	bf48      	it	mi
 8002c9c:	b2b6      	uxthmi	r6, r6
 8002c9e:	e7e6      	b.n	8002c6e <_printf_i+0x182>
 8002ca0:	4615      	mov	r5, r2
 8002ca2:	e7bb      	b.n	8002c1c <_printf_i+0x130>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	6826      	ldr	r6, [r4, #0]
 8002ca8:	6961      	ldr	r1, [r4, #20]
 8002caa:	1d18      	adds	r0, r3, #4
 8002cac:	6028      	str	r0, [r5, #0]
 8002cae:	0635      	lsls	r5, r6, #24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	d501      	bpl.n	8002cb8 <_printf_i+0x1cc>
 8002cb4:	6019      	str	r1, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <_printf_i+0x1d2>
 8002cb8:	0670      	lsls	r0, r6, #25
 8002cba:	d5fb      	bpl.n	8002cb4 <_printf_i+0x1c8>
 8002cbc:	8019      	strh	r1, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	4615      	mov	r5, r2
 8002cc4:	e7ba      	b.n	8002c3c <_printf_i+0x150>
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	602a      	str	r2, [r5, #0]
 8002ccc:	681d      	ldr	r5, [r3, #0]
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7fd fa8c 	bl	80001f0 <memchr>
 8002cd8:	b108      	cbz	r0, 8002cde <_printf_i+0x1f2>
 8002cda:	1b40      	subs	r0, r0, r5
 8002cdc:	6060      	str	r0, [r4, #4]
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	6123      	str	r3, [r4, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce8:	e7a8      	b.n	8002c3c <_printf_i+0x150>
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	462a      	mov	r2, r5
 8002cee:	4649      	mov	r1, r9
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	47d0      	blx	sl
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d0ab      	beq.n	8002c50 <_printf_i+0x164>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d413      	bmi.n	8002d26 <_printf_i+0x23a>
 8002cfe:	68e0      	ldr	r0, [r4, #12]
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	4298      	cmp	r0, r3
 8002d04:	bfb8      	it	lt
 8002d06:	4618      	movlt	r0, r3
 8002d08:	e7a4      	b.n	8002c54 <_printf_i+0x168>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4632      	mov	r2, r6
 8002d0e:	4649      	mov	r1, r9
 8002d10:	4640      	mov	r0, r8
 8002d12:	47d0      	blx	sl
 8002d14:	3001      	adds	r0, #1
 8002d16:	d09b      	beq.n	8002c50 <_printf_i+0x164>
 8002d18:	3501      	adds	r5, #1
 8002d1a:	68e3      	ldr	r3, [r4, #12]
 8002d1c:	9903      	ldr	r1, [sp, #12]
 8002d1e:	1a5b      	subs	r3, r3, r1
 8002d20:	42ab      	cmp	r3, r5
 8002d22:	dcf2      	bgt.n	8002d0a <_printf_i+0x21e>
 8002d24:	e7eb      	b.n	8002cfe <_printf_i+0x212>
 8002d26:	2500      	movs	r5, #0
 8002d28:	f104 0619 	add.w	r6, r4, #25
 8002d2c:	e7f5      	b.n	8002d1a <_printf_i+0x22e>
 8002d2e:	bf00      	nop
 8002d30:	08003089 	.word	0x08003089
 8002d34:	0800309a 	.word	0x0800309a

08002d38 <memcpy>:
 8002d38:	440a      	add	r2, r1
 8002d3a:	4291      	cmp	r1, r2
 8002d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d40:	d100      	bne.n	8002d44 <memcpy+0xc>
 8002d42:	4770      	bx	lr
 8002d44:	b510      	push	{r4, lr}
 8002d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d4e:	4291      	cmp	r1, r2
 8002d50:	d1f9      	bne.n	8002d46 <memcpy+0xe>
 8002d52:	bd10      	pop	{r4, pc}

08002d54 <memmove>:
 8002d54:	4288      	cmp	r0, r1
 8002d56:	b510      	push	{r4, lr}
 8002d58:	eb01 0402 	add.w	r4, r1, r2
 8002d5c:	d902      	bls.n	8002d64 <memmove+0x10>
 8002d5e:	4284      	cmp	r4, r0
 8002d60:	4623      	mov	r3, r4
 8002d62:	d807      	bhi.n	8002d74 <memmove+0x20>
 8002d64:	1e43      	subs	r3, r0, #1
 8002d66:	42a1      	cmp	r1, r4
 8002d68:	d008      	beq.n	8002d7c <memmove+0x28>
 8002d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d72:	e7f8      	b.n	8002d66 <memmove+0x12>
 8002d74:	4402      	add	r2, r0
 8002d76:	4601      	mov	r1, r0
 8002d78:	428a      	cmp	r2, r1
 8002d7a:	d100      	bne.n	8002d7e <memmove+0x2a>
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d86:	e7f7      	b.n	8002d78 <memmove+0x24>

08002d88 <_free_r>:
 8002d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d8a:	2900      	cmp	r1, #0
 8002d8c:	d044      	beq.n	8002e18 <_free_r+0x90>
 8002d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d92:	9001      	str	r0, [sp, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f1a1 0404 	sub.w	r4, r1, #4
 8002d9a:	bfb8      	it	lt
 8002d9c:	18e4      	addlt	r4, r4, r3
 8002d9e:	f000 f913 	bl	8002fc8 <__malloc_lock>
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <_free_r+0x94>)
 8002da4:	9801      	ldr	r0, [sp, #4]
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	b933      	cbnz	r3, 8002db8 <_free_r+0x30>
 8002daa:	6063      	str	r3, [r4, #4]
 8002dac:	6014      	str	r4, [r2, #0]
 8002dae:	b003      	add	sp, #12
 8002db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002db4:	f000 b90e 	b.w	8002fd4 <__malloc_unlock>
 8002db8:	42a3      	cmp	r3, r4
 8002dba:	d908      	bls.n	8002dce <_free_r+0x46>
 8002dbc:	6825      	ldr	r5, [r4, #0]
 8002dbe:	1961      	adds	r1, r4, r5
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	bf01      	itttt	eq
 8002dc4:	6819      	ldreq	r1, [r3, #0]
 8002dc6:	685b      	ldreq	r3, [r3, #4]
 8002dc8:	1949      	addeq	r1, r1, r5
 8002dca:	6021      	streq	r1, [r4, #0]
 8002dcc:	e7ed      	b.n	8002daa <_free_r+0x22>
 8002dce:	461a      	mov	r2, r3
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	b10b      	cbz	r3, 8002dd8 <_free_r+0x50>
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	d9fa      	bls.n	8002dce <_free_r+0x46>
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	1855      	adds	r5, r2, r1
 8002ddc:	42a5      	cmp	r5, r4
 8002dde:	d10b      	bne.n	8002df8 <_free_r+0x70>
 8002de0:	6824      	ldr	r4, [r4, #0]
 8002de2:	4421      	add	r1, r4
 8002de4:	1854      	adds	r4, r2, r1
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	d1e0      	bne.n	8002dae <_free_r+0x26>
 8002dec:	681c      	ldr	r4, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	6053      	str	r3, [r2, #4]
 8002df2:	4421      	add	r1, r4
 8002df4:	6011      	str	r1, [r2, #0]
 8002df6:	e7da      	b.n	8002dae <_free_r+0x26>
 8002df8:	d902      	bls.n	8002e00 <_free_r+0x78>
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	6003      	str	r3, [r0, #0]
 8002dfe:	e7d6      	b.n	8002dae <_free_r+0x26>
 8002e00:	6825      	ldr	r5, [r4, #0]
 8002e02:	1961      	adds	r1, r4, r5
 8002e04:	428b      	cmp	r3, r1
 8002e06:	bf04      	itt	eq
 8002e08:	6819      	ldreq	r1, [r3, #0]
 8002e0a:	685b      	ldreq	r3, [r3, #4]
 8002e0c:	6063      	str	r3, [r4, #4]
 8002e0e:	bf04      	itt	eq
 8002e10:	1949      	addeq	r1, r1, r5
 8002e12:	6021      	streq	r1, [r4, #0]
 8002e14:	6054      	str	r4, [r2, #4]
 8002e16:	e7ca      	b.n	8002dae <_free_r+0x26>
 8002e18:	b003      	add	sp, #12
 8002e1a:	bd30      	pop	{r4, r5, pc}
 8002e1c:	20000120 	.word	0x20000120

08002e20 <sbrk_aligned>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4e0e      	ldr	r6, [pc, #56]	; (8002e5c <sbrk_aligned+0x3c>)
 8002e24:	460c      	mov	r4, r1
 8002e26:	6831      	ldr	r1, [r6, #0]
 8002e28:	4605      	mov	r5, r0
 8002e2a:	b911      	cbnz	r1, 8002e32 <sbrk_aligned+0x12>
 8002e2c:	f000 f8bc 	bl	8002fa8 <_sbrk_r>
 8002e30:	6030      	str	r0, [r6, #0]
 8002e32:	4621      	mov	r1, r4
 8002e34:	4628      	mov	r0, r5
 8002e36:	f000 f8b7 	bl	8002fa8 <_sbrk_r>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d00a      	beq.n	8002e54 <sbrk_aligned+0x34>
 8002e3e:	1cc4      	adds	r4, r0, #3
 8002e40:	f024 0403 	bic.w	r4, r4, #3
 8002e44:	42a0      	cmp	r0, r4
 8002e46:	d007      	beq.n	8002e58 <sbrk_aligned+0x38>
 8002e48:	1a21      	subs	r1, r4, r0
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 f8ac 	bl	8002fa8 <_sbrk_r>
 8002e50:	3001      	adds	r0, #1
 8002e52:	d101      	bne.n	8002e58 <sbrk_aligned+0x38>
 8002e54:	f04f 34ff 	mov.w	r4, #4294967295
 8002e58:	4620      	mov	r0, r4
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	20000124 	.word	0x20000124

08002e60 <_malloc_r>:
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e64:	1ccd      	adds	r5, r1, #3
 8002e66:	f025 0503 	bic.w	r5, r5, #3
 8002e6a:	3508      	adds	r5, #8
 8002e6c:	2d0c      	cmp	r5, #12
 8002e6e:	bf38      	it	cc
 8002e70:	250c      	movcc	r5, #12
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	4607      	mov	r7, r0
 8002e76:	db01      	blt.n	8002e7c <_malloc_r+0x1c>
 8002e78:	42a9      	cmp	r1, r5
 8002e7a:	d905      	bls.n	8002e88 <_malloc_r+0x28>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	2600      	movs	r6, #0
 8002e82:	4630      	mov	r0, r6
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e88:	4e2e      	ldr	r6, [pc, #184]	; (8002f44 <_malloc_r+0xe4>)
 8002e8a:	f000 f89d 	bl	8002fc8 <__malloc_lock>
 8002e8e:	6833      	ldr	r3, [r6, #0]
 8002e90:	461c      	mov	r4, r3
 8002e92:	bb34      	cbnz	r4, 8002ee2 <_malloc_r+0x82>
 8002e94:	4629      	mov	r1, r5
 8002e96:	4638      	mov	r0, r7
 8002e98:	f7ff ffc2 	bl	8002e20 <sbrk_aligned>
 8002e9c:	1c43      	adds	r3, r0, #1
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	d14d      	bne.n	8002f3e <_malloc_r+0xde>
 8002ea2:	6834      	ldr	r4, [r6, #0]
 8002ea4:	4626      	mov	r6, r4
 8002ea6:	2e00      	cmp	r6, #0
 8002ea8:	d140      	bne.n	8002f2c <_malloc_r+0xcc>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	4631      	mov	r1, r6
 8002eae:	4638      	mov	r0, r7
 8002eb0:	eb04 0803 	add.w	r8, r4, r3
 8002eb4:	f000 f878 	bl	8002fa8 <_sbrk_r>
 8002eb8:	4580      	cmp	r8, r0
 8002eba:	d13a      	bne.n	8002f32 <_malloc_r+0xd2>
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	3503      	adds	r5, #3
 8002ec0:	1a6d      	subs	r5, r5, r1
 8002ec2:	f025 0503 	bic.w	r5, r5, #3
 8002ec6:	3508      	adds	r5, #8
 8002ec8:	2d0c      	cmp	r5, #12
 8002eca:	bf38      	it	cc
 8002ecc:	250c      	movcc	r5, #12
 8002ece:	4629      	mov	r1, r5
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f7ff ffa5 	bl	8002e20 <sbrk_aligned>
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	d02b      	beq.n	8002f32 <_malloc_r+0xd2>
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	442b      	add	r3, r5
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	e00e      	b.n	8002f00 <_malloc_r+0xa0>
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	1b52      	subs	r2, r2, r5
 8002ee6:	d41e      	bmi.n	8002f26 <_malloc_r+0xc6>
 8002ee8:	2a0b      	cmp	r2, #11
 8002eea:	d916      	bls.n	8002f1a <_malloc_r+0xba>
 8002eec:	1961      	adds	r1, r4, r5
 8002eee:	42a3      	cmp	r3, r4
 8002ef0:	6025      	str	r5, [r4, #0]
 8002ef2:	bf18      	it	ne
 8002ef4:	6059      	strne	r1, [r3, #4]
 8002ef6:	6863      	ldr	r3, [r4, #4]
 8002ef8:	bf08      	it	eq
 8002efa:	6031      	streq	r1, [r6, #0]
 8002efc:	5162      	str	r2, [r4, r5]
 8002efe:	604b      	str	r3, [r1, #4]
 8002f00:	4638      	mov	r0, r7
 8002f02:	f104 060b 	add.w	r6, r4, #11
 8002f06:	f000 f865 	bl	8002fd4 <__malloc_unlock>
 8002f0a:	f026 0607 	bic.w	r6, r6, #7
 8002f0e:	1d23      	adds	r3, r4, #4
 8002f10:	1af2      	subs	r2, r6, r3
 8002f12:	d0b6      	beq.n	8002e82 <_malloc_r+0x22>
 8002f14:	1b9b      	subs	r3, r3, r6
 8002f16:	50a3      	str	r3, [r4, r2]
 8002f18:	e7b3      	b.n	8002e82 <_malloc_r+0x22>
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	bf0c      	ite	eq
 8002f20:	6032      	streq	r2, [r6, #0]
 8002f22:	605a      	strne	r2, [r3, #4]
 8002f24:	e7ec      	b.n	8002f00 <_malloc_r+0xa0>
 8002f26:	4623      	mov	r3, r4
 8002f28:	6864      	ldr	r4, [r4, #4]
 8002f2a:	e7b2      	b.n	8002e92 <_malloc_r+0x32>
 8002f2c:	4634      	mov	r4, r6
 8002f2e:	6876      	ldr	r6, [r6, #4]
 8002f30:	e7b9      	b.n	8002ea6 <_malloc_r+0x46>
 8002f32:	230c      	movs	r3, #12
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4638      	mov	r0, r7
 8002f38:	f000 f84c 	bl	8002fd4 <__malloc_unlock>
 8002f3c:	e7a1      	b.n	8002e82 <_malloc_r+0x22>
 8002f3e:	6025      	str	r5, [r4, #0]
 8002f40:	e7de      	b.n	8002f00 <_malloc_r+0xa0>
 8002f42:	bf00      	nop
 8002f44:	20000120 	.word	0x20000120

08002f48 <_realloc_r>:
 8002f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4614      	mov	r4, r2
 8002f50:	460e      	mov	r6, r1
 8002f52:	b921      	cbnz	r1, 8002f5e <_realloc_r+0x16>
 8002f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f7ff bf81 	b.w	8002e60 <_malloc_r>
 8002f5e:	b92a      	cbnz	r2, 8002f6c <_realloc_r+0x24>
 8002f60:	f7ff ff12 	bl	8002d88 <_free_r>
 8002f64:	4625      	mov	r5, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6c:	f000 f838 	bl	8002fe0 <_malloc_usable_size_r>
 8002f70:	4284      	cmp	r4, r0
 8002f72:	4607      	mov	r7, r0
 8002f74:	d802      	bhi.n	8002f7c <_realloc_r+0x34>
 8002f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f7a:	d812      	bhi.n	8002fa2 <_realloc_r+0x5a>
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f7ff ff6e 	bl	8002e60 <_malloc_r>
 8002f84:	4605      	mov	r5, r0
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0ed      	beq.n	8002f66 <_realloc_r+0x1e>
 8002f8a:	42bc      	cmp	r4, r7
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	4631      	mov	r1, r6
 8002f90:	bf28      	it	cs
 8002f92:	463a      	movcs	r2, r7
 8002f94:	f7ff fed0 	bl	8002d38 <memcpy>
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f7ff fef4 	bl	8002d88 <_free_r>
 8002fa0:	e7e1      	b.n	8002f66 <_realloc_r+0x1e>
 8002fa2:	4635      	mov	r5, r6
 8002fa4:	e7df      	b.n	8002f66 <_realloc_r+0x1e>
	...

08002fa8 <_sbrk_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4d06      	ldr	r5, [pc, #24]	; (8002fc4 <_sbrk_r+0x1c>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	f7fd feea 	bl	8000d8c <_sbrk>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_sbrk_r+0x1a>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_sbrk_r+0x1a>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	20000128 	.word	0x20000128

08002fc8 <__malloc_lock>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	; (8002fd0 <__malloc_lock+0x8>)
 8002fca:	f000 b811 	b.w	8002ff0 <__retarget_lock_acquire_recursive>
 8002fce:	bf00      	nop
 8002fd0:	2000012c 	.word	0x2000012c

08002fd4 <__malloc_unlock>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	; (8002fdc <__malloc_unlock+0x8>)
 8002fd6:	f000 b80c 	b.w	8002ff2 <__retarget_lock_release_recursive>
 8002fda:	bf00      	nop
 8002fdc:	2000012c 	.word	0x2000012c

08002fe0 <_malloc_usable_size_r>:
 8002fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe4:	1f18      	subs	r0, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfbc      	itt	lt
 8002fea:	580b      	ldrlt	r3, [r1, r0]
 8002fec:	18c0      	addlt	r0, r0, r3
 8002fee:	4770      	bx	lr

08002ff0 <__retarget_lock_acquire_recursive>:
 8002ff0:	4770      	bx	lr

08002ff2 <__retarget_lock_release_recursive>:
 8002ff2:	4770      	bx	lr

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
