
Project_2_analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08007e38  08007e38  00017e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800830c  0800830c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008314  08008314  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800831c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001f4  08008510  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08008510  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb1d  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002418  00000000  00000000  0002fd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00032160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002510f  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b91  00000000  00000000  000590ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded8c  00000000  00000000  00069c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  00148a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e1c 	.word	0x08007e1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08007e1c 	.word	0x08007e1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f76:	4a38      	ldr	r2, [pc, #224]	; (8001058 <HD44780_Init+0xec>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f7c:	4b37      	ldr	r3, [pc, #220]	; (800105c <HD44780_Init+0xf0>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HD44780_Init+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HD44780_Init+0xec>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d907      	bls.n	8000fa0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HD44780_Init+0xf4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <HD44780_Init+0xf4>)
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e006      	b.n	8000fae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HD44780_Init+0xf4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HD44780_Init+0xf4>)
 8000fac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000fae:	f000 f99d 	bl	80012ec <DelayInit>
  HAL_Delay(50);
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f001 fa66 	bl	8002484 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <HD44780_Init+0xf0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f95b 	bl	8001278 <ExpanderWrite>
  HAL_Delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f001 fa5d 	bl	8002484 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000fca:	2030      	movs	r0, #48	; 0x30
 8000fcc:	f000 f943 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 8000fd0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fd4:	f000 f9b4 	bl	8001340 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fd8:	2030      	movs	r0, #48	; 0x30
 8000fda:	f000 f93c 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 8000fde:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fe2:	f000 f9ad 	bl	8001340 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fe6:	2030      	movs	r0, #48	; 0x30
 8000fe8:	f000 f935 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 8000fec:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ff0:	f000 f9a6 	bl	8001340 <DelayUS>

  Write4Bits(0x02 << 4);
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f000 f92e 	bl	8001256 <Write4Bits>
  DelayUS(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f000 f9a0 	bl	8001340 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HD44780_Init+0xf4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f8e6 	bl	80011dc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HD44780_Init+0xf8>)
 8001012:	2204      	movs	r2, #4
 8001014:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001016:	f000 f875 	bl	8001104 <HD44780_Display>
  HD44780_Clear();
 800101a:	f000 f82b 	bl	8001074 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HD44780_Init+0xfc>)
 8001020:	2202      	movs	r2, #2
 8001022:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HD44780_Init+0xfc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f8d4 	bl	80011dc <SendCommand>
  DelayUS(4500);
 8001034:	f241 1094 	movw	r0, #4500	; 0x1194
 8001038:	f000 f982 	bl	8001340 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800103c:	490b      	ldr	r1, [pc, #44]	; (800106c <HD44780_Init+0x100>)
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f876 	bl	8001130 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001044:	490a      	ldr	r1, [pc, #40]	; (8001070 <HD44780_Init+0x104>)
 8001046:	2001      	movs	r0, #1
 8001048:	f000 f872 	bl	8001130 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800104c:	f000 f81d 	bl	800108a <HD44780_Home>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000213 	.word	0x20000213
 800105c:	20000214 	.word	0x20000214
 8001060:	20000210 	.word	0x20000210
 8001064:	20000211 	.word	0x20000211
 8001068:	20000212 	.word	0x20000212
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008

08001074 <HD44780_Clear>:

void HD44780_Clear()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 f8af 	bl	80011dc <SendCommand>
  DelayUS(2000);
 800107e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001082:	f000 f95d 	bl	8001340 <DelayUS>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <HD44780_Home>:

void HD44780_Home()
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800108e:	2002      	movs	r0, #2
 8001090:	f000 f8a4 	bl	80011dc <SendCommand>
  DelayUS(2000);
 8001094:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001098:	f000 f952 	bl	8001340 <DelayUS>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HD44780_SetCursor+0x5c>)
 80010b2:	f107 0408 	add.w	r4, r7, #8
 80010b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HD44780_SetCursor+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d303      	bcc.n	80010ce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HD44780_SetCursor+0x60>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	3318      	adds	r3, #24
 80010d4:	443b      	add	r3, r7
 80010d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f875 	bl	80011dc <SendCommand>
}
 80010f2:	bf00      	nop
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08007e38 	.word	0x08007e38
 8001100:	20000213 	.word	0x20000213

08001104 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HD44780_Display+0x28>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HD44780_Display+0x28>)
 8001114:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HD44780_Display+0x28>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f85b 	bl	80011dc <SendCommand>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000211 	.word	0x20000211

08001130 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114e:	b25b      	sxtb	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f842 	bl	80011dc <SendCommand>
  for (int i=0; i<8; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e009      	b.n	8001172 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f846 	bl	80011f8 <SendChar>
  for (int i=0; i<8; i++)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b07      	cmp	r3, #7
 8001176:	ddf2      	ble.n	800115e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800118a:	e006      	b.n	800119a <HD44780_PrintStr+0x18>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f82f 	bl	80011f8 <SendChar>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f4      	bne.n	800118c <HD44780_PrintStr+0xa>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HD44780_NoBacklight+0x14>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f85e 	bl	8001278 <ExpanderWrite>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000214 	.word	0x20000214

080011c4 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HD44780_Backlight+0x14>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f852 	bl	8001278 <ExpanderWrite>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000214 	.word	0x20000214

080011dc <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f812 	bl	8001214 <Send>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f804 	bl	8001214 <Send>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f023 030f 	bic.w	r3, r3, #15
 800122a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	4313      	orrs	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f80b 	bl	8001256 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001240:	7bba      	ldrb	r2, [r7, #14]
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	4313      	orrs	r3, r2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f804 	bl	8001256 <Write4Bits>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f808 	bl	8001278 <ExpanderWrite>
  PulseEnable(value);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f820 	bl	80012b0 <PulseEnable>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <ExpanderWrite+0x30>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4313      	orrs	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800128e:	f107 020f 	add.w	r2, r7, #15
 8001292:	230a      	movs	r3, #10
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	217e      	movs	r1, #126	; 0x7e
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <ExpanderWrite+0x34>)
 800129c:	f002 fad6 	bl	800384c <HAL_I2C_Master_Transmit>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000214 	.word	0x20000214
 80012ac:	20000280 	.word	0x20000280

080012b0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffd8 	bl	8001278 <ExpanderWrite>
  DelayUS(20);
 80012c8:	2014      	movs	r0, #20
 80012ca:	f000 f839 	bl	8001340 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffce 	bl	8001278 <ExpanderWrite>
  DelayUS(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f000 f82f 	bl	8001340 <DelayUS>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <DelayInit>:

static void DelayInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <DelayInit+0x4c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <DelayInit+0x4c>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <DelayInit+0x4c>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <DelayInit+0x4c>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <DelayInit+0x50>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <DelayInit+0x50>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <DelayInit+0x50>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <DelayInit+0x50>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <DelayInit+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001326:	bf00      	nop
  __ASM volatile ("NOP");
 8001328:	bf00      	nop
  __ASM volatile ("NOP");
 800132a:	bf00      	nop
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000edf0 	.word	0xe000edf0
 800133c:	e0001000 	.word	0xe0001000

08001340 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <DelayUS+0x44>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <DelayUS+0x48>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9a      	lsrs	r2, r3, #18
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <DelayUS+0x4c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <DelayUS+0x4c>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f6      	bhi.n	8001362 <DelayUS+0x22>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000018 	.word	0x20000018
 8001388:	431bde83 	.word	0x431bde83
 800138c:	e0001000 	.word	0xe0001000

08001390 <led_display>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// >>>>>>>>>>>>>> LED Display module <<<<<<<<<<<<<<<<<

void led_display(uint16_t hex_number, int delay){
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	80fb      	strh	r3, [r7, #6]
	int pin[] = {GPIO_PIN_4, GPIO_PIN_3, GPIO_PIN_5, GPIO_PIN_8,GPIO_PIN_9, GPIO_PIN_0};
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <led_display+0x9c>)
 800139e:	f107 040c 	add.w	r4, r7, #12
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013ac:	e884 0003 	stmia.w	r4, {r0, r1}
	for(int i=0;i<=4;i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
 80013b4:	e01b      	b.n	80013ee <led_display+0x5e>
	  HAL_GPIO_WritePin(GPIOB, pin[i], (hex_number & (0x01 << i)) >> i);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	443b      	add	r3, r7
 80013be:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80013c2:	b299      	uxth	r1, r3
 80013c4:	88fa      	ldrh	r2, [r7, #6]
 80013c6:	2001      	movs	r0, #1
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	fa00 f303 	lsl.w	r3, r0, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	fa42 f303 	asr.w	r3, r2, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <led_display+0xa0>)
 80013dc:	f002 f89a 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(delay);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f84e 	bl	8002484 <HAL_Delay>
	for(int i=0;i<=4;i++){
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	3301      	adds	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	dde0      	ble.n	80013b6 <led_display+0x26>
	}
	if(mode != 3) HAL_GPIO_WritePin(GPIOE, pin[5], (hex_number & (0x01 << 5)) >> 5);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <led_display+0xa4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d00c      	beq.n	8001416 <led_display+0x86>
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	b299      	uxth	r1, r3
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	115b      	asrs	r3, r3, #5
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	480a      	ldr	r0, [pc, #40]	; (8001438 <led_display+0xa8>)
 8001410:	f002 f880 	bl	8003514 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOE, pin[5], 0);
}
 8001414:	e006      	b.n	8001424 <led_display+0x94>
	else HAL_GPIO_WritePin(GPIOE, pin[5], 0);
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	b29b      	uxth	r3, r3
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <led_display+0xa8>)
 8001420:	f002 f878 	bl	8003514 <HAL_GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	08007e48 	.word	0x08007e48
 8001430:	40020400 	.word	0x40020400
 8001434:	20000010 	.word	0x20000010
 8001438:	40021000 	.word	0x40021000

0800143c <clear_lcd>:

// >>>>>>>>>>>>>>> END LED Display module <<<<<<<<<<<<<<<<<<<<

// >>>>>>>>>>>>>>>>> Clear LCD mode change <<<<<<<<<<<<<<<<<<
void clear_lcd(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	if(cls_lcd > 0){
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <clear_lcd+0x2c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <clear_lcd+0x26>
		HD44780_Clear();
 8001448:	f7ff fe14 	bl	8001074 <HD44780_Clear>
		led_display(0x1f, 100);
 800144c:	2164      	movs	r1, #100	; 0x64
 800144e:	201f      	movs	r0, #31
 8001450:	f7ff ff9e 	bl	8001390 <led_display>
		led_display(0x00, 100);
 8001454:	2164      	movs	r1, #100	; 0x64
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ff9a 	bl	8001390 <led_display>
		cls_lcd = 0;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <clear_lcd+0x2c>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000220 	.word	0x20000220

0800146c <clear_LCDtemp>:
// >>>>>>>>>>>>>>>>> END Clear LCD mode change <<<<<<<<<<<<<<<<<<

// >>>>>>>>>>> temperature module <<<<<<<<<<<<<<<<<<<

void clear_LCDtemp(float temperature, int lcd_status){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	ed87 0a01 	vstr	s0, [r7, #4]
 8001476:	6038      	str	r0, [r7, #0]
	if(temperature > 100) lcd_status = 1;
 8001478:	edd7 7a01 	vldr	s15, [r7, #4]
 800147c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014b8 <clear_LCDtemp+0x4c>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	dd01      	ble.n	800148e <clear_LCDtemp+0x22>
 800148a:	2301      	movs	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
	if(temperature < 100 && lcd_status == 1){
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80014b8 <clear_LCDtemp+0x4c>
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d400      	bmi.n	80014a2 <clear_LCDtemp+0x36>
		HD44780_Clear();
		lcd_status = 0;
	}
}
 80014a0:	e006      	b.n	80014b0 <clear_LCDtemp+0x44>
	if(temperature < 100 && lcd_status == 1){
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d103      	bne.n	80014b0 <clear_LCDtemp+0x44>
		HD44780_Clear();
 80014a8:	f7ff fde4 	bl	8001074 <HD44780_Clear>
		lcd_status = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	42c80000 	.word	0x42c80000
 80014bc:	00000000 	.word	0x00000000

080014c0 <convert_data>:

float convert_data(int raw_data, char mode){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	float c = (float)raw_data/36.0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001548 <convert_data+0x88>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	edc7 7a03 	vstr	s15, [r7, #12]
	float f = 0;
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
	if(mode == 'C') return c;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	2b43      	cmp	r3, #67	; 0x43
 80014ec:	d101      	bne.n	80014f2 <convert_data+0x32>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	e01f      	b.n	8001532 <convert_data+0x72>
	if(mode == 'F') return f = (c*1.8) + 32;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b46      	cmp	r3, #70	; 0x46
 80014f6:	d11a      	bne.n	800152e <convert_data+0x6e>
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff f835 	bl	8000568 <__aeabi_f2d>
 80014fe:	a310      	add	r3, pc, #64	; (adr r3, 8001540 <convert_data+0x80>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f888 	bl	8000618 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <convert_data+0x8c>)
 8001516:	f7fe fec9 	bl	80002ac <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb51 	bl	8000bc8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	e001      	b.n	8001532 <convert_data+0x72>
	return 0.0;
 800152e:	f04f 0300 	mov.w	r3, #0
}
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	3ffccccc 	.word	0x3ffccccc
 8001548:	42100000 	.word	0x42100000
 800154c:	40400000 	.word	0x40400000

08001550 <check_temp>:

uint16_t check_temp(float temperature, char temp_mode){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	ed87 0a01 	vstr	s0, [r7, #4]
 800155a:	4603      	mov	r3, r0
 800155c:	70fb      	strb	r3, [r7, #3]
	if(temp_mode == 'F') temperature = (temperature - 32)/1.8;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	2b46      	cmp	r3, #70	; 0x46
 8001562:	d116      	bne.n	8001592 <check_temp+0x42>
 8001564:	edd7 7a01 	vldr	s15, [r7, #4]
 8001568:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001638 <check_temp+0xe8>
 800156c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe fff8 	bl	8000568 <__aeabi_f2d>
 8001578:	a32d      	add	r3, pc, #180	; (adr r3, 8001630 <check_temp+0xe0>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f975 	bl	800086c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb1d 	bl	8000bc8 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	607b      	str	r3, [r7, #4]
  	if(temperature >= 60) {
 8001592:	edd7 7a01 	vldr	s15, [r7, #4]
 8001596:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800163c <check_temp+0xec>
 800159a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db0f      	blt.n	80015c4 <check_temp+0x74>
  		if(led_blink >= 500){
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <check_temp+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ac:	d306      	bcc.n	80015bc <check_temp+0x6c>
  			led_blink = 0;
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <check_temp+0xf0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
  			HD44780_Backlight();
 80015b4:	f7ff fe06 	bl	80011c4 <HD44780_Backlight>
  			return 0x3f;
 80015b8:	233f      	movs	r3, #63	; 0x3f
 80015ba:	e032      	b.n	8001622 <check_temp+0xd2>
  		}
  		HD44780_NoBacklight();
 80015bc:	f7ff fdf6 	bl	80011ac <HD44780_NoBacklight>
  		return 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e02e      	b.n	8001622 <check_temp+0xd2>
  	}
  	HD44780_Backlight();
 80015c4:	f7ff fdfe 	bl	80011c4 <HD44780_Backlight>
	if(temperature >= 50) return 0x0f;
 80015c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001644 <check_temp+0xf4>
 80015d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	db01      	blt.n	80015de <check_temp+0x8e>
 80015da:	230f      	movs	r3, #15
 80015dc:	e021      	b.n	8001622 <check_temp+0xd2>
	if(temperature >= 40) return 0x07;
 80015de:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001648 <check_temp+0xf8>
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	db01      	blt.n	80015f4 <check_temp+0xa4>
 80015f0:	2307      	movs	r3, #7
 80015f2:	e016      	b.n	8001622 <check_temp+0xd2>
	if(temperature >= 30) return 0x03;
 80015f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	db01      	blt.n	800160a <check_temp+0xba>
 8001606:	2303      	movs	r3, #3
 8001608:	e00b      	b.n	8001622 <check_temp+0xd2>
	if(temperature >= 20) return 0x01;
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	db01      	blt.n	8001620 <check_temp+0xd0>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <check_temp+0xd2>
	return 0x00;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	cccccccd 	.word	0xcccccccd
 8001634:	3ffccccc 	.word	0x3ffccccc
 8001638:	42000000 	.word	0x42000000
 800163c:	42700000 	.word	0x42700000
 8001640:	20000234 	.word	0x20000234
 8001644:	42480000 	.word	0x42480000
 8001648:	42200000 	.word	0x42200000

0800164c <temperature>:

void temperature(){
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af02      	add	r7, sp, #8
	float temperature = 0;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
	int lcd_status = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
	int raw_data = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
	char msg[17];
	char temp_mode;

	while(1){
		clear_lcd();
 8001660:	f7ff feec 	bl	800143c <clear_lcd>
		if(mode != 1 && mode != 2) break;
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <temperature+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d003      	beq.n	8001674 <temperature+0x28>
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <temperature+0xe8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d15a      	bne.n	800172a <temperature+0xde>
		if(mode == 1) temp_mode = 'C';
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <temperature+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d103      	bne.n	8001684 <temperature+0x38>
 800167c:	2343      	movs	r3, #67	; 0x43
 800167e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001682:	e002      	b.n	800168a <temperature+0x3e>
		else temp_mode = 'F';
 8001684:	2346      	movs	r3, #70	; 0x46
 8001686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		// Read Temperature Sensor
		HAL_ADC_Start(&hadc1);
 800168a:	482b      	ldr	r0, [pc, #172]	; (8001738 <temperature+0xec>)
 800168c:	f000 ff62 	bl	8002554 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	4828      	ldr	r0, [pc, #160]	; (8001738 <temperature+0xec>)
 8001696:	f001 f856 	bl	8002746 <HAL_ADC_PollForConversion>
		raw_data = HAL_ADC_GetValue(&hadc1);
 800169a:	4827      	ldr	r0, [pc, #156]	; (8001738 <temperature+0xec>)
 800169c:	f001 fa18 	bl	8002ad0 <HAL_ADC_GetValue>
 80016a0:	4603      	mov	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
		HAL_ADC_Stop(&hadc1);
 80016a4:	4824      	ldr	r0, [pc, #144]	; (8001738 <temperature+0xec>)
 80016a6:	f001 f81b 	bl	80026e0 <HAL_ADC_Stop>

		// Display LCD && LED
		HD44780_SetCursor(0,0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fcf7 	bl	80010a0 <HD44780_SetCursor>
		sprintf(msg, "Temperature (%c)", temp_mode);
 80016b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4920      	ldr	r1, [pc, #128]	; (800173c <temperature+0xf0>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f944 	bl	8005948 <siprintf>
		HD44780_PrintStr(msg);
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fd5d 	bl	8001182 <HD44780_PrintStr>

		HD44780_SetCursor(8,1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2008      	movs	r0, #8
 80016cc:	f7ff fce8 	bl	80010a0 <HD44780_SetCursor>
		temperature = convert_data(raw_data, temp_mode);
 80016d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d4:	4619      	mov	r1, r3
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	f7ff fef2 	bl	80014c0 <convert_data>
 80016dc:	ed87 0a08 	vstr	s0, [r7, #32]
		sprintf(msg, "%.2f %c", temperature, temp_mode);
 80016e0:	6a38      	ldr	r0, [r7, #32]
 80016e2:	f7fe ff41 	bl	8000568 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80016ee:	1d38      	adds	r0, r7, #4
 80016f0:	9100      	str	r1, [sp, #0]
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <temperature+0xf4>)
 80016f4:	f004 f928 	bl	8005948 <siprintf>
		HD44780_PrintStr(msg);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd41 	bl	8001182 <HD44780_PrintStr>
		clear_LCDtemp(temperature, lcd_status);
 8001700:	69f8      	ldr	r0, [r7, #28]
 8001702:	ed97 0a08 	vldr	s0, [r7, #32]
 8001706:	f7ff feb1 	bl	800146c <clear_LCDtemp>
		led_display(check_temp(temperature, temp_mode),0);
 800170a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800170e:	4618      	mov	r0, r3
 8001710:	ed97 0a08 	vldr	s0, [r7, #32]
 8001714:	f7ff ff1c 	bl	8001550 <check_temp>
 8001718:	4603      	mov	r3, r0
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe37 	bl	8001390 <led_display>
		HAL_Delay(250);
 8001722:	20fa      	movs	r0, #250	; 0xfa
 8001724:	f000 feae 	bl	8002484 <HAL_Delay>
		clear_lcd();
 8001728:	e79a      	b.n	8001660 <temperature+0x14>
		if(mode != 1 && mode != 2) break;
 800172a:	bf00      	nop
	}
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000010 	.word	0x20000010
 8001738:	20000238 	.word	0x20000238
 800173c:	08007e60 	.word	0x08007e60
 8001740:	08007e74 	.word	0x08007e74

08001744 <led_timer>:
// >>>>>>>>>>> END temperature module <<<<<<<<<<<<<<<<<<<


// >>>>>>>>>>>>>> timer module <<<<<<<<<<<

uint16_t led_timer(int seconds){
 8001744:	b580      	push	{r7, lr}
 8001746:	b0a2      	sub	sp, #136	; 0x88
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if(seconds > 30) seconds %= 30;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b1e      	cmp	r3, #30
 8001750:	dd0d      	ble.n	800176e <led_timer+0x2a>
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <led_timer+0x6c>)
 8001756:	fb83 1302 	smull	r1, r3, r3, r2
 800175a:	4413      	add	r3, r2
 800175c:	1119      	asrs	r1, r3, #4
 800175e:	17d3      	asrs	r3, r2, #31
 8001760:	1ac9      	subs	r1, r1, r3
 8001762:	460b      	mov	r3, r1
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a5b      	subs	r3, r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	607b      	str	r3, [r7, #4]
	seconds %= 31;
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <led_timer+0x70>)
 8001772:	fb83 1302 	smull	r1, r3, r3, r2
 8001776:	4413      	add	r3, r2
 8001778:	1119      	asrs	r1, r3, #4
 800177a:	17d3      	asrs	r3, r2, #31
 800177c:	1ac9      	subs	r1, r1, r3
 800177e:	460b      	mov	r3, r1
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	1a5b      	subs	r3, r3, r1
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	607b      	str	r3, [r7, #4]
	int set_hex[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <led_timer+0x74>)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4611      	mov	r1, r2
 8001790:	227c      	movs	r2, #124	; 0x7c
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc58 	bl	8005048 <memcpy>
					 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
					 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e ,0x1f};
	return set_hex[seconds];
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3388      	adds	r3, #136	; 0x88
 800179e:	443b      	add	r3, r7
 80017a0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80017a4:	b29b      	uxth	r3, r3
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3788      	adds	r7, #136	; 0x88
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	88888889 	.word	0x88888889
 80017b4:	84210843 	.word	0x84210843
 80017b8:	08007e7c 	.word	0x08007e7c

080017bc <timer>:

void timer(){
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af02      	add	r7, sp, #8
	char msg[17];
	sprintf(msg, "Timer!");
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4930      	ldr	r1, [pc, #192]	; (8001888 <timer+0xcc>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 f8be 	bl	8005948 <siprintf>
	HD44780_SetCursor(0,0);
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fc66 	bl	80010a0 <HD44780_SetCursor>
	HD44780_PrintStr(msg);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fcd3 	bl	8001182 <HD44780_PrintStr>
	sprintf(msg, "%.2d : %.2d : %.2d.%d", hour, minute, seconds, mm_seconds);
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <timer+0xd0>)
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <timer+0xd4>)
 80017e2:	681c      	ldr	r4, [r3, #0]
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <timer+0xd8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <timer+0xdc>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	1d38      	adds	r0, r7, #4
 80017ee:	9201      	str	r2, [sp, #4]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	460a      	mov	r2, r1
 80017f6:	4929      	ldr	r1, [pc, #164]	; (800189c <timer+0xe0>)
 80017f8:	f004 f8a6 	bl	8005948 <siprintf>
	HD44780_SetCursor(0,1);
 80017fc:	2101      	movs	r1, #1
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc4e 	bl	80010a0 <HD44780_SetCursor>
	HD44780_PrintStr(msg);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fcbb 	bl	8001182 <HD44780_PrintStr>
	led_display(led_timer(seconds),0);
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <timer+0xd8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff97 	bl	8001744 <led_timer>
 8001816:	4603      	mov	r3, r0
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fdb8 	bl	8001390 <led_display>
	if(minute > 0 && seconds == 0 && mm_seconds <= 100 ) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <timer+0xd4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00d      	beq.n	8001844 <timer+0x88>
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <timer+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <timer+0x88>
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <timer+0xdc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d805      	bhi.n	8001844 <timer+0x88>
 8001838:	2201      	movs	r2, #1
 800183a:	2101      	movs	r1, #1
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <timer+0xe4>)
 800183e:	f001 fe69 	bl	8003514 <HAL_GPIO_WritePin>
 8001842:	e01c      	b.n	800187e <timer+0xc2>
	else if (minute > 0 && seconds == 0 && mm_seconds >= 200 && mm_seconds <= 300) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <timer+0xd4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d012      	beq.n	8001872 <timer+0xb6>
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <timer+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10e      	bne.n	8001872 <timer+0xb6>
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <timer+0xdc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2bc7      	cmp	r3, #199	; 0xc7
 800185a:	d90a      	bls.n	8001872 <timer+0xb6>
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <timer+0xdc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001864:	d805      	bhi.n	8001872 <timer+0xb6>
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <timer+0xe4>)
 800186c:	f001 fe52 	bl	8003514 <HAL_GPIO_WritePin>
 8001870:	e005      	b.n	800187e <timer+0xc2>
	else HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2101      	movs	r1, #1
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <timer+0xe4>)
 8001878:	f001 fe4c 	bl	8003514 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	08007ef8 	.word	0x08007ef8
 800188c:	20000228 	.word	0x20000228
 8001890:	2000022c 	.word	0x2000022c
 8001894:	20000014 	.word	0x20000014
 8001898:	20000230 	.word	0x20000230
 800189c:	08007f00 	.word	0x08007f00
 80018a0:	40021000 	.word	0x40021000

080018a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a8:	f000 fd7a 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ac:	f000 f83a 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b0:	f000 f9c6 	bl	8001c40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018b4:	f000 f8e8 	bl	8001a88 <MX_I2C1_Init>
  MX_ADC1_Init();
 80018b8:	f000 f894 	bl	80019e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018bc:	f000 f924 	bl	8001b08 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018c0:	f000 f972 	bl	8001ba8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HD44780_Init(2); // Define row
 80018c4:	2002      	movs	r0, #2
 80018c6:	f7ff fb51 	bl	8000f6c <HD44780_Init>
	HD44780_Clear(); // Clear Display
 80018ca:	f7ff fbd3 	bl	8001074 <HD44780_Clear>
	HD44780_Backlight(); // Turn on Light
 80018ce:	f7ff fc79 	bl	80011c4 <HD44780_Backlight>
	HAL_ADC_Start(&hadc1);
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <main+0x70>)
 80018d4:	f000 fe3e 	bl	8002554 <HAL_ADC_Start>


	HAL_TIM_Base_Start_IT(&htim1);
 80018d8:	480f      	ldr	r0, [pc, #60]	; (8001918 <main+0x74>)
 80018da:	f002 ff9e 	bl	800481a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <main+0x78>)
 80018e0:	f002 ff9b 	bl	800481a <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  clear_lcd();
 80018e4:	f7ff fdaa 	bl	800143c <clear_lcd>
	  if(mode == 1) temperature();
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <main+0x7c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <main+0x52>
 80018f0:	f7ff feac 	bl	800164c <temperature>
 80018f4:	e7f6      	b.n	80018e4 <main+0x40>
	  else if(mode == 3) timer();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <main+0x7c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d102      	bne.n	8001904 <main+0x60>
 80018fe:	f7ff ff5d 	bl	80017bc <timer>
 8001902:	e7ef      	b.n	80018e4 <main+0x40>
	  else if(mode > 3)
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <main+0x7c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d9eb      	bls.n	80018e4 <main+0x40>
		  HD44780_Clear();
 800190c:	f7ff fbb2 	bl	8001074 <HD44780_Clear>
	  clear_lcd();
 8001910:	e7e8      	b.n	80018e4 <main+0x40>
 8001912:	bf00      	nop
 8001914:	20000238 	.word	0x20000238
 8001918:	200002d4 	.word	0x200002d4
 800191c:	20000314 	.word	0x20000314
 8001920:	20000010 	.word	0x20000010

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fb96 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <SystemClock_Config+0xb8>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <SystemClock_Config+0xb8>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <SystemClock_Config+0xb8>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <SystemClock_Config+0xbc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <SystemClock_Config+0xbc>)
 8001972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <SystemClock_Config+0xbc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198c:	2310      	movs	r3, #16
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fad9 	bl	8003f50 <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019a4:	f000 f9fe 	bl	8001da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fd32 	bl	800442c <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019ce:	f000 f9e9 	bl	8001da4 <Error_Handler>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3750      	adds	r7, #80	; 0x50
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <MX_ADC1_Init+0x9c>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <MX_ADC1_Init+0xa0>)
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a42:	480e      	ldr	r0, [pc, #56]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a44:	f000 fd42 	bl	80024cc <HAL_ADC_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 f9a9 	bl	8001da4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a52:	2308      	movs	r3, #8
 8001a54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a64:	f001 f860 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a6e:	f000 f999 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000238 	.word	0x20000238
 8001a80:	40012000 	.word	0x40012000
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_I2C1_Init+0x74>)
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <MX_I2C1_Init+0x78>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_I2C1_Init+0x74>)
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <MX_I2C1_Init+0x7c>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_I2C1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_I2C1_Init+0x74>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_I2C1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_I2C1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <MX_I2C1_Init+0x74>)
 8001ac6:	f001 fd7d 	bl	80035c4 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 f968 	bl	8001da4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <MX_I2C1_Init+0x74>)
 8001ad8:	f002 f9bf 	bl	8003e5a <HAL_I2CEx_ConfigAnalogFilter>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001ae2:	f000 f95f 	bl	8001da4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_I2C1_Init+0x74>)
 8001aea:	f002 f9f2 	bl	8003ed2 <HAL_I2CEx_ConfigDigitalFilter>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001af4:	f000 f956 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000280 	.word	0x20000280
 8001b00:	40005400 	.word	0x40005400
 8001b04:	000186a0 	.word	0x000186a0

08001b08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <MX_TIM1_Init+0x9c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b2c:	22a0      	movs	r2, #160	; 0xa0
 8001b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b52:	f002 fe37 	bl	80047c4 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b5c:	f000 f922 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b6e:	f002 ff80 	bl	8004a72 <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b78:	f000 f914 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM1_Init+0x98>)
 8001b8a:	f003 f9a3 	bl	8004ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b94:	f000 f906 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002d4 	.word	0x200002d4
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001bce:	2210      	movs	r2, #16
 8001bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bec:	4813      	ldr	r0, [pc, #76]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001bee:	f002 fde9 	bl	80047c4 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bf8:	f000 f8d4 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001c0a:	f002 ff32 	bl	8004a72 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c14:	f000 f8c6 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c20:	463b      	mov	r3, r7
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_TIM2_Init+0x94>)
 8001c26:	f003 f955 	bl	8004ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c30:	f000 f8b8 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000314 	.word	0x20000314

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b49      	ldr	r3, [pc, #292]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a36      	ldr	r2, [pc, #216]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <MX_GPIO_Init+0x14c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ce8:	4829      	ldr	r0, [pc, #164]	; (8001d90 <MX_GPIO_Init+0x150>)
 8001cea:	f001 fc13 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001cf4:	4827      	ldr	r0, [pc, #156]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001cf6:	f001 fc0d 	bl	8003514 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4826      	ldr	r0, [pc, #152]	; (8001d98 <MX_GPIO_Init+0x158>)
 8001d00:	f001 fc08 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_GPIO_Init+0x15c>)
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4822      	ldr	r0, [pc, #136]	; (8001da0 <MX_GPIO_Init+0x160>)
 8001d18:	f001 fa50 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4816      	ldr	r0, [pc, #88]	; (8001d90 <MX_GPIO_Init+0x150>)
 8001d36:	f001 fa41 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8001d3a:	f44f 734e 	mov.w	r3, #824	; 0x338
 8001d3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001d54:	f001 fa32 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480a      	ldr	r0, [pc, #40]	; (8001d98 <MX_GPIO_Init+0x158>)
 8001d70:	f001 fa24 	bl	80031bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2006      	movs	r0, #6
 8001d7a:	f001 f9e8 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d7e:	2006      	movs	r0, #6
 8001d80:	f001 fa01 	bl	8003186 <HAL_NVIC_EnableIRQ>

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40020000 	.word	0x40020000

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_ADC_MspInit+0x8c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d12f      	bne.n	8001e86 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_ADC_MspInit+0x90>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e62:	2303      	movs	r3, #3
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <HAL_ADC_MspInit+0x94>)
 8001e72:	f001 f9a3 	bl	80031bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2012      	movs	r0, #18
 8001e7c:	f001 f967 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e80:	2012      	movs	r0, #18
 8001e82:	f001 f980 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012000 	.word	0x40012000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400

08001e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_I2C_MspInit+0x84>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d12b      	bne.n	8001f16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eea:	2304      	movs	r3, #4
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <HAL_I2C_MspInit+0x8c>)
 8001ef6:	f001 f961 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_TIM_Base_MspInit+0x80>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d116      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2019      	movs	r0, #25
 8001f60:	f001 f8f5 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f64:	2019      	movs	r0, #25
 8001f66:	f001 f90e 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f6a:	e01a      	b.n	8001fa2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d115      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_TIM_Base_MspInit+0x84>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	201c      	movs	r0, #28
 8001f98:	f001 f8d9 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f9c:	201c      	movs	r0, #28
 8001f9e:	f001 f8f2 	bl	8003186 <HAL_NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002008:	f000 fa1c 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	mode_check++;
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <EXTI0_IRQHandler+0x18>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a03      	ldr	r2, [pc, #12]	; (8002028 <EXTI0_IRQHandler+0x18>)
 800201c:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800201e:	2001      	movs	r0, #1
 8002020:	f001 faac 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000021c 	.word	0x2000021c

0800202c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <ADC_IRQHandler+0x10>)
 8002032:	f000 fc0c 	bl	800284e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000238 	.word	0x20000238

08002040 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void) //check every 10 mm_seconds
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	4828      	ldr	r0, [pc, #160]	; (80020ec <TIM1_UP_TIM10_IRQHandler+0xac>)
 800204a:	f001 fa7c 	bl	8003546 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800204e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002052:	4826      	ldr	r0, [pc, #152]	; (80020ec <TIM1_UP_TIM10_IRQHandler+0xac>)
 8002054:	f001 fa77 	bl	8003546 <HAL_GPIO_TogglePin>

//	interrupt
	if(mode_check != 0){
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <TIM1_UP_TIM10_IRQHandler+0xb0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <TIM1_UP_TIM10_IRQHandler+0x50>
		mode_count++;
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 8002068:	6013      	str	r3, [r2, #0]

		//   >>> pause or play <<<<< /*timer mode*/
		if(mode == 3 && mode_count == 1){ // change mode == timer mode
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d10e      	bne.n	8002090 <TIM1_UP_TIM10_IRQHandler+0x50>
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10a      	bne.n	8002090 <TIM1_UP_TIM10_IRQHandler+0x50>
			if(timer_start == 0) timer_start = 1;
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <TIM1_UP_TIM10_IRQHandler+0xbc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <TIM1_UP_TIM10_IRQHandler+0x4a>
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <TIM1_UP_TIM10_IRQHandler+0xbc>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e002      	b.n	8002090 <TIM1_UP_TIM10_IRQHandler+0x50>
			else timer_start = 0;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <TIM1_UP_TIM10_IRQHandler+0xbc>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
		}
	}
	if(mode_count < 50 && mode_check >= 2){
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b31      	cmp	r3, #49	; 0x31
 8002096:	d81a      	bhi.n	80020ce <TIM1_UP_TIM10_IRQHandler+0x8e>
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <TIM1_UP_TIM10_IRQHandler+0xb0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d916      	bls.n	80020ce <TIM1_UP_TIM10_IRQHandler+0x8e>
		cls_lcd++;
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 80020a8:	6013      	str	r3, [r2, #0]
		mode++;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 80020b2:	6013      	str	r3, [r2, #0]
		if(mode == 4) mode = 1; // config amount mode here
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d102      	bne.n	80020c2 <TIM1_UP_TIM10_IRQHandler+0x82>
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
		mode_count = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
		mode_check = 0;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <TIM1_UP_TIM10_IRQHandler+0xb0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
	}
	if(mode_count == 50) {
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b32      	cmp	r3, #50	; 0x32
 80020d4:	d105      	bne.n	80020e2 <TIM1_UP_TIM10_IRQHandler+0xa2>
		mode_count = 0;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
		mode_check =0;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <TIM1_UP_TIM10_IRQHandler+0xb0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <TIM1_UP_TIM10_IRQHandler+0xc4>)
 80020e4:	f002 fbbd 	bl	8004862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021800 	.word	0x40021800
 80020f0:	2000021c 	.word	0x2000021c
 80020f4:	20000218 	.word	0x20000218
 80020f8:	20000010 	.word	0x20000010
 80020fc:	20000224 	.word	0x20000224
 8002100:	20000220 	.word	0x20000220
 8002104:	200002d4 	.word	0x200002d4

08002108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) //check every 1 mm_seconds
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// timer //
	if(timer_start == 1){
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <TIM2_IRQHandler+0x84>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d130      	bne.n	8002176 <TIM2_IRQHandler+0x6e>
		if(mm_seconds == 1000){
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <TIM2_IRQHandler+0x88>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211c:	d107      	bne.n	800212e <TIM2_IRQHandler+0x26>
			seconds++;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <TIM2_IRQHandler+0x8c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <TIM2_IRQHandler+0x8c>)
 8002126:	6013      	str	r3, [r2, #0]
			mm_seconds = 0;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <TIM2_IRQHandler+0x88>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
		}
		if (seconds == 60){
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <TIM2_IRQHandler+0x8c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b3c      	cmp	r3, #60	; 0x3c
 8002134:	d107      	bne.n	8002146 <TIM2_IRQHandler+0x3e>
			minute++;
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <TIM2_IRQHandler+0x90>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <TIM2_IRQHandler+0x90>)
 800213e:	6013      	str	r3, [r2, #0]
			seconds = 0;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <TIM2_IRQHandler+0x8c>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
		}
		if (minute == 60){
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <TIM2_IRQHandler+0x90>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b3c      	cmp	r3, #60	; 0x3c
 800214c:	d107      	bne.n	800215e <TIM2_IRQHandler+0x56>
			hour++;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <TIM2_IRQHandler+0x94>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <TIM2_IRQHandler+0x94>)
 8002156:	6013      	str	r3, [r2, #0]
			minute = 0;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <TIM2_IRQHandler+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
		}
		if (hour == 24){
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <TIM2_IRQHandler+0x94>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b18      	cmp	r3, #24
 8002164:	d102      	bne.n	800216c <TIM2_IRQHandler+0x64>
			hour = 0;
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <TIM2_IRQHandler+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
		}
		mm_seconds++;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <TIM2_IRQHandler+0x88>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <TIM2_IRQHandler+0x88>)
 8002174:	6013      	str	r3, [r2, #0]
	}

	//temperature led module
	led_blink++;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <TIM2_IRQHandler+0x98>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <TIM2_IRQHandler+0x98>)
 800217e:	6013      	str	r3, [r2, #0]

	/* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <TIM2_IRQHandler+0x9c>)
 8002182:	f002 fb6e 	bl	8004862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000224 	.word	0x20000224
 8002190:	20000230 	.word	0x20000230
 8002194:	20000014 	.word	0x20000014
 8002198:	2000022c 	.word	0x2000022c
 800219c:	20000228 	.word	0x20000228
 80021a0:	20000234 	.word	0x20000234
 80021a4:	20000314 	.word	0x20000314

080021a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
	return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021c2:	f002 ff17 	bl	8004ff4 <__errno>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2216      	movs	r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
	return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_exit>:

void _exit (int status)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffe7 	bl	80021b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ea:	e7fe      	b.n	80021ea <_exit+0x12>

080021ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00a      	b.n	8002214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fe:	f3af 8000 	nop.w
 8002202:	4601      	mov	r1, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	b2ca      	uxtb	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf0      	blt.n	80021fe <_read+0x12>
	}

return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e009      	b.n	800224c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf1      	blt.n	8002238 <_write+0x12>
	}
	return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_close>:

int _close(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
	return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_isatty>:

int _isatty(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_sbrk+0x50>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x16>
		heap_end = &end;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <_sbrk+0x50>)
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <_sbrk+0x54>)
 80022dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <_sbrk+0x50>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <_sbrk+0x50>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	466a      	mov	r2, sp
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d907      	bls.n	8002302 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022f2:	f002 fe7f 	bl	8004ff4 <__errno>
 80022f6:	4603      	mov	r3, r0
 80022f8:	220c      	movs	r2, #12
 80022fa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	e006      	b.n	8002310 <_sbrk+0x48>
	}

	heap_end += incr;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <_sbrk+0x50>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <_sbrk+0x50>)
 800230c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000354 	.word	0x20000354
 800231c:	20000370 	.word	0x20000370

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <SystemInit+0x28>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <SystemInit+0x28>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SystemInit+0x28>)
 8002336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233a:	609a      	str	r2, [r3, #8]
#endif
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002352:	e003      	b.n	800235c <LoopCopyDataInit>

08002354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235a:	3104      	adds	r1, #4

0800235c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002364:	d3f6      	bcc.n	8002354 <CopyDataInit>
  ldr  r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002368:	e002      	b.n	8002370 <LoopFillZerobss>

0800236a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800236a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800236c:	f842 3b04 	str.w	r3, [r2], #4

08002370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002374:	d3f9      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff ffd3 	bl	8002320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f002 fe41 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff fa91 	bl	80018a4 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002384:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002388:	0800831c 	.word	0x0800831c
  ldr  r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002390:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002394:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8002398:	2000036c 	.word	0x2000036c

0800239c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <CAN1_RX0_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_Init+0x40>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_Init+0x40>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x40>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 feb5 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fcee 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fecd 	bl	80031a2 <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 fe95 	bl	800314e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000018 	.word	0x20000018
 800243c:	20000020 	.word	0x20000020
 8002440:	2000001c 	.word	0x2000001c

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000020 	.word	0x20000020
 8002468:	20000358 	.word	0x20000358

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000358 	.word	0x20000358

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000020 	.word	0x20000020

080024cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e033      	b.n	800254a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fc8a 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002512:	f023 0302 	bic.w	r3, r3, #2
 8002516:	f043 0202 	orr.w	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fc34 	bl	8002d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
 800253a:	e001      	b.n	8002540 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_ADC_Start+0x1a>
 800256a:	2302      	movs	r3, #2
 800256c:	e0a5      	b.n	80026ba <HAL_ADC_Start+0x166>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d018      	beq.n	80025b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_ADC_Start+0x174>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4c      	ldr	r2, [pc, #304]	; (80026cc <HAL_ADC_Start+0x178>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9a      	lsrs	r2, r3, #18
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d179      	bne.n	80026b8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d106      	bne.n	8002612 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f023 0206 	bic.w	r2, r3, #6
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
 8002610:	e002      	b.n	8002618 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_ADC_Start+0x17c>)
 8002622:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800262c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12a      	bne.n	8002690 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_ADC_Start+0x180>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d015      	beq.n	8002670 <HAL_ADC_Start+0x11c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_ADC_Start+0x184>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d105      	bne.n	800265a <HAL_ADC_Start+0x106>
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_ADC_Start+0x17c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_ADC_Start+0x188>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d129      	bne.n	80026b8 <HAL_ADC_Start+0x164>
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_ADC_Start+0x17c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d123      	bne.n	80026b8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11c      	bne.n	80026b8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	e013      	b.n	80026b8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_ADC_Start+0x180>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10e      	bne.n	80026b8 <HAL_ADC_Start+0x164>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000018 	.word	0x20000018
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	40012100 	.word	0x40012100
 80026dc:	40012200 	.word	0x40012200

080026e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Stop+0x16>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e021      	b.n	800273a <HAL_ADC_Stop+0x5a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d113      	bne.n	800278c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800276e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002772:	d10b      	bne.n	800278c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e05c      	b.n	8002846 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800278c:	f7ff fe6e 	bl	800246c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002792:	e01a      	b.n	80027ca <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d016      	beq.n	80027ca <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_PollForConversion+0x6c>
 80027a2:	f7ff fe63 	bl	800246c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d20b      	bcs.n	80027ca <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e03d      	b.n	8002846 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d1dd      	bne.n	8002794 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0212 	mvn.w	r2, #18
 80027e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d123      	bne.n	8002844 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11f      	bne.n	8002844 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d049      	beq.n	8002924 <HAL_ADC_IRQHandler+0xd6>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d046      	beq.n	8002924 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12b      	bne.n	8002914 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d127      	bne.n	8002914 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d119      	bne.n	8002914 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0220 	bic.w	r2, r2, #32
 80028ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f8e8 	bl	8002aea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f06f 0212 	mvn.w	r2, #18
 8002922:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d057      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x1b8>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d054      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d139      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12b      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d124      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fac4 	bl	8002f84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 020c 	mvn.w	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d017      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x21a>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d014      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f850 	bl	8002afe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0201 	mvn.w	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x27a>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f043 0202 	orr.w	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0220 	mvn.w	r2, #32
 8002ab6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f82a 	bl	8002b12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f06f 0220 	mvn.w	r2, #32
 8002ac6:	601a      	str	r2, [r3, #0]
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e113      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x244>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d925      	bls.n	8002ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	3b1e      	subs	r3, #30
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43da      	mvns	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	400a      	ands	r2, r1
 8002b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4403      	add	r3, r0
 8002b92:	3b1e      	subs	r3, #30
 8002b94:	409a      	lsls	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	e022      	b.n	8002be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6919      	ldr	r1, [r3, #16]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4403      	add	r3, r0
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d824      	bhi.n	8002c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b05      	subs	r3, #5
 8002c00:	221f      	movs	r2, #31
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	3b05      	subs	r3, #5
 8002c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
 8002c36:	e04c      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d824      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b23      	subs	r3, #35	; 0x23
 8002c52:	221f      	movs	r2, #31
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b23      	subs	r3, #35	; 0x23
 8002c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
 8002c88:	e023      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b41      	subs	r3, #65	; 0x41
 8002c9c:	221f      	movs	r2, #31
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	400a      	ands	r2, r1
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b41      	subs	r3, #65	; 0x41
 8002cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_ADC_ConfigChannel+0x250>)
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_ADC_ConfigChannel+0x254>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10f      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1d8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b12      	cmp	r3, #18
 8002ce6:	d10b      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_ADC_ConfigChannel+0x254>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12b      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_ADC_ConfigChannel+0x258>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x1f4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b11      	cmp	r3, #17
 8002d1a:	d122      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_ADC_ConfigChannel+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_ADC_ConfigChannel+0x25c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_ADC_ConfigChannel+0x260>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9a      	lsrs	r2, r3, #18
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d54:	e002      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	40012000 	.word	0x40012000
 8002d80:	10000012 	.word	0x10000012
 8002d84:	20000018 	.word	0x20000018
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d94:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <ADC_Init+0x1f0>)
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <ADC_Init+0x1f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d022      	beq.n	8002e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e00f      	b.n	8002e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0202 	bic.w	r2, r2, #2
 8002e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7e1b      	ldrb	r3, [r3, #24]
 8002ea4:	005a      	lsls	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	035a      	lsls	r2, r3, #13
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	e007      	b.n	8002f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	051a      	lsls	r2, r3, #20
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f42:	025a      	lsls	r2, r3, #9
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	029a      	lsls	r2, r3, #10
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40012300 	.word	0x40012300
 8002f80:	0f000001 	.word	0x0f000001

08002f84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff29 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff3e 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff8e 	bl	800308c <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5d 	bl	8003038 <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff31 	bl	8002ffc <__NVIC_EnableIRQ>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffa2 	bl	80030f4 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e177      	b.n	80034c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8166 	bne.w	80034c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d00b      	beq.n	8003216 <HAL_GPIO_Init+0x5a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800320a:	2b11      	cmp	r3, #17
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b12      	cmp	r3, #18
 8003214:	d130      	bne.n	8003278 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800324c:	2201      	movs	r2, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 0201 	and.w	r2, r3, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0xfc>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80c0 	beq.w	80034c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a61      	ldr	r2, [pc, #388]	; (80034e4 <HAL_GPIO_Init+0x328>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_GPIO_Init+0x32c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d037      	beq.n	80033fa <HAL_GPIO_Init+0x23e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a57      	ldr	r2, [pc, #348]	; (80034ec <HAL_GPIO_Init+0x330>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d031      	beq.n	80033f6 <HAL_GPIO_Init+0x23a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a56      	ldr	r2, [pc, #344]	; (80034f0 <HAL_GPIO_Init+0x334>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02b      	beq.n	80033f2 <HAL_GPIO_Init+0x236>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a55      	ldr	r2, [pc, #340]	; (80034f4 <HAL_GPIO_Init+0x338>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d025      	beq.n	80033ee <HAL_GPIO_Init+0x232>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_GPIO_Init+0x33c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <HAL_GPIO_Init+0x22e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a53      	ldr	r2, [pc, #332]	; (80034fc <HAL_GPIO_Init+0x340>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x22a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_GPIO_Init+0x344>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x226>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a51      	ldr	r2, [pc, #324]	; (8003504 <HAL_GPIO_Init+0x348>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x222>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a50      	ldr	r2, [pc, #320]	; (8003508 <HAL_GPIO_Init+0x34c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x21e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	; (800350c <HAL_GPIO_Init+0x350>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x21a>
 80033d2:	2309      	movs	r3, #9
 80033d4:	e012      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033d6:	230a      	movs	r3, #10
 80033d8:	e010      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033da:	2308      	movs	r3, #8
 80033dc:	e00e      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033de:	2307      	movs	r3, #7
 80033e0:	e00c      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033e2:	2306      	movs	r3, #6
 80033e4:	e00a      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033e6:	2305      	movs	r3, #5
 80033e8:	e008      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e006      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033ee:	2303      	movs	r3, #3
 80033f0:	e004      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e002      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_GPIO_Init+0x240>
 80033fa:	2300      	movs	r3, #0
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f002 0203 	and.w	r2, r2, #3
 8003402:	0092      	lsls	r2, r2, #2
 8003404:	4093      	lsls	r3, r2
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800340c:	4935      	ldr	r1, [pc, #212]	; (80034e4 <HAL_GPIO_Init+0x328>)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3302      	adds	r3, #2
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_GPIO_Init+0x354>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343e:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_GPIO_Init+0x354>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_GPIO_Init+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003468:	4a29      	ldr	r2, [pc, #164]	; (8003510 <HAL_GPIO_Init+0x354>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_GPIO_Init+0x354>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_GPIO_Init+0x354>)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_GPIO_Init+0x354>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_GPIO_Init+0x354>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	f67f ae84 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40020000 	.word	0x40020000
 80034ec:	40020400 	.word	0x40020400
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40021400 	.word	0x40021400
 8003500:	40021800 	.word	0x40021800
 8003504:	40021c00 	.word	0x40021c00
 8003508:	40022000 	.word	0x40022000
 800350c:	40022400 	.word	0x40022400
 8003510:	40013c00 	.word	0x40013c00

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	401a      	ands	r2, r3
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	429a      	cmp	r2, r3
 800355e:	d104      	bne.n	800356a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003568:	e002      	b.n	8003570 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f806 	bl	80035ac <HAL_GPIO_EXTI_Callback>
  }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e12b      	b.n	800382e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fc56 	bl	8001e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	; 0x24
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003628:	f001 f8b8 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a81      	ldr	r2, [pc, #516]	; (8003838 <HAL_I2C_Init+0x274>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d807      	bhi.n	8003648 <HAL_I2C_Init+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a80      	ldr	r2, [pc, #512]	; (800383c <HAL_I2C_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e006      	b.n	8003656 <HAL_I2C_Init+0x92>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a7d      	ldr	r2, [pc, #500]	; (8003840 <HAL_I2C_Init+0x27c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	bf94      	ite	ls
 8003650:	2301      	movls	r3, #1
 8003652:	2300      	movhi	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0e7      	b.n	800382e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a78      	ldr	r2, [pc, #480]	; (8003844 <HAL_I2C_Init+0x280>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <HAL_I2C_Init+0x274>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <HAL_I2C_Init+0xd4>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3301      	adds	r3, #1
 8003696:	e009      	b.n	80036ac <HAL_I2C_Init+0xe8>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_I2C_Init+0x284>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	3301      	adds	r3, #1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	495c      	ldr	r1, [pc, #368]	; (8003838 <HAL_I2C_Init+0x274>)
 80036c8:	428b      	cmp	r3, r1
 80036ca:	d819      	bhi.n	8003700 <HAL_I2C_Init+0x13c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e59      	subs	r1, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036e0:	400b      	ands	r3, r1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_I2C_Init+0x138>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e59      	subs	r1, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	e051      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 80036fc:	2304      	movs	r3, #4
 80036fe:	e04f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <HAL_I2C_Init+0x168>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e012      	b.n	8003752 <HAL_I2C_Init+0x18e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x196>
 8003756:	2301      	movs	r3, #1
 8003758:	e022      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <HAL_I2C_Init+0x1bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e58      	subs	r0, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	440b      	add	r3, r1
 8003770:	fbb0 f3f3 	udiv	r3, r0, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6809      	ldr	r1, [r1, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6911      	ldr	r1, [r2, #16]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68d2      	ldr	r2, [r2, #12]
 80037da:	4311      	orrs	r1, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	000186a0 	.word	0x000186a0
 800383c:	001e847f 	.word	0x001e847f
 8003840:	003d08ff 	.word	0x003d08ff
 8003844:	431bde83 	.word	0x431bde83
 8003848:	10624dd3 	.word	0x10624dd3

0800384c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	461a      	mov	r2, r3
 8003858:	460b      	mov	r3, r1
 800385a:	817b      	strh	r3, [r7, #10]
 800385c:	4613      	mov	r3, r2
 800385e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7fe fe04 	bl	800246c <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	f040 80e0 	bne.w	8003a34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2319      	movs	r3, #25
 800387a:	2201      	movs	r2, #1
 800387c:	4970      	ldr	r1, [pc, #448]	; (8003a40 <HAL_I2C_Master_Transmit+0x1f4>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f964 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	e0d3      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2C_Master_Transmit+0x50>
 8003898:	2302      	movs	r3, #2
 800389a:	e0cc      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d007      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2221      	movs	r2, #33	; 0x21
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2210      	movs	r2, #16
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	893a      	ldrh	r2, [r7, #8]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a50      	ldr	r2, [pc, #320]	; (8003a44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f89c 	bl	8003a48 <I2C_MasterRequestWrite>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e08d      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003930:	e066      	b.n	8003a00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f9de 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b04      	cmp	r3, #4
 8003948:	d107      	bne.n	800395a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06b      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d11b      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x188>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d017      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6a39      	ldr	r1, [r7, #32]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f9ce 	bl	8003d7a <I2C_WaitOnBTFFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e01a      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d194      	bne.n	8003932 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	00100002 	.word	0x00100002
 8003a44:	ffff0000 	.word	0xffff0000

08003a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d006      	beq.n	8003a72 <I2C_MasterRequestWrite+0x2a>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d003      	beq.n	8003a72 <I2C_MasterRequestWrite+0x2a>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a70:	d108      	bne.n	8003a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e00b      	b.n	8003a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b12      	cmp	r3, #18
 8003a8a:	d107      	bne.n	8003a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f84f 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac2:	d103      	bne.n	8003acc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e035      	b.n	8003b3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad8:	d108      	bne.n	8003aec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ada:	897b      	ldrh	r3, [r7, #10]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae8:	611a      	str	r2, [r3, #16]
 8003aea:	e01b      	b.n	8003b24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aec:	897b      	ldrh	r3, [r7, #10]
 8003aee:	11db      	asrs	r3, r3, #7
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 0306 	and.w	r3, r3, #6
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f063 030f 	orn	r3, r3, #15
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <I2C_MasterRequestWrite+0xfc>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f875 	bl	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e010      	b.n	8003b3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4907      	ldr	r1, [pc, #28]	; (8003b48 <I2C_MasterRequestWrite+0x100>)
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f865 	bl	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	00010008 	.word	0x00010008
 8003b48:	00010002 	.word	0x00010002

08003b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5c:	e025      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d021      	beq.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe fc81 	bl	800246c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d116      	bne.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e023      	b.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10d      	bne.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	e00c      	b.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d0b6      	beq.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c08:	e051      	b.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	d123      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e046      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d021      	beq.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe fbff 	bl	800246c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d116      	bne.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f043 0220 	orr.w	r2, r3, #32
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e020      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d10c      	bne.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e00b      	b.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d18d      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d04:	e02d      	b.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f878 	bl	8003dfc <I2C_IsAcknowledgeFailed>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e02d      	b.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d021      	beq.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fba5 	bl	800246c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e007      	b.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d1ca      	bne.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d86:	e02d      	b.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f837 	bl	8003dfc <I2C_IsAcknowledgeFailed>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e02d      	b.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d021      	beq.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da0:	f7fe fb64 	bl	800246c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e007      	b.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d1ca      	bne.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d11b      	bne.n	8003e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0204 	orr.w	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d129      	bne.n	8003ec4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0210 	bic.w	r2, r2, #16
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d12a      	bne.n	8003f42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	f023 030f 	bic.w	r3, r3, #15
 8003f12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	89fb      	ldrh	r3, [r7, #14]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	89fa      	ldrh	r2, [r7, #14]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e25e      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d075      	beq.n	800405a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d10b      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05b      	beq.n	8004058 <HAL_RCC_OscConfig+0x108>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d157      	bne.n	8004058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e239      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x74>
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x98>
 8003fce:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6c      	ldr	r2, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	4b69      	ldr	r3, [pc, #420]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a68      	ldr	r2, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fa30 	bl	800246c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fa2c 	bl	800246c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1fe      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xc0>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fa1c 	bl	800246c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fa18 	bl	800246c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1ea      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0xe8>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1be      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fe f9d1 	bl	800246c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fe f9cd 	bl	800246c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e19f      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4925      	ldr	r1, [pc, #148]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe f9b0 	bl	800246c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004110:	f7fe f9ac 	bl	800246c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e17e      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fe f990 	bl	800246c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004150:	f7fe f98c 	bl	800246c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e15e      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x200>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fe f979 	bl	800246c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe f975 	bl	800246c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e147      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
 8004190:	40023800 	.word	0x40023800
 8004194:	42470000 	.word	0x42470000
 8004198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8097 	beq.w	80042e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b7d      	ldr	r3, [pc, #500]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a7c      	ldr	r2, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b77      	ldr	r3, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a73      	ldr	r2, [pc, #460]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fe f935 	bl	800246c <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fe f931 	bl	800246c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e103      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x2ea>
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a63      	ldr	r2, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a57      	ldr	r2, [pc, #348]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a54      	ldr	r2, [pc, #336]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fe f8f6 	bl	800246c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fe f8f2 	bl	800246c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0c2      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x334>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fe f8e0 	bl	800246c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fe f8dc 	bl	800246c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0ac      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8098 	beq.w	800441e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d05c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d141      	bne.n	8004386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe f8b0 	bl	800246c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe f8ac 	bl	800246c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e07e      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	491b      	ldr	r1, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe f885 	bl	800246c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fe f881 	bl	800246c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e053      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x416>
 8004384:	e04b      	b.n	800441e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fe f86e 	bl	800246c <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe f86a 	bl	800246c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e03c      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x444>
 80043b2:	e034      	b.n	800441e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e02f      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043cc:	4b16      	ldr	r3, [pc, #88]	; (8004428 <HAL_RCC_OscConfig+0x4d8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d11c      	bne.n	800441a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d115      	bne.n	800441a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10d      	bne.n	800441a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0cc      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90c      	bls.n	8004468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b8      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004480:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004498:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	494d      	ldr	r1, [pc, #308]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d044      	beq.n	800454c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d119      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e067      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4934      	ldr	r1, [pc, #208]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451c:	f7fd ffa6 	bl	800246c <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fd ffa2 	bl	800246c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e04f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d20c      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e032      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	490e      	ldr	r1, [pc, #56]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b2:	f000 f821 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	490a      	ldr	r1, [pc, #40]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	5ccb      	ldrb	r3, [r1, r3]
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd ff06 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023c00 	.word	0x40023c00
 80045e8:	40023800 	.word	0x40023800
 80045ec:	08007f18 	.word	0x08007f18
 80045f0:	20000018 	.word	0x20000018
 80045f4:	2000001c 	.word	0x2000001c

080045f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045fc:	b090      	sub	sp, #64	; 0x40
 80045fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
 8004604:	2300      	movs	r3, #0
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004608:	2300      	movs	r3, #0
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b08      	cmp	r3, #8
 800461a:	d00d      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x40>
 800461c:	2b08      	cmp	r3, #8
 800461e:	f200 80a1 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x16c>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x34>
 8004626:	2b04      	cmp	r3, #4
 8004628:	d003      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0x3a>
 800462a:	e09b      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_GetSysClockFreq+0x184>)
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004630:	e09b      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004632:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_GetSysClockFreq+0x188>)
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004636:	e098      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004638:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004642:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d028      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	099b      	lsrs	r3, r3, #6
 8004654:	2200      	movs	r2, #0
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	627a      	str	r2, [r7, #36]	; 0x24
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004660:	2100      	movs	r1, #0
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCC_GetSysClockFreq+0x188>)
 8004664:	fb03 f201 	mul.w	r2, r3, r1
 8004668:	2300      	movs	r3, #0
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	4413      	add	r3, r2
 8004670:	4a43      	ldr	r2, [pc, #268]	; (8004780 <HAL_RCC_GetSysClockFreq+0x188>)
 8004672:	fba0 1202 	umull	r1, r2, r0, r2
 8004676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004678:	460a      	mov	r2, r1
 800467a:	62ba      	str	r2, [r7, #40]	; 0x28
 800467c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467e:	4413      	add	r3, r2
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	2200      	movs	r2, #0
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	61fa      	str	r2, [r7, #28]
 800468a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004692:	f7fc fae9 	bl	8000c68 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4613      	mov	r3, r2
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469e:	e053      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a0:	4b35      	ldr	r3, [pc, #212]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	2200      	movs	r2, #0
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	617a      	str	r2, [r7, #20]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046b2:	f04f 0b00 	mov.w	fp, #0
 80046b6:	4652      	mov	r2, sl
 80046b8:	465b      	mov	r3, fp
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c8:	0150      	lsls	r0, r2, #5
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	ebb2 080a 	subs.w	r8, r2, sl
 80046d2:	eb63 090b 	sbc.w	r9, r3, fp
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046ea:	ebb2 0408 	subs.w	r4, r2, r8
 80046ee:	eb63 0509 	sbc.w	r5, r3, r9
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	00eb      	lsls	r3, r5, #3
 80046fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004700:	00e2      	lsls	r2, r4, #3
 8004702:	4614      	mov	r4, r2
 8004704:	461d      	mov	r5, r3
 8004706:	eb14 030a 	adds.w	r3, r4, sl
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	eb45 030b 	adc.w	r3, r5, fp
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471e:	4629      	mov	r1, r5
 8004720:	028b      	lsls	r3, r1, #10
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004728:	4621      	mov	r1, r4
 800472a:	028a      	lsls	r2, r1, #10
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	2200      	movs	r2, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	60fa      	str	r2, [r7, #12]
 8004738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473c:	f7fc fa94 	bl	8000c68 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_GetSysClockFreq+0x180>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004762:	e002      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetSysClockFreq+0x184>)
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800476c:	4618      	mov	r0, r3
 800476e:	3740      	adds	r7, #64	; 0x40
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	00f42400 	.word	0x00f42400
 8004780:	017d7840 	.word	0x017d7840

08004784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCC_GetHCLKFreq+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000018 	.word	0x20000018

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a0:	f7ff fff0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	08007f28 	.word	0x08007f28

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e01d      	b.n	8004812 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fb9e 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fa2c 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b06      	cmp	r3, #6
 8004842:	d007      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d122      	bne.n	80048be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d11b      	bne.n	80048be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0202 	mvn.w	r2, #2
 800488e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f9bc 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 80048aa:	e005      	b.n	80048b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9ae 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9bf 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d122      	bne.n	8004912 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d11b      	bne.n	8004912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0204 	mvn.w	r2, #4
 80048e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f992 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 80048fe:	e005      	b.n	800490c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f984 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f995 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d122      	bne.n	8004966 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d11b      	bne.n	8004966 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0208 	mvn.w	r2, #8
 8004936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f968 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004952:	e005      	b.n	8004960 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f95a 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f96b 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d122      	bne.n	80049ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b10      	cmp	r3, #16
 8004980:	d11b      	bne.n	80049ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0210 	mvn.w	r2, #16
 800498a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2208      	movs	r2, #8
 8004990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f93e 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 80049a6:	e005      	b.n	80049b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f930 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f941 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10e      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f06f 0201 	mvn.w	r2, #1
 80049de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f90a 	bl	8004bfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d10e      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fae7 	bl	8004fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d10e      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d107      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f906 	bl	8004c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d10e      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0220 	mvn.w	r2, #32
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fab1 	bl	8004fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_ConfigClockSource+0x18>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0b3      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x180>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aa8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ab0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d03e      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0xd0>
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	f200 8087 	bhi.w	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	f000 8085 	beq.w	8004bde <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d87f      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004ada:	2b70      	cmp	r3, #112	; 0x70
 8004adc:	d01a      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0xa2>
 8004ade:	2b70      	cmp	r3, #112	; 0x70
 8004ae0:	d87b      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004ae2:	2b60      	cmp	r3, #96	; 0x60
 8004ae4:	d050      	beq.n	8004b88 <HAL_TIM_ConfigClockSource+0x116>
 8004ae6:	2b60      	cmp	r3, #96	; 0x60
 8004ae8:	d877      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004aea:	2b50      	cmp	r3, #80	; 0x50
 8004aec:	d03c      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0xf6>
 8004aee:	2b50      	cmp	r3, #80	; 0x50
 8004af0:	d873      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d058      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0x136>
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d86f      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004afa:	2b30      	cmp	r3, #48	; 0x30
 8004afc:	d064      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0x156>
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d86b      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d060      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0x156>
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d867      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d05c      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0x156>
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d05a      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b12:	e062      	b.n	8004bda <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6899      	ldr	r1, [r3, #8]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f000 f9b6 	bl	8004e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
      break;
 8004b40:	e04e      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6899      	ldr	r1, [r3, #8]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f000 f99f 	bl	8004e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b64:	609a      	str	r2, [r3, #8]
      break;
 8004b66:	e03b      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f000 f913 	bl	8004da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2150      	movs	r1, #80	; 0x50
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f96c 	bl	8004e5e <TIM_ITRx_SetConfig>
      break;
 8004b86:	e02b      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f000 f932 	bl	8004dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2160      	movs	r1, #96	; 0x60
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f95c 	bl	8004e5e <TIM_ITRx_SetConfig>
      break;
 8004ba6:	e01b      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f000 f8f3 	bl	8004da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2140      	movs	r1, #64	; 0x40
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f94c 	bl	8004e5e <TIM_ITRx_SetConfig>
      break;
 8004bc6:	e00b      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f000 f943 	bl	8004e5e <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e002      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f023 0201 	bic.w	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 030a 	bic.w	r3, r3, #10
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b087      	sub	sp, #28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0210 	bic.w	r2, r3, #16
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	031b      	lsls	r3, r3, #12
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f043 0307 	orr.w	r3, r3, #7
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	021a      	lsls	r2, r3, #8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e05a      	b.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d01d      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10c      	bne.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40001800 	.word	0x40001800

08004fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <__errno>:
 8004ff4:	4b01      	ldr	r3, [pc, #4]	; (8004ffc <__errno+0x8>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000024 	.word	0x20000024

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4d0d      	ldr	r5, [pc, #52]	; (8005038 <__libc_init_array+0x38>)
 8005004:	4c0d      	ldr	r4, [pc, #52]	; (800503c <__libc_init_array+0x3c>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	2600      	movs	r6, #0
 800500c:	42a6      	cmp	r6, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	4d0b      	ldr	r5, [pc, #44]	; (8005040 <__libc_init_array+0x40>)
 8005012:	4c0c      	ldr	r4, [pc, #48]	; (8005044 <__libc_init_array+0x44>)
 8005014:	f002 ff02 	bl	8007e1c <_init>
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	2600      	movs	r6, #0
 800501e:	42a6      	cmp	r6, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f855 3b04 	ldr.w	r3, [r5], #4
 8005028:	4798      	blx	r3
 800502a:	3601      	adds	r6, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005032:	4798      	blx	r3
 8005034:	3601      	adds	r6, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	08008314 	.word	0x08008314
 800503c:	08008314 	.word	0x08008314
 8005040:	08008314 	.word	0x08008314
 8005044:	08008318 	.word	0x08008318

08005048 <memcpy>:
 8005048:	440a      	add	r2, r1
 800504a:	4291      	cmp	r1, r2
 800504c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005050:	d100      	bne.n	8005054 <memcpy+0xc>
 8005052:	4770      	bx	lr
 8005054:	b510      	push	{r4, lr}
 8005056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505e:	4291      	cmp	r1, r2
 8005060:	d1f9      	bne.n	8005056 <memcpy+0xe>
 8005062:	bd10      	pop	{r4, pc}

08005064 <memset>:
 8005064:	4402      	add	r2, r0
 8005066:	4603      	mov	r3, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <__cvt>:
 8005074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	ec55 4b10 	vmov	r4, r5, d0
 800507c:	2d00      	cmp	r5, #0
 800507e:	460e      	mov	r6, r1
 8005080:	4619      	mov	r1, r3
 8005082:	462b      	mov	r3, r5
 8005084:	bfbb      	ittet	lt
 8005086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800508a:	461d      	movlt	r5, r3
 800508c:	2300      	movge	r3, #0
 800508e:	232d      	movlt	r3, #45	; 0x2d
 8005090:	700b      	strb	r3, [r1, #0]
 8005092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005094:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005098:	4691      	mov	r9, r2
 800509a:	f023 0820 	bic.w	r8, r3, #32
 800509e:	bfbc      	itt	lt
 80050a0:	4622      	movlt	r2, r4
 80050a2:	4614      	movlt	r4, r2
 80050a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050a8:	d005      	beq.n	80050b6 <__cvt+0x42>
 80050aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050ae:	d100      	bne.n	80050b2 <__cvt+0x3e>
 80050b0:	3601      	adds	r6, #1
 80050b2:	2102      	movs	r1, #2
 80050b4:	e000      	b.n	80050b8 <__cvt+0x44>
 80050b6:	2103      	movs	r1, #3
 80050b8:	ab03      	add	r3, sp, #12
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	ab02      	add	r3, sp, #8
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	ec45 4b10 	vmov	d0, r4, r5
 80050c4:	4653      	mov	r3, sl
 80050c6:	4632      	mov	r2, r6
 80050c8:	f000 fcea 	bl	8005aa0 <_dtoa_r>
 80050cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050d0:	4607      	mov	r7, r0
 80050d2:	d102      	bne.n	80050da <__cvt+0x66>
 80050d4:	f019 0f01 	tst.w	r9, #1
 80050d8:	d022      	beq.n	8005120 <__cvt+0xac>
 80050da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050de:	eb07 0906 	add.w	r9, r7, r6
 80050e2:	d110      	bne.n	8005106 <__cvt+0x92>
 80050e4:	783b      	ldrb	r3, [r7, #0]
 80050e6:	2b30      	cmp	r3, #48	; 0x30
 80050e8:	d10a      	bne.n	8005100 <__cvt+0x8c>
 80050ea:	2200      	movs	r2, #0
 80050ec:	2300      	movs	r3, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb fcf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80050f6:	b918      	cbnz	r0, 8005100 <__cvt+0x8c>
 80050f8:	f1c6 0601 	rsb	r6, r6, #1
 80050fc:	f8ca 6000 	str.w	r6, [sl]
 8005100:	f8da 3000 	ldr.w	r3, [sl]
 8005104:	4499      	add	r9, r3
 8005106:	2200      	movs	r2, #0
 8005108:	2300      	movs	r3, #0
 800510a:	4620      	mov	r0, r4
 800510c:	4629      	mov	r1, r5
 800510e:	f7fb fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005112:	b108      	cbz	r0, 8005118 <__cvt+0xa4>
 8005114:	f8cd 900c 	str.w	r9, [sp, #12]
 8005118:	2230      	movs	r2, #48	; 0x30
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	454b      	cmp	r3, r9
 800511e:	d307      	bcc.n	8005130 <__cvt+0xbc>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005124:	1bdb      	subs	r3, r3, r7
 8005126:	4638      	mov	r0, r7
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	b004      	add	sp, #16
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	9103      	str	r1, [sp, #12]
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e7f0      	b.n	800511a <__cvt+0xa6>

08005138 <__exponent>:
 8005138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513a:	4603      	mov	r3, r0
 800513c:	2900      	cmp	r1, #0
 800513e:	bfb8      	it	lt
 8005140:	4249      	neglt	r1, r1
 8005142:	f803 2b02 	strb.w	r2, [r3], #2
 8005146:	bfb4      	ite	lt
 8005148:	222d      	movlt	r2, #45	; 0x2d
 800514a:	222b      	movge	r2, #43	; 0x2b
 800514c:	2909      	cmp	r1, #9
 800514e:	7042      	strb	r2, [r0, #1]
 8005150:	dd2a      	ble.n	80051a8 <__exponent+0x70>
 8005152:	f10d 0407 	add.w	r4, sp, #7
 8005156:	46a4      	mov	ip, r4
 8005158:	270a      	movs	r7, #10
 800515a:	46a6      	mov	lr, r4
 800515c:	460a      	mov	r2, r1
 800515e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005162:	fb07 1516 	mls	r5, r7, r6, r1
 8005166:	3530      	adds	r5, #48	; 0x30
 8005168:	2a63      	cmp	r2, #99	; 0x63
 800516a:	f104 34ff 	add.w	r4, r4, #4294967295
 800516e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005172:	4631      	mov	r1, r6
 8005174:	dcf1      	bgt.n	800515a <__exponent+0x22>
 8005176:	3130      	adds	r1, #48	; 0x30
 8005178:	f1ae 0502 	sub.w	r5, lr, #2
 800517c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005180:	1c44      	adds	r4, r0, #1
 8005182:	4629      	mov	r1, r5
 8005184:	4561      	cmp	r1, ip
 8005186:	d30a      	bcc.n	800519e <__exponent+0x66>
 8005188:	f10d 0209 	add.w	r2, sp, #9
 800518c:	eba2 020e 	sub.w	r2, r2, lr
 8005190:	4565      	cmp	r5, ip
 8005192:	bf88      	it	hi
 8005194:	2200      	movhi	r2, #0
 8005196:	4413      	add	r3, r2
 8005198:	1a18      	subs	r0, r3, r0
 800519a:	b003      	add	sp, #12
 800519c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051a6:	e7ed      	b.n	8005184 <__exponent+0x4c>
 80051a8:	2330      	movs	r3, #48	; 0x30
 80051aa:	3130      	adds	r1, #48	; 0x30
 80051ac:	7083      	strb	r3, [r0, #2]
 80051ae:	70c1      	strb	r1, [r0, #3]
 80051b0:	1d03      	adds	r3, r0, #4
 80051b2:	e7f1      	b.n	8005198 <__exponent+0x60>

080051b4 <_printf_float>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	ed2d 8b02 	vpush	{d8}
 80051bc:	b08d      	sub	sp, #52	; 0x34
 80051be:	460c      	mov	r4, r1
 80051c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051c4:	4616      	mov	r6, r2
 80051c6:	461f      	mov	r7, r3
 80051c8:	4605      	mov	r5, r0
 80051ca:	f001 fa57 	bl	800667c <_localeconv_r>
 80051ce:	f8d0 a000 	ldr.w	sl, [r0]
 80051d2:	4650      	mov	r0, sl
 80051d4:	f7fb f80c 	bl	80001f0 <strlen>
 80051d8:	2300      	movs	r3, #0
 80051da:	930a      	str	r3, [sp, #40]	; 0x28
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	f8d8 3000 	ldr.w	r3, [r8]
 80051e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80051e8:	3307      	adds	r3, #7
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	f103 0208 	add.w	r2, r3, #8
 80051f2:	f8c8 2000 	str.w	r2, [r8]
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005206:	9307      	str	r3, [sp, #28]
 8005208:	f8cd 8018 	str.w	r8, [sp, #24]
 800520c:	ee08 0a10 	vmov	s16, r0
 8005210:	4b9f      	ldr	r3, [pc, #636]	; (8005490 <_printf_float+0x2dc>)
 8005212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	f7fb fc97 	bl	8000b4c <__aeabi_dcmpun>
 800521e:	bb88      	cbnz	r0, 8005284 <_printf_float+0xd0>
 8005220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005224:	4b9a      	ldr	r3, [pc, #616]	; (8005490 <_printf_float+0x2dc>)
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	f7fb fc71 	bl	8000b10 <__aeabi_dcmple>
 800522e:	bb48      	cbnz	r0, 8005284 <_printf_float+0xd0>
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb fc60 	bl	8000afc <__aeabi_dcmplt>
 800523c:	b110      	cbz	r0, 8005244 <_printf_float+0x90>
 800523e:	232d      	movs	r3, #45	; 0x2d
 8005240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005244:	4b93      	ldr	r3, [pc, #588]	; (8005494 <_printf_float+0x2e0>)
 8005246:	4894      	ldr	r0, [pc, #592]	; (8005498 <_printf_float+0x2e4>)
 8005248:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800524c:	bf94      	ite	ls
 800524e:	4698      	movls	r8, r3
 8005250:	4680      	movhi	r8, r0
 8005252:	2303      	movs	r3, #3
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	9b05      	ldr	r3, [sp, #20]
 8005258:	f023 0204 	bic.w	r2, r3, #4
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	f04f 0900 	mov.w	r9, #0
 8005262:	9700      	str	r7, [sp, #0]
 8005264:	4633      	mov	r3, r6
 8005266:	aa0b      	add	r2, sp, #44	; 0x2c
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f9d8 	bl	8005620 <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	f040 8090 	bne.w	8005396 <_printf_float+0x1e2>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	b00d      	add	sp, #52	; 0x34
 800527c:	ecbd 8b02 	vpop	{d8}
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	f7fb fc5e 	bl	8000b4c <__aeabi_dcmpun>
 8005290:	b140      	cbz	r0, 80052a4 <_printf_float+0xf0>
 8005292:	464b      	mov	r3, r9
 8005294:	2b00      	cmp	r3, #0
 8005296:	bfbc      	itt	lt
 8005298:	232d      	movlt	r3, #45	; 0x2d
 800529a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800529e:	487f      	ldr	r0, [pc, #508]	; (800549c <_printf_float+0x2e8>)
 80052a0:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <_printf_float+0x2ec>)
 80052a2:	e7d1      	b.n	8005248 <_printf_float+0x94>
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052aa:	9206      	str	r2, [sp, #24]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	d13f      	bne.n	8005330 <_printf_float+0x17c>
 80052b0:	2306      	movs	r3, #6
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	9b05      	ldr	r3, [sp, #20]
 80052b6:	6861      	ldr	r1, [r4, #4]
 80052b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052bc:	2300      	movs	r3, #0
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	ab0a      	add	r3, sp, #40	; 0x28
 80052c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052c6:	ab09      	add	r3, sp, #36	; 0x24
 80052c8:	ec49 8b10 	vmov	d0, r8, r9
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	6022      	str	r2, [r4, #0]
 80052d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052d4:	4628      	mov	r0, r5
 80052d6:	f7ff fecd 	bl	8005074 <__cvt>
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052de:	2b47      	cmp	r3, #71	; 0x47
 80052e0:	4680      	mov	r8, r0
 80052e2:	d108      	bne.n	80052f6 <_printf_float+0x142>
 80052e4:	1cc8      	adds	r0, r1, #3
 80052e6:	db02      	blt.n	80052ee <_printf_float+0x13a>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	4299      	cmp	r1, r3
 80052ec:	dd41      	ble.n	8005372 <_printf_float+0x1be>
 80052ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80052f2:	fa5f fb8b 	uxtb.w	fp, fp
 80052f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052fa:	d820      	bhi.n	800533e <_printf_float+0x18a>
 80052fc:	3901      	subs	r1, #1
 80052fe:	465a      	mov	r2, fp
 8005300:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005304:	9109      	str	r1, [sp, #36]	; 0x24
 8005306:	f7ff ff17 	bl	8005138 <__exponent>
 800530a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530c:	1813      	adds	r3, r2, r0
 800530e:	2a01      	cmp	r2, #1
 8005310:	4681      	mov	r9, r0
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	dc02      	bgt.n	800531c <_printf_float+0x168>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	07d2      	lsls	r2, r2, #31
 800531a:	d501      	bpl.n	8005320 <_printf_float+0x16c>
 800531c:	3301      	adds	r3, #1
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005324:	2b00      	cmp	r3, #0
 8005326:	d09c      	beq.n	8005262 <_printf_float+0xae>
 8005328:	232d      	movs	r3, #45	; 0x2d
 800532a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532e:	e798      	b.n	8005262 <_printf_float+0xae>
 8005330:	9a06      	ldr	r2, [sp, #24]
 8005332:	2a47      	cmp	r2, #71	; 0x47
 8005334:	d1be      	bne.n	80052b4 <_printf_float+0x100>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1bc      	bne.n	80052b4 <_printf_float+0x100>
 800533a:	2301      	movs	r3, #1
 800533c:	e7b9      	b.n	80052b2 <_printf_float+0xfe>
 800533e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005342:	d118      	bne.n	8005376 <_printf_float+0x1c2>
 8005344:	2900      	cmp	r1, #0
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	dd0b      	ble.n	8005362 <_printf_float+0x1ae>
 800534a:	6121      	str	r1, [r4, #16]
 800534c:	b913      	cbnz	r3, 8005354 <_printf_float+0x1a0>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	07d0      	lsls	r0, r2, #31
 8005352:	d502      	bpl.n	800535a <_printf_float+0x1a6>
 8005354:	3301      	adds	r3, #1
 8005356:	440b      	add	r3, r1
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	65a1      	str	r1, [r4, #88]	; 0x58
 800535c:	f04f 0900 	mov.w	r9, #0
 8005360:	e7de      	b.n	8005320 <_printf_float+0x16c>
 8005362:	b913      	cbnz	r3, 800536a <_printf_float+0x1b6>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	07d2      	lsls	r2, r2, #31
 8005368:	d501      	bpl.n	800536e <_printf_float+0x1ba>
 800536a:	3302      	adds	r3, #2
 800536c:	e7f4      	b.n	8005358 <_printf_float+0x1a4>
 800536e:	2301      	movs	r3, #1
 8005370:	e7f2      	b.n	8005358 <_printf_float+0x1a4>
 8005372:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005378:	4299      	cmp	r1, r3
 800537a:	db05      	blt.n	8005388 <_printf_float+0x1d4>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	6121      	str	r1, [r4, #16]
 8005380:	07d8      	lsls	r0, r3, #31
 8005382:	d5ea      	bpl.n	800535a <_printf_float+0x1a6>
 8005384:	1c4b      	adds	r3, r1, #1
 8005386:	e7e7      	b.n	8005358 <_printf_float+0x1a4>
 8005388:	2900      	cmp	r1, #0
 800538a:	bfd4      	ite	le
 800538c:	f1c1 0202 	rsble	r2, r1, #2
 8005390:	2201      	movgt	r2, #1
 8005392:	4413      	add	r3, r2
 8005394:	e7e0      	b.n	8005358 <_printf_float+0x1a4>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	055a      	lsls	r2, r3, #21
 800539a:	d407      	bmi.n	80053ac <_printf_float+0x1f8>
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	4642      	mov	r2, r8
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	d12c      	bne.n	8005404 <_printf_float+0x250>
 80053aa:	e764      	b.n	8005276 <_printf_float+0xc2>
 80053ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053b0:	f240 80e0 	bls.w	8005574 <_printf_float+0x3c0>
 80053b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b8:	2200      	movs	r2, #0
 80053ba:	2300      	movs	r3, #0
 80053bc:	f7fb fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d034      	beq.n	800542e <_printf_float+0x27a>
 80053c4:	4a37      	ldr	r2, [pc, #220]	; (80054a4 <_printf_float+0x2f0>)
 80053c6:	2301      	movs	r3, #1
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af51 	beq.w	8005276 <_printf_float+0xc2>
 80053d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d8:	429a      	cmp	r2, r3
 80053da:	db02      	blt.n	80053e2 <_printf_float+0x22e>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07d8      	lsls	r0, r3, #31
 80053e0:	d510      	bpl.n	8005404 <_printf_float+0x250>
 80053e2:	ee18 3a10 	vmov	r3, s16
 80053e6:	4652      	mov	r2, sl
 80053e8:	4631      	mov	r1, r6
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b8      	blx	r7
 80053ee:	3001      	adds	r0, #1
 80053f0:	f43f af41 	beq.w	8005276 <_printf_float+0xc2>
 80053f4:	f04f 0800 	mov.w	r8, #0
 80053f8:	f104 091a 	add.w	r9, r4, #26
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	4543      	cmp	r3, r8
 8005402:	dc09      	bgt.n	8005418 <_printf_float+0x264>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	079b      	lsls	r3, r3, #30
 8005408:	f100 8105 	bmi.w	8005616 <_printf_float+0x462>
 800540c:	68e0      	ldr	r0, [r4, #12]
 800540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005410:	4298      	cmp	r0, r3
 8005412:	bfb8      	it	lt
 8005414:	4618      	movlt	r0, r3
 8005416:	e730      	b.n	800527a <_printf_float+0xc6>
 8005418:	2301      	movs	r3, #1
 800541a:	464a      	mov	r2, r9
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	f43f af27 	beq.w	8005276 <_printf_float+0xc2>
 8005428:	f108 0801 	add.w	r8, r8, #1
 800542c:	e7e6      	b.n	80053fc <_printf_float+0x248>
 800542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	dc39      	bgt.n	80054a8 <_printf_float+0x2f4>
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <_printf_float+0x2f0>)
 8005436:	2301      	movs	r3, #1
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af19 	beq.w	8005276 <_printf_float+0xc2>
 8005444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005448:	4313      	orrs	r3, r2
 800544a:	d102      	bne.n	8005452 <_printf_float+0x29e>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	07d9      	lsls	r1, r3, #31
 8005450:	d5d8      	bpl.n	8005404 <_printf_float+0x250>
 8005452:	ee18 3a10 	vmov	r3, s16
 8005456:	4652      	mov	r2, sl
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af09 	beq.w	8005276 <_printf_float+0xc2>
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	f104 0a1a 	add.w	sl, r4, #26
 800546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546e:	425b      	negs	r3, r3
 8005470:	454b      	cmp	r3, r9
 8005472:	dc01      	bgt.n	8005478 <_printf_float+0x2c4>
 8005474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005476:	e792      	b.n	800539e <_printf_float+0x1ea>
 8005478:	2301      	movs	r3, #1
 800547a:	4652      	mov	r2, sl
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f aef7 	beq.w	8005276 <_printf_float+0xc2>
 8005488:	f109 0901 	add.w	r9, r9, #1
 800548c:	e7ee      	b.n	800546c <_printf_float+0x2b8>
 800548e:	bf00      	nop
 8005490:	7fefffff 	.word	0x7fefffff
 8005494:	08007f34 	.word	0x08007f34
 8005498:	08007f38 	.word	0x08007f38
 800549c:	08007f40 	.word	0x08007f40
 80054a0:	08007f3c 	.word	0x08007f3c
 80054a4:	08007f44 	.word	0x08007f44
 80054a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bfa8      	it	ge
 80054b0:	461a      	movge	r2, r3
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	4691      	mov	r9, r2
 80054b6:	dc37      	bgt.n	8005528 <_printf_float+0x374>
 80054b8:	f04f 0b00 	mov.w	fp, #0
 80054bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054c0:	f104 021a 	add.w	r2, r4, #26
 80054c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054c6:	9305      	str	r3, [sp, #20]
 80054c8:	eba3 0309 	sub.w	r3, r3, r9
 80054cc:	455b      	cmp	r3, fp
 80054ce:	dc33      	bgt.n	8005538 <_printf_float+0x384>
 80054d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d4:	429a      	cmp	r2, r3
 80054d6:	db3b      	blt.n	8005550 <_printf_float+0x39c>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d438      	bmi.n	8005550 <_printf_float+0x39c>
 80054de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e0:	9a05      	ldr	r2, [sp, #20]
 80054e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054e4:	1a9a      	subs	r2, r3, r2
 80054e6:	eba3 0901 	sub.w	r9, r3, r1
 80054ea:	4591      	cmp	r9, r2
 80054ec:	bfa8      	it	ge
 80054ee:	4691      	movge	r9, r2
 80054f0:	f1b9 0f00 	cmp.w	r9, #0
 80054f4:	dc35      	bgt.n	8005562 <_printf_float+0x3ae>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054fe:	f104 0a1a 	add.w	sl, r4, #26
 8005502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	eba3 0309 	sub.w	r3, r3, r9
 800550c:	4543      	cmp	r3, r8
 800550e:	f77f af79 	ble.w	8005404 <_printf_float+0x250>
 8005512:	2301      	movs	r3, #1
 8005514:	4652      	mov	r2, sl
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f aeaa 	beq.w	8005276 <_printf_float+0xc2>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	e7ec      	b.n	8005502 <_printf_float+0x34e>
 8005528:	4613      	mov	r3, r2
 800552a:	4631      	mov	r1, r6
 800552c:	4642      	mov	r2, r8
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	d1c0      	bne.n	80054b8 <_printf_float+0x304>
 8005536:	e69e      	b.n	8005276 <_printf_float+0xc2>
 8005538:	2301      	movs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	9205      	str	r2, [sp, #20]
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f ae97 	beq.w	8005276 <_printf_float+0xc2>
 8005548:	9a05      	ldr	r2, [sp, #20]
 800554a:	f10b 0b01 	add.w	fp, fp, #1
 800554e:	e7b9      	b.n	80054c4 <_printf_float+0x310>
 8005550:	ee18 3a10 	vmov	r3, s16
 8005554:	4652      	mov	r2, sl
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	d1be      	bne.n	80054de <_printf_float+0x32a>
 8005560:	e689      	b.n	8005276 <_printf_float+0xc2>
 8005562:	9a05      	ldr	r2, [sp, #20]
 8005564:	464b      	mov	r3, r9
 8005566:	4442      	add	r2, r8
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	d1c1      	bne.n	80054f6 <_printf_float+0x342>
 8005572:	e680      	b.n	8005276 <_printf_float+0xc2>
 8005574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005576:	2a01      	cmp	r2, #1
 8005578:	dc01      	bgt.n	800557e <_printf_float+0x3ca>
 800557a:	07db      	lsls	r3, r3, #31
 800557c:	d538      	bpl.n	80055f0 <_printf_float+0x43c>
 800557e:	2301      	movs	r3, #1
 8005580:	4642      	mov	r2, r8
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f ae74 	beq.w	8005276 <_printf_float+0xc2>
 800558e:	ee18 3a10 	vmov	r3, s16
 8005592:	4652      	mov	r2, sl
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f ae6b 	beq.w	8005276 <_printf_float+0xc2>
 80055a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	f7fb fa9e 	bl	8000ae8 <__aeabi_dcmpeq>
 80055ac:	b9d8      	cbnz	r0, 80055e6 <_printf_float+0x432>
 80055ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b0:	f108 0201 	add.w	r2, r8, #1
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	d10e      	bne.n	80055de <_printf_float+0x42a>
 80055c0:	e659      	b.n	8005276 <_printf_float+0xc2>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4652      	mov	r2, sl
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	f43f ae52 	beq.w	8005276 <_printf_float+0xc2>
 80055d2:	f108 0801 	add.w	r8, r8, #1
 80055d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d8:	3b01      	subs	r3, #1
 80055da:	4543      	cmp	r3, r8
 80055dc:	dcf1      	bgt.n	80055c2 <_printf_float+0x40e>
 80055de:	464b      	mov	r3, r9
 80055e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055e4:	e6dc      	b.n	80053a0 <_printf_float+0x1ec>
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	f104 0a1a 	add.w	sl, r4, #26
 80055ee:	e7f2      	b.n	80055d6 <_printf_float+0x422>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4642      	mov	r2, r8
 80055f4:	e7df      	b.n	80055b6 <_printf_float+0x402>
 80055f6:	2301      	movs	r3, #1
 80055f8:	464a      	mov	r2, r9
 80055fa:	4631      	mov	r1, r6
 80055fc:	4628      	mov	r0, r5
 80055fe:	47b8      	blx	r7
 8005600:	3001      	adds	r0, #1
 8005602:	f43f ae38 	beq.w	8005276 <_printf_float+0xc2>
 8005606:	f108 0801 	add.w	r8, r8, #1
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	4543      	cmp	r3, r8
 8005612:	dcf0      	bgt.n	80055f6 <_printf_float+0x442>
 8005614:	e6fa      	b.n	800540c <_printf_float+0x258>
 8005616:	f04f 0800 	mov.w	r8, #0
 800561a:	f104 0919 	add.w	r9, r4, #25
 800561e:	e7f4      	b.n	800560a <_printf_float+0x456>

08005620 <_printf_common>:
 8005620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	4616      	mov	r6, r2
 8005626:	4699      	mov	r9, r3
 8005628:	688a      	ldr	r2, [r1, #8]
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005630:	4293      	cmp	r3, r2
 8005632:	bfb8      	it	lt
 8005634:	4613      	movlt	r3, r2
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800563c:	4607      	mov	r7, r0
 800563e:	460c      	mov	r4, r1
 8005640:	b10a      	cbz	r2, 8005646 <_printf_common+0x26>
 8005642:	3301      	adds	r3, #1
 8005644:	6033      	str	r3, [r6, #0]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	0699      	lsls	r1, r3, #26
 800564a:	bf42      	ittt	mi
 800564c:	6833      	ldrmi	r3, [r6, #0]
 800564e:	3302      	addmi	r3, #2
 8005650:	6033      	strmi	r3, [r6, #0]
 8005652:	6825      	ldr	r5, [r4, #0]
 8005654:	f015 0506 	ands.w	r5, r5, #6
 8005658:	d106      	bne.n	8005668 <_printf_common+0x48>
 800565a:	f104 0a19 	add.w	sl, r4, #25
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	6832      	ldr	r2, [r6, #0]
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	42ab      	cmp	r3, r5
 8005666:	dc26      	bgt.n	80056b6 <_printf_common+0x96>
 8005668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800566c:	1e13      	subs	r3, r2, #0
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	2301      	movne	r3, #1
 8005674:	0692      	lsls	r2, r2, #26
 8005676:	d42b      	bmi.n	80056d0 <_printf_common+0xb0>
 8005678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567c:	4649      	mov	r1, r9
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d01e      	beq.n	80056c4 <_printf_common+0xa4>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	68e5      	ldr	r5, [r4, #12]
 800568a:	6832      	ldr	r2, [r6, #0]
 800568c:	f003 0306 	and.w	r3, r3, #6
 8005690:	2b04      	cmp	r3, #4
 8005692:	bf08      	it	eq
 8005694:	1aad      	subeq	r5, r5, r2
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	bf0c      	ite	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	2500      	movne	r5, #0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfc4      	itt	gt
 80056a6:	1a9b      	subgt	r3, r3, r2
 80056a8:	18ed      	addgt	r5, r5, r3
 80056aa:	2600      	movs	r6, #0
 80056ac:	341a      	adds	r4, #26
 80056ae:	42b5      	cmp	r5, r6
 80056b0:	d11a      	bne.n	80056e8 <_printf_common+0xc8>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e008      	b.n	80056c8 <_printf_common+0xa8>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4649      	mov	r1, r9
 80056bc:	4638      	mov	r0, r7
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d103      	bne.n	80056cc <_printf_common+0xac>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	3501      	adds	r5, #1
 80056ce:	e7c6      	b.n	800565e <_printf_common+0x3e>
 80056d0:	18e1      	adds	r1, r4, r3
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	2030      	movs	r0, #48	; 0x30
 80056d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056da:	4422      	add	r2, r4
 80056dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e4:	3302      	adds	r3, #2
 80056e6:	e7c7      	b.n	8005678 <_printf_common+0x58>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4622      	mov	r2, r4
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0e6      	beq.n	80056c4 <_printf_common+0xa4>
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7d9      	b.n	80056ae <_printf_common+0x8e>
	...

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4691      	mov	r9, r2
 8005708:	4680      	mov	r8, r0
 800570a:	460c      	mov	r4, r1
 800570c:	469a      	mov	sl, r3
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d8 	beq.w	80058ce <_printf_i+0x1d2>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80a3 	beq.w	800586a <_printf_i+0x16e>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058b5 	.word	0x080058b5
 800576c:	080057d9 	.word	0x080057d9
 8005770:	08005897 	.word	0x08005897
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058d7 	.word	0x080058d7
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	0800589f 	.word	0x0800589f
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a3      	b.n	80058f0 <_printf_i+0x1f4>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	0606      	lsls	r6, r0, #24
 80057ae:	f101 0304 	add.w	r3, r1, #4
 80057b2:	d50a      	bpl.n	80057ca <_printf_i+0xce>
 80057b4:	680e      	ldr	r6, [r1, #0]
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	da03      	bge.n	80057c4 <_printf_i+0xc8>
 80057bc:	232d      	movs	r3, #45	; 0x2d
 80057be:	4276      	negs	r6, r6
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	485e      	ldr	r0, [pc, #376]	; (8005940 <_printf_i+0x244>)
 80057c6:	230a      	movs	r3, #10
 80057c8:	e019      	b.n	80057fe <_printf_i+0x102>
 80057ca:	680e      	ldr	r6, [r1, #0]
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d2:	bf18      	it	ne
 80057d4:	b236      	sxthne	r6, r6
 80057d6:	e7ef      	b.n	80057b8 <_printf_i+0xbc>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	0601      	lsls	r1, r0, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0xec>
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0xf2>
 80057e8:	0646      	lsls	r6, r0, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0xe8>
 80057ec:	881e      	ldrh	r6, [r3, #0]
 80057ee:	4854      	ldr	r0, [pc, #336]	; (8005940 <_printf_i+0x244>)
 80057f0:	2f6f      	cmp	r7, #111	; 0x6f
 80057f2:	bf0c      	ite	eq
 80057f4:	2308      	moveq	r3, #8
 80057f6:	230a      	movne	r3, #10
 80057f8:	2100      	movs	r1, #0
 80057fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fe:	6865      	ldr	r5, [r4, #4]
 8005800:	60a5      	str	r5, [r4, #8]
 8005802:	2d00      	cmp	r5, #0
 8005804:	bfa2      	ittt	ge
 8005806:	6821      	ldrge	r1, [r4, #0]
 8005808:	f021 0104 	bicge.w	r1, r1, #4
 800580c:	6021      	strge	r1, [r4, #0]
 800580e:	b90e      	cbnz	r6, 8005814 <_printf_i+0x118>
 8005810:	2d00      	cmp	r5, #0
 8005812:	d04d      	beq.n	80058b0 <_printf_i+0x1b4>
 8005814:	4615      	mov	r5, r2
 8005816:	fbb6 f1f3 	udiv	r1, r6, r3
 800581a:	fb03 6711 	mls	r7, r3, r1, r6
 800581e:	5dc7      	ldrb	r7, [r0, r7]
 8005820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005824:	4637      	mov	r7, r6
 8005826:	42bb      	cmp	r3, r7
 8005828:	460e      	mov	r6, r1
 800582a:	d9f4      	bls.n	8005816 <_printf_i+0x11a>
 800582c:	2b08      	cmp	r3, #8
 800582e:	d10b      	bne.n	8005848 <_printf_i+0x14c>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07de      	lsls	r6, r3, #31
 8005834:	d508      	bpl.n	8005848 <_printf_i+0x14c>
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6861      	ldr	r1, [r4, #4]
 800583a:	4299      	cmp	r1, r3
 800583c:	bfde      	ittt	le
 800583e:	2330      	movle	r3, #48	; 0x30
 8005840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005848:	1b52      	subs	r2, r2, r5
 800584a:	6122      	str	r2, [r4, #16]
 800584c:	f8cd a000 	str.w	sl, [sp]
 8005850:	464b      	mov	r3, r9
 8005852:	aa03      	add	r2, sp, #12
 8005854:	4621      	mov	r1, r4
 8005856:	4640      	mov	r0, r8
 8005858:	f7ff fee2 	bl	8005620 <_printf_common>
 800585c:	3001      	adds	r0, #1
 800585e:	d14c      	bne.n	80058fa <_printf_i+0x1fe>
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	b004      	add	sp, #16
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	4835      	ldr	r0, [pc, #212]	; (8005940 <_printf_i+0x244>)
 800586c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f851 6b04 	ldr.w	r6, [r1], #4
 8005878:	6029      	str	r1, [r5, #0]
 800587a:	061d      	lsls	r5, r3, #24
 800587c:	d514      	bpl.n	80058a8 <_printf_i+0x1ac>
 800587e:	07df      	lsls	r7, r3, #31
 8005880:	bf44      	itt	mi
 8005882:	f043 0320 	orrmi.w	r3, r3, #32
 8005886:	6023      	strmi	r3, [r4, #0]
 8005888:	b91e      	cbnz	r6, 8005892 <_printf_i+0x196>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f023 0320 	bic.w	r3, r3, #32
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	2310      	movs	r3, #16
 8005894:	e7b0      	b.n	80057f8 <_printf_i+0xfc>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	f043 0320 	orr.w	r3, r3, #32
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	2378      	movs	r3, #120	; 0x78
 80058a0:	4828      	ldr	r0, [pc, #160]	; (8005944 <_printf_i+0x248>)
 80058a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a6:	e7e3      	b.n	8005870 <_printf_i+0x174>
 80058a8:	0659      	lsls	r1, r3, #25
 80058aa:	bf48      	it	mi
 80058ac:	b2b6      	uxthmi	r6, r6
 80058ae:	e7e6      	b.n	800587e <_printf_i+0x182>
 80058b0:	4615      	mov	r5, r2
 80058b2:	e7bb      	b.n	800582c <_printf_i+0x130>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	6826      	ldr	r6, [r4, #0]
 80058b8:	6961      	ldr	r1, [r4, #20]
 80058ba:	1d18      	adds	r0, r3, #4
 80058bc:	6028      	str	r0, [r5, #0]
 80058be:	0635      	lsls	r5, r6, #24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	d501      	bpl.n	80058c8 <_printf_i+0x1cc>
 80058c4:	6019      	str	r1, [r3, #0]
 80058c6:	e002      	b.n	80058ce <_printf_i+0x1d2>
 80058c8:	0670      	lsls	r0, r6, #25
 80058ca:	d5fb      	bpl.n	80058c4 <_printf_i+0x1c8>
 80058cc:	8019      	strh	r1, [r3, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	4615      	mov	r5, r2
 80058d4:	e7ba      	b.n	800584c <_printf_i+0x150>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	602a      	str	r2, [r5, #0]
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	2100      	movs	r1, #0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7fa fc8c 	bl	8000200 <memchr>
 80058e8:	b108      	cbz	r0, 80058ee <_printf_i+0x1f2>
 80058ea:	1b40      	subs	r0, r0, r5
 80058ec:	6060      	str	r0, [r4, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	2300      	movs	r3, #0
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	e7a8      	b.n	800584c <_printf_i+0x150>
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	462a      	mov	r2, r5
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	47d0      	blx	sl
 8005904:	3001      	adds	r0, #1
 8005906:	d0ab      	beq.n	8005860 <_printf_i+0x164>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	079b      	lsls	r3, r3, #30
 800590c:	d413      	bmi.n	8005936 <_printf_i+0x23a>
 800590e:	68e0      	ldr	r0, [r4, #12]
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	4298      	cmp	r0, r3
 8005914:	bfb8      	it	lt
 8005916:	4618      	movlt	r0, r3
 8005918:	e7a4      	b.n	8005864 <_printf_i+0x168>
 800591a:	2301      	movs	r3, #1
 800591c:	4632      	mov	r2, r6
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	47d0      	blx	sl
 8005924:	3001      	adds	r0, #1
 8005926:	d09b      	beq.n	8005860 <_printf_i+0x164>
 8005928:	3501      	adds	r5, #1
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	9903      	ldr	r1, [sp, #12]
 800592e:	1a5b      	subs	r3, r3, r1
 8005930:	42ab      	cmp	r3, r5
 8005932:	dcf2      	bgt.n	800591a <_printf_i+0x21e>
 8005934:	e7eb      	b.n	800590e <_printf_i+0x212>
 8005936:	2500      	movs	r5, #0
 8005938:	f104 0619 	add.w	r6, r4, #25
 800593c:	e7f5      	b.n	800592a <_printf_i+0x22e>
 800593e:	bf00      	nop
 8005940:	08007f46 	.word	0x08007f46
 8005944:	08007f57 	.word	0x08007f57

08005948 <siprintf>:
 8005948:	b40e      	push	{r1, r2, r3}
 800594a:	b500      	push	{lr}
 800594c:	b09c      	sub	sp, #112	; 0x70
 800594e:	ab1d      	add	r3, sp, #116	; 0x74
 8005950:	9002      	str	r0, [sp, #8]
 8005952:	9006      	str	r0, [sp, #24]
 8005954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005958:	4809      	ldr	r0, [pc, #36]	; (8005980 <siprintf+0x38>)
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	9104      	str	r1, [sp, #16]
 800595e:	4909      	ldr	r1, [pc, #36]	; (8005984 <siprintf+0x3c>)
 8005960:	f853 2b04 	ldr.w	r2, [r3], #4
 8005964:	9105      	str	r1, [sp, #20]
 8005966:	6800      	ldr	r0, [r0, #0]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	a902      	add	r1, sp, #8
 800596c:	f001 fb68 	bl	8007040 <_svfiprintf_r>
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	b01c      	add	sp, #112	; 0x70
 8005978:	f85d eb04 	ldr.w	lr, [sp], #4
 800597c:	b003      	add	sp, #12
 800597e:	4770      	bx	lr
 8005980:	20000024 	.word	0x20000024
 8005984:	ffff0208 	.word	0xffff0208

08005988 <quorem>:
 8005988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	6903      	ldr	r3, [r0, #16]
 800598e:	690c      	ldr	r4, [r1, #16]
 8005990:	42a3      	cmp	r3, r4
 8005992:	4607      	mov	r7, r0
 8005994:	f2c0 8081 	blt.w	8005a9a <quorem+0x112>
 8005998:	3c01      	subs	r4, #1
 800599a:	f101 0814 	add.w	r8, r1, #20
 800599e:	f100 0514 	add.w	r5, r0, #20
 80059a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b0:	3301      	adds	r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80059c0:	d331      	bcc.n	8005a26 <quorem+0x9e>
 80059c2:	f04f 0e00 	mov.w	lr, #0
 80059c6:	4640      	mov	r0, r8
 80059c8:	46ac      	mov	ip, r5
 80059ca:	46f2      	mov	sl, lr
 80059cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d0:	b293      	uxth	r3, r2
 80059d2:	fb06 e303 	mla	r3, r6, r3, lr
 80059d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ebaa 0303 	sub.w	r3, sl, r3
 80059e0:	f8dc a000 	ldr.w	sl, [ip]
 80059e4:	0c12      	lsrs	r2, r2, #16
 80059e6:	fa13 f38a 	uxtah	r3, r3, sl
 80059ea:	fb06 e202 	mla	r2, r6, r2, lr
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	9b00      	ldr	r3, [sp, #0]
 80059f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f6:	b292      	uxth	r2, r2
 80059f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a00:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a04:	4581      	cmp	r9, r0
 8005a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a0a:	f84c 3b04 	str.w	r3, [ip], #4
 8005a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a12:	d2db      	bcs.n	80059cc <quorem+0x44>
 8005a14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a18:	b92b      	cbnz	r3, 8005a26 <quorem+0x9e>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	d32e      	bcc.n	8005a82 <quorem+0xfa>
 8005a24:	613c      	str	r4, [r7, #16]
 8005a26:	4638      	mov	r0, r7
 8005a28:	f001 f8b6 	bl	8006b98 <__mcmp>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	db24      	blt.n	8005a7a <quorem+0xf2>
 8005a30:	3601      	adds	r6, #1
 8005a32:	4628      	mov	r0, r5
 8005a34:	f04f 0c00 	mov.w	ip, #0
 8005a38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a3c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a40:	b293      	uxth	r3, r2
 8005a42:	ebac 0303 	sub.w	r3, ip, r3
 8005a46:	0c12      	lsrs	r2, r2, #16
 8005a48:	fa13 f38e 	uxtah	r3, r3, lr
 8005a4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a5a:	45c1      	cmp	r9, r8
 8005a5c:	f840 3b04 	str.w	r3, [r0], #4
 8005a60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a64:	d2e8      	bcs.n	8005a38 <quorem+0xb0>
 8005a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a6e:	b922      	cbnz	r2, 8005a7a <quorem+0xf2>
 8005a70:	3b04      	subs	r3, #4
 8005a72:	429d      	cmp	r5, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	d30a      	bcc.n	8005a8e <quorem+0x106>
 8005a78:	613c      	str	r4, [r7, #16]
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	3b04      	subs	r3, #4
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d1cc      	bne.n	8005a24 <quorem+0x9c>
 8005a8a:	3c01      	subs	r4, #1
 8005a8c:	e7c7      	b.n	8005a1e <quorem+0x96>
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d1f0      	bne.n	8005a78 <quorem+0xf0>
 8005a96:	3c01      	subs	r4, #1
 8005a98:	e7eb      	b.n	8005a72 <quorem+0xea>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7ee      	b.n	8005a7c <quorem+0xf4>
	...

08005aa0 <_dtoa_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b04 	vpush	{d8-d9}
 8005aa8:	ec57 6b10 	vmov	r6, r7, d0
 8005aac:	b093      	sub	sp, #76	; 0x4c
 8005aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ab4:	9106      	str	r1, [sp, #24]
 8005ab6:	ee10 aa10 	vmov	sl, s0
 8005aba:	4604      	mov	r4, r0
 8005abc:	9209      	str	r2, [sp, #36]	; 0x24
 8005abe:	930c      	str	r3, [sp, #48]	; 0x30
 8005ac0:	46bb      	mov	fp, r7
 8005ac2:	b975      	cbnz	r5, 8005ae2 <_dtoa_r+0x42>
 8005ac4:	2010      	movs	r0, #16
 8005ac6:	f000 fddd 	bl	8006684 <malloc>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6260      	str	r0, [r4, #36]	; 0x24
 8005ace:	b920      	cbnz	r0, 8005ada <_dtoa_r+0x3a>
 8005ad0:	4ba7      	ldr	r3, [pc, #668]	; (8005d70 <_dtoa_r+0x2d0>)
 8005ad2:	21ea      	movs	r1, #234	; 0xea
 8005ad4:	48a7      	ldr	r0, [pc, #668]	; (8005d74 <_dtoa_r+0x2d4>)
 8005ad6:	f001 fbc3 	bl	8007260 <__assert_func>
 8005ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ade:	6005      	str	r5, [r0, #0]
 8005ae0:	60c5      	str	r5, [r0, #12]
 8005ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae4:	6819      	ldr	r1, [r3, #0]
 8005ae6:	b151      	cbz	r1, 8005afe <_dtoa_r+0x5e>
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	604a      	str	r2, [r1, #4]
 8005aec:	2301      	movs	r3, #1
 8005aee:	4093      	lsls	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fe0e 	bl	8006714 <_Bfree>
 8005af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	1e3b      	subs	r3, r7, #0
 8005b00:	bfaa      	itet	ge
 8005b02:	2300      	movge	r3, #0
 8005b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b08:	f8c8 3000 	strge.w	r3, [r8]
 8005b0c:	4b9a      	ldr	r3, [pc, #616]	; (8005d78 <_dtoa_r+0x2d8>)
 8005b0e:	bfbc      	itt	lt
 8005b10:	2201      	movlt	r2, #1
 8005b12:	f8c8 2000 	strlt.w	r2, [r8]
 8005b16:	ea33 030b 	bics.w	r3, r3, fp
 8005b1a:	d11b      	bne.n	8005b54 <_dtoa_r+0xb4>
 8005b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b28:	4333      	orrs	r3, r6
 8005b2a:	f000 8592 	beq.w	8006652 <_dtoa_r+0xbb2>
 8005b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b30:	b963      	cbnz	r3, 8005b4c <_dtoa_r+0xac>
 8005b32:	4b92      	ldr	r3, [pc, #584]	; (8005d7c <_dtoa_r+0x2dc>)
 8005b34:	e022      	b.n	8005b7c <_dtoa_r+0xdc>
 8005b36:	4b92      	ldr	r3, [pc, #584]	; (8005d80 <_dtoa_r+0x2e0>)
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	9801      	ldr	r0, [sp, #4]
 8005b42:	b013      	add	sp, #76	; 0x4c
 8005b44:	ecbd 8b04 	vpop	{d8-d9}
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	4b8b      	ldr	r3, [pc, #556]	; (8005d7c <_dtoa_r+0x2dc>)
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	3303      	adds	r3, #3
 8005b52:	e7f3      	b.n	8005b3c <_dtoa_r+0x9c>
 8005b54:	2200      	movs	r2, #0
 8005b56:	2300      	movs	r3, #0
 8005b58:	4650      	mov	r0, sl
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	f7fa ffc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b60:	ec4b ab19 	vmov	d9, sl, fp
 8005b64:	4680      	mov	r8, r0
 8005b66:	b158      	cbz	r0, 8005b80 <_dtoa_r+0xe0>
 8005b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 856b 	beq.w	800664c <_dtoa_r+0xbac>
 8005b76:	4883      	ldr	r0, [pc, #524]	; (8005d84 <_dtoa_r+0x2e4>)
 8005b78:	6018      	str	r0, [r3, #0]
 8005b7a:	1e43      	subs	r3, r0, #1
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	e7df      	b.n	8005b40 <_dtoa_r+0xa0>
 8005b80:	ec4b ab10 	vmov	d0, sl, fp
 8005b84:	aa10      	add	r2, sp, #64	; 0x40
 8005b86:	a911      	add	r1, sp, #68	; 0x44
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f001 f8ab 	bl	8006ce4 <__d2b>
 8005b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b92:	ee08 0a10 	vmov	s16, r0
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	f000 8084 	beq.w	8005ca4 <_dtoa_r+0x204>
 8005b9c:	ee19 3a90 	vmov	r3, s19
 8005ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ba8:	4656      	mov	r6, sl
 8005baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bb6:	4b74      	ldr	r3, [pc, #464]	; (8005d88 <_dtoa_r+0x2e8>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	f7fa fb73 	bl	80002a8 <__aeabi_dsub>
 8005bc2:	a365      	add	r3, pc, #404	; (adr r3, 8005d58 <_dtoa_r+0x2b8>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd26 	bl	8000618 <__aeabi_dmul>
 8005bcc:	a364      	add	r3, pc, #400	; (adr r3, 8005d60 <_dtoa_r+0x2c0>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa fb6b 	bl	80002ac <__adddf3>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	460f      	mov	r7, r1
 8005bdc:	f7fa fcb2 	bl	8000544 <__aeabi_i2d>
 8005be0:	a361      	add	r3, pc, #388	; (adr r3, 8005d68 <_dtoa_r+0x2c8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fd17 	bl	8000618 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa fb5b 	bl	80002ac <__adddf3>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	f7fa ffbd 	bl	8000b78 <__aeabi_d2iz>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	9000      	str	r0, [sp, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa ff78 	bl	8000afc <__aeabi_dcmplt>
 8005c0c:	b150      	cbz	r0, 8005c24 <_dtoa_r+0x184>
 8005c0e:	9800      	ldr	r0, [sp, #0]
 8005c10:	f7fa fc98 	bl	8000544 <__aeabi_i2d>
 8005c14:	4632      	mov	r2, r6
 8005c16:	463b      	mov	r3, r7
 8005c18:	f7fa ff66 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c1c:	b910      	cbnz	r0, 8005c24 <_dtoa_r+0x184>
 8005c1e:	9b00      	ldr	r3, [sp, #0]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	2b16      	cmp	r3, #22
 8005c28:	d85a      	bhi.n	8005ce0 <_dtoa_r+0x240>
 8005c2a:	9a00      	ldr	r2, [sp, #0]
 8005c2c:	4b57      	ldr	r3, [pc, #348]	; (8005d8c <_dtoa_r+0x2ec>)
 8005c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	ec51 0b19 	vmov	r0, r1, d9
 8005c3a:	f7fa ff5f 	bl	8000afc <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d050      	beq.n	8005ce4 <_dtoa_r+0x244>
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c4e:	1b5d      	subs	r5, r3, r5
 8005c50:	1e6b      	subs	r3, r5, #1
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	bf45      	ittet	mi
 8005c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c5a:	9304      	strmi	r3, [sp, #16]
 8005c5c:	2300      	movpl	r3, #0
 8005c5e:	2300      	movmi	r3, #0
 8005c60:	bf4c      	ite	mi
 8005c62:	9305      	strmi	r3, [sp, #20]
 8005c64:	9304      	strpl	r3, [sp, #16]
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	db3d      	blt.n	8005ce8 <_dtoa_r+0x248>
 8005c6c:	9b05      	ldr	r3, [sp, #20]
 8005c6e:	9a00      	ldr	r2, [sp, #0]
 8005c70:	920a      	str	r2, [sp, #40]	; 0x28
 8005c72:	4413      	add	r3, r2
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9307      	str	r3, [sp, #28]
 8005c7a:	9b06      	ldr	r3, [sp, #24]
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	f200 8089 	bhi.w	8005d94 <_dtoa_r+0x2f4>
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	bfc4      	itt	gt
 8005c86:	3b04      	subgt	r3, #4
 8005c88:	9306      	strgt	r3, [sp, #24]
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c90:	bfcc      	ite	gt
 8005c92:	2500      	movgt	r5, #0
 8005c94:	2501      	movle	r5, #1
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	f200 8087 	bhi.w	8005daa <_dtoa_r+0x30a>
 8005c9c:	e8df f003 	tbb	[pc, r3]
 8005ca0:	59383a2d 	.word	0x59383a2d
 8005ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ca8:	441d      	add	r5, r3
 8005caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	bfc1      	itttt	gt
 8005cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8005cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cc2:	bfda      	itte	le
 8005cc4:	f1c3 0320 	rsble	r3, r3, #32
 8005cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8005ccc:	4318      	orrgt	r0, r3
 8005cce:	f7fa fc29 	bl	8000524 <__aeabi_ui2d>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cda:	3d01      	subs	r5, #1
 8005cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8005cde:	e76a      	b.n	8005bb6 <_dtoa_r+0x116>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7b2      	b.n	8005c4a <_dtoa_r+0x1aa>
 8005ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ce6:	e7b1      	b.n	8005c4c <_dtoa_r+0x1ac>
 8005ce8:	9b04      	ldr	r3, [sp, #16]
 8005cea:	9a00      	ldr	r2, [sp, #0]
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	4253      	negs	r3, r2
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf8:	e7bf      	b.n	8005c7a <_dtoa_r+0x1da>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9308      	str	r3, [sp, #32]
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dc55      	bgt.n	8005db0 <_dtoa_r+0x310>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d0e:	e00c      	b.n	8005d2a <_dtoa_r+0x28a>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e7f3      	b.n	8005cfc <_dtoa_r+0x25c>
 8005d14:	2300      	movs	r3, #0
 8005d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	3301      	adds	r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	9303      	str	r3, [sp, #12]
 8005d26:	bfb8      	it	lt
 8005d28:	2301      	movlt	r3, #1
 8005d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	6042      	str	r2, [r0, #4]
 8005d30:	2204      	movs	r2, #4
 8005d32:	f102 0614 	add.w	r6, r2, #20
 8005d36:	429e      	cmp	r6, r3
 8005d38:	6841      	ldr	r1, [r0, #4]
 8005d3a:	d93d      	bls.n	8005db8 <_dtoa_r+0x318>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fca9 	bl	8006694 <_Balloc>
 8005d42:	9001      	str	r0, [sp, #4]
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d13b      	bne.n	8005dc0 <_dtoa_r+0x320>
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <_dtoa_r+0x2f0>)
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d50:	e6c0      	b.n	8005ad4 <_dtoa_r+0x34>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7df      	b.n	8005d16 <_dtoa_r+0x276>
 8005d56:	bf00      	nop
 8005d58:	636f4361 	.word	0x636f4361
 8005d5c:	3fd287a7 	.word	0x3fd287a7
 8005d60:	8b60c8b3 	.word	0x8b60c8b3
 8005d64:	3fc68a28 	.word	0x3fc68a28
 8005d68:	509f79fb 	.word	0x509f79fb
 8005d6c:	3fd34413 	.word	0x3fd34413
 8005d70:	08007f75 	.word	0x08007f75
 8005d74:	08007f8c 	.word	0x08007f8c
 8005d78:	7ff00000 	.word	0x7ff00000
 8005d7c:	08007f71 	.word	0x08007f71
 8005d80:	08007f68 	.word	0x08007f68
 8005d84:	08007f45 	.word	0x08007f45
 8005d88:	3ff80000 	.word	0x3ff80000
 8005d8c:	08008080 	.word	0x08008080
 8005d90:	08007fe7 	.word	0x08007fe7
 8005d94:	2501      	movs	r5, #1
 8005d96:	2300      	movs	r3, #0
 8005d98:	9306      	str	r3, [sp, #24]
 8005d9a:	9508      	str	r5, [sp, #32]
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2312      	movs	r3, #18
 8005da8:	e7b0      	b.n	8005d0c <_dtoa_r+0x26c>
 8005daa:	2301      	movs	r3, #1
 8005dac:	9308      	str	r3, [sp, #32]
 8005dae:	e7f5      	b.n	8005d9c <_dtoa_r+0x2fc>
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005db6:	e7b8      	b.n	8005d2a <_dtoa_r+0x28a>
 8005db8:	3101      	adds	r1, #1
 8005dba:	6041      	str	r1, [r0, #4]
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	e7b8      	b.n	8005d32 <_dtoa_r+0x292>
 8005dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc2:	9a01      	ldr	r2, [sp, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	2b0e      	cmp	r3, #14
 8005dca:	f200 809d 	bhi.w	8005f08 <_dtoa_r+0x468>
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	f000 809a 	beq.w	8005f08 <_dtoa_r+0x468>
 8005dd4:	9b00      	ldr	r3, [sp, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dd32      	ble.n	8005e40 <_dtoa_r+0x3a0>
 8005dda:	4ab7      	ldr	r2, [pc, #732]	; (80060b8 <_dtoa_r+0x618>)
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	05d8      	lsls	r0, r3, #23
 8005dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005df0:	d516      	bpl.n	8005e20 <_dtoa_r+0x380>
 8005df2:	4bb2      	ldr	r3, [pc, #712]	; (80060bc <_dtoa_r+0x61c>)
 8005df4:	ec51 0b19 	vmov	r0, r1, d9
 8005df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dfc:	f7fa fd36 	bl	800086c <__aeabi_ddiv>
 8005e00:	f007 070f 	and.w	r7, r7, #15
 8005e04:	4682      	mov	sl, r0
 8005e06:	468b      	mov	fp, r1
 8005e08:	2503      	movs	r5, #3
 8005e0a:	4eac      	ldr	r6, [pc, #688]	; (80060bc <_dtoa_r+0x61c>)
 8005e0c:	b957      	cbnz	r7, 8005e24 <_dtoa_r+0x384>
 8005e0e:	4642      	mov	r2, r8
 8005e10:	464b      	mov	r3, r9
 8005e12:	4650      	mov	r0, sl
 8005e14:	4659      	mov	r1, fp
 8005e16:	f7fa fd29 	bl	800086c <__aeabi_ddiv>
 8005e1a:	4682      	mov	sl, r0
 8005e1c:	468b      	mov	fp, r1
 8005e1e:	e028      	b.n	8005e72 <_dtoa_r+0x3d2>
 8005e20:	2502      	movs	r5, #2
 8005e22:	e7f2      	b.n	8005e0a <_dtoa_r+0x36a>
 8005e24:	07f9      	lsls	r1, r7, #31
 8005e26:	d508      	bpl.n	8005e3a <_dtoa_r+0x39a>
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e30:	f7fa fbf2 	bl	8000618 <__aeabi_dmul>
 8005e34:	3501      	adds	r5, #1
 8005e36:	4680      	mov	r8, r0
 8005e38:	4689      	mov	r9, r1
 8005e3a:	107f      	asrs	r7, r7, #1
 8005e3c:	3608      	adds	r6, #8
 8005e3e:	e7e5      	b.n	8005e0c <_dtoa_r+0x36c>
 8005e40:	f000 809b 	beq.w	8005f7a <_dtoa_r+0x4da>
 8005e44:	9b00      	ldr	r3, [sp, #0]
 8005e46:	4f9d      	ldr	r7, [pc, #628]	; (80060bc <_dtoa_r+0x61c>)
 8005e48:	425e      	negs	r6, r3
 8005e4a:	4b9b      	ldr	r3, [pc, #620]	; (80060b8 <_dtoa_r+0x618>)
 8005e4c:	f006 020f 	and.w	r2, r6, #15
 8005e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	ec51 0b19 	vmov	r0, r1, d9
 8005e5c:	f7fa fbdc 	bl	8000618 <__aeabi_dmul>
 8005e60:	1136      	asrs	r6, r6, #4
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	2300      	movs	r3, #0
 8005e68:	2502      	movs	r5, #2
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d17a      	bne.n	8005f64 <_dtoa_r+0x4c4>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1d3      	bne.n	8005e1a <_dtoa_r+0x37a>
 8005e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8082 	beq.w	8005f7e <_dtoa_r+0x4de>
 8005e7a:	4b91      	ldr	r3, [pc, #580]	; (80060c0 <_dtoa_r+0x620>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4650      	mov	r0, sl
 8005e80:	4659      	mov	r1, fp
 8005e82:	f7fa fe3b 	bl	8000afc <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d079      	beq.n	8005f7e <_dtoa_r+0x4de>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d076      	beq.n	8005f7e <_dtoa_r+0x4de>
 8005e90:	9b02      	ldr	r3, [sp, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dd36      	ble.n	8005f04 <_dtoa_r+0x464>
 8005e96:	9b00      	ldr	r3, [sp, #0]
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	1e5f      	subs	r7, r3, #1
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <_dtoa_r+0x624>)
 8005ea2:	f7fa fbb9 	bl	8000618 <__aeabi_dmul>
 8005ea6:	9e02      	ldr	r6, [sp, #8]
 8005ea8:	4682      	mov	sl, r0
 8005eaa:	468b      	mov	fp, r1
 8005eac:	3501      	adds	r5, #1
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f7fa fb48 	bl	8000544 <__aeabi_i2d>
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	465b      	mov	r3, fp
 8005eb8:	f7fa fbae 	bl	8000618 <__aeabi_dmul>
 8005ebc:	4b82      	ldr	r3, [pc, #520]	; (80060c8 <_dtoa_r+0x628>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f7fa f9f4 	bl	80002ac <__adddf3>
 8005ec4:	46d0      	mov	r8, sl
 8005ec6:	46d9      	mov	r9, fp
 8005ec8:	4682      	mov	sl, r0
 8005eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d158      	bne.n	8005f84 <_dtoa_r+0x4e4>
 8005ed2:	4b7e      	ldr	r3, [pc, #504]	; (80060cc <_dtoa_r+0x62c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4649      	mov	r1, r9
 8005eda:	f7fa f9e5 	bl	80002a8 <__aeabi_dsub>
 8005ede:	4652      	mov	r2, sl
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	f7fa fe27 	bl	8000b38 <__aeabi_dcmpgt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	f040 8295 	bne.w	800641a <_dtoa_r+0x97a>
 8005ef0:	4652      	mov	r2, sl
 8005ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa fdff 	bl	8000afc <__aeabi_dcmplt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 8289 	bne.w	8006416 <_dtoa_r+0x976>
 8005f04:	ec5b ab19 	vmov	sl, fp, d9
 8005f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f2c0 8148 	blt.w	80061a0 <_dtoa_r+0x700>
 8005f10:	9a00      	ldr	r2, [sp, #0]
 8005f12:	2a0e      	cmp	r2, #14
 8005f14:	f300 8144 	bgt.w	80061a0 <_dtoa_r+0x700>
 8005f18:	4b67      	ldr	r3, [pc, #412]	; (80060b8 <_dtoa_r+0x618>)
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f280 80d5 	bge.w	80060d4 <_dtoa_r+0x634>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f300 80d1 	bgt.w	80060d4 <_dtoa_r+0x634>
 8005f32:	f040 826f 	bne.w	8006414 <_dtoa_r+0x974>
 8005f36:	4b65      	ldr	r3, [pc, #404]	; (80060cc <_dtoa_r+0x62c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	f7fa fb6b 	bl	8000618 <__aeabi_dmul>
 8005f42:	4652      	mov	r2, sl
 8005f44:	465b      	mov	r3, fp
 8005f46:	f7fa fded 	bl	8000b24 <__aeabi_dcmpge>
 8005f4a:	9e03      	ldr	r6, [sp, #12]
 8005f4c:	4637      	mov	r7, r6
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f040 8245 	bne.w	80063de <_dtoa_r+0x93e>
 8005f54:	9d01      	ldr	r5, [sp, #4]
 8005f56:	2331      	movs	r3, #49	; 0x31
 8005f58:	f805 3b01 	strb.w	r3, [r5], #1
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	e240      	b.n	80063e6 <_dtoa_r+0x946>
 8005f64:	07f2      	lsls	r2, r6, #31
 8005f66:	d505      	bpl.n	8005f74 <_dtoa_r+0x4d4>
 8005f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6c:	f7fa fb54 	bl	8000618 <__aeabi_dmul>
 8005f70:	3501      	adds	r5, #1
 8005f72:	2301      	movs	r3, #1
 8005f74:	1076      	asrs	r6, r6, #1
 8005f76:	3708      	adds	r7, #8
 8005f78:	e777      	b.n	8005e6a <_dtoa_r+0x3ca>
 8005f7a:	2502      	movs	r5, #2
 8005f7c:	e779      	b.n	8005e72 <_dtoa_r+0x3d2>
 8005f7e:	9f00      	ldr	r7, [sp, #0]
 8005f80:	9e03      	ldr	r6, [sp, #12]
 8005f82:	e794      	b.n	8005eae <_dtoa_r+0x40e>
 8005f84:	9901      	ldr	r1, [sp, #4]
 8005f86:	4b4c      	ldr	r3, [pc, #304]	; (80060b8 <_dtoa_r+0x618>)
 8005f88:	4431      	add	r1, r6
 8005f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f8c:	9908      	ldr	r1, [sp, #32]
 8005f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f96:	2900      	cmp	r1, #0
 8005f98:	d043      	beq.n	8006022 <_dtoa_r+0x582>
 8005f9a:	494d      	ldr	r1, [pc, #308]	; (80060d0 <_dtoa_r+0x630>)
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7fa fc65 	bl	800086c <__aeabi_ddiv>
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	465b      	mov	r3, fp
 8005fa6:	f7fa f97f 	bl	80002a8 <__aeabi_dsub>
 8005faa:	9d01      	ldr	r5, [sp, #4]
 8005fac:	4682      	mov	sl, r0
 8005fae:	468b      	mov	fp, r1
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f7fa fde0 	bl	8000b78 <__aeabi_d2iz>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	f7fa fac3 	bl	8000544 <__aeabi_i2d>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa f96f 	bl	80002a8 <__aeabi_dsub>
 8005fca:	3630      	adds	r6, #48	; 0x30
 8005fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	465b      	mov	r3, fp
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	f7fa fd90 	bl	8000afc <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d163      	bne.n	80060a8 <_dtoa_r+0x608>
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4936      	ldr	r1, [pc, #216]	; (80060c0 <_dtoa_r+0x620>)
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fa f95e 	bl	80002a8 <__aeabi_dsub>
 8005fec:	4652      	mov	r2, sl
 8005fee:	465b      	mov	r3, fp
 8005ff0:	f7fa fd84 	bl	8000afc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 80b5 	bne.w	8006164 <_dtoa_r+0x6c4>
 8005ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffc:	429d      	cmp	r5, r3
 8005ffe:	d081      	beq.n	8005f04 <_dtoa_r+0x464>
 8006000:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <_dtoa_r+0x624>)
 8006002:	2200      	movs	r2, #0
 8006004:	4650      	mov	r0, sl
 8006006:	4659      	mov	r1, fp
 8006008:	f7fa fb06 	bl	8000618 <__aeabi_dmul>
 800600c:	4b2d      	ldr	r3, [pc, #180]	; (80060c4 <_dtoa_r+0x624>)
 800600e:	4682      	mov	sl, r0
 8006010:	468b      	mov	fp, r1
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	2200      	movs	r2, #0
 8006018:	f7fa fafe 	bl	8000618 <__aeabi_dmul>
 800601c:	4680      	mov	r8, r0
 800601e:	4689      	mov	r9, r1
 8006020:	e7c6      	b.n	8005fb0 <_dtoa_r+0x510>
 8006022:	4650      	mov	r0, sl
 8006024:	4659      	mov	r1, fp
 8006026:	f7fa faf7 	bl	8000618 <__aeabi_dmul>
 800602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602c:	9d01      	ldr	r5, [sp, #4]
 800602e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006030:	4682      	mov	sl, r0
 8006032:	468b      	mov	fp, r1
 8006034:	4649      	mov	r1, r9
 8006036:	4640      	mov	r0, r8
 8006038:	f7fa fd9e 	bl	8000b78 <__aeabi_d2iz>
 800603c:	4606      	mov	r6, r0
 800603e:	f7fa fa81 	bl	8000544 <__aeabi_i2d>
 8006042:	3630      	adds	r6, #48	; 0x30
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa f92c 	bl	80002a8 <__aeabi_dsub>
 8006050:	f805 6b01 	strb.w	r6, [r5], #1
 8006054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006056:	429d      	cmp	r5, r3
 8006058:	4680      	mov	r8, r0
 800605a:	4689      	mov	r9, r1
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	d124      	bne.n	80060ac <_dtoa_r+0x60c>
 8006062:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <_dtoa_r+0x630>)
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f920 	bl	80002ac <__adddf3>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fd60 	bl	8000b38 <__aeabi_dcmpgt>
 8006078:	2800      	cmp	r0, #0
 800607a:	d173      	bne.n	8006164 <_dtoa_r+0x6c4>
 800607c:	4652      	mov	r2, sl
 800607e:	465b      	mov	r3, fp
 8006080:	4913      	ldr	r1, [pc, #76]	; (80060d0 <_dtoa_r+0x630>)
 8006082:	2000      	movs	r0, #0
 8006084:	f7fa f910 	bl	80002a8 <__aeabi_dsub>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	f7fa fd34 	bl	8000afc <__aeabi_dcmplt>
 8006094:	2800      	cmp	r0, #0
 8006096:	f43f af35 	beq.w	8005f04 <_dtoa_r+0x464>
 800609a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800609c:	1e6b      	subs	r3, r5, #1
 800609e:	930f      	str	r3, [sp, #60]	; 0x3c
 80060a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d0f8      	beq.n	800609a <_dtoa_r+0x5fa>
 80060a8:	9700      	str	r7, [sp, #0]
 80060aa:	e049      	b.n	8006140 <_dtoa_r+0x6a0>
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <_dtoa_r+0x624>)
 80060ae:	f7fa fab3 	bl	8000618 <__aeabi_dmul>
 80060b2:	4680      	mov	r8, r0
 80060b4:	4689      	mov	r9, r1
 80060b6:	e7bd      	b.n	8006034 <_dtoa_r+0x594>
 80060b8:	08008080 	.word	0x08008080
 80060bc:	08008058 	.word	0x08008058
 80060c0:	3ff00000 	.word	0x3ff00000
 80060c4:	40240000 	.word	0x40240000
 80060c8:	401c0000 	.word	0x401c0000
 80060cc:	40140000 	.word	0x40140000
 80060d0:	3fe00000 	.word	0x3fe00000
 80060d4:	9d01      	ldr	r5, [sp, #4]
 80060d6:	4656      	mov	r6, sl
 80060d8:	465f      	mov	r7, fp
 80060da:	4642      	mov	r2, r8
 80060dc:	464b      	mov	r3, r9
 80060de:	4630      	mov	r0, r6
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fbc3 	bl	800086c <__aeabi_ddiv>
 80060e6:	f7fa fd47 	bl	8000b78 <__aeabi_d2iz>
 80060ea:	4682      	mov	sl, r0
 80060ec:	f7fa fa2a 	bl	8000544 <__aeabi_i2d>
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	f7fa fa90 	bl	8000618 <__aeabi_dmul>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006104:	f7fa f8d0 	bl	80002a8 <__aeabi_dsub>
 8006108:	f805 6b01 	strb.w	r6, [r5], #1
 800610c:	9e01      	ldr	r6, [sp, #4]
 800610e:	9f03      	ldr	r7, [sp, #12]
 8006110:	1bae      	subs	r6, r5, r6
 8006112:	42b7      	cmp	r7, r6
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	d135      	bne.n	8006186 <_dtoa_r+0x6e6>
 800611a:	f7fa f8c7 	bl	80002ac <__adddf3>
 800611e:	4642      	mov	r2, r8
 8006120:	464b      	mov	r3, r9
 8006122:	4606      	mov	r6, r0
 8006124:	460f      	mov	r7, r1
 8006126:	f7fa fd07 	bl	8000b38 <__aeabi_dcmpgt>
 800612a:	b9d0      	cbnz	r0, 8006162 <_dtoa_r+0x6c2>
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006138:	b110      	cbz	r0, 8006140 <_dtoa_r+0x6a0>
 800613a:	f01a 0f01 	tst.w	sl, #1
 800613e:	d110      	bne.n	8006162 <_dtoa_r+0x6c2>
 8006140:	4620      	mov	r0, r4
 8006142:	ee18 1a10 	vmov	r1, s16
 8006146:	f000 fae5 	bl	8006714 <_Bfree>
 800614a:	2300      	movs	r3, #0
 800614c:	9800      	ldr	r0, [sp, #0]
 800614e:	702b      	strb	r3, [r5, #0]
 8006150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006152:	3001      	adds	r0, #1
 8006154:	6018      	str	r0, [r3, #0]
 8006156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006158:	2b00      	cmp	r3, #0
 800615a:	f43f acf1 	beq.w	8005b40 <_dtoa_r+0xa0>
 800615e:	601d      	str	r5, [r3, #0]
 8006160:	e4ee      	b.n	8005b40 <_dtoa_r+0xa0>
 8006162:	9f00      	ldr	r7, [sp, #0]
 8006164:	462b      	mov	r3, r5
 8006166:	461d      	mov	r5, r3
 8006168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616c:	2a39      	cmp	r2, #57	; 0x39
 800616e:	d106      	bne.n	800617e <_dtoa_r+0x6de>
 8006170:	9a01      	ldr	r2, [sp, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d1f7      	bne.n	8006166 <_dtoa_r+0x6c6>
 8006176:	9901      	ldr	r1, [sp, #4]
 8006178:	2230      	movs	r2, #48	; 0x30
 800617a:	3701      	adds	r7, #1
 800617c:	700a      	strb	r2, [r1, #0]
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	3201      	adds	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e790      	b.n	80060a8 <_dtoa_r+0x608>
 8006186:	4ba6      	ldr	r3, [pc, #664]	; (8006420 <_dtoa_r+0x980>)
 8006188:	2200      	movs	r2, #0
 800618a:	f7fa fa45 	bl	8000618 <__aeabi_dmul>
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	f7fa fca7 	bl	8000ae8 <__aeabi_dcmpeq>
 800619a:	2800      	cmp	r0, #0
 800619c:	d09d      	beq.n	80060da <_dtoa_r+0x63a>
 800619e:	e7cf      	b.n	8006140 <_dtoa_r+0x6a0>
 80061a0:	9a08      	ldr	r2, [sp, #32]
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f000 80d7 	beq.w	8006356 <_dtoa_r+0x8b6>
 80061a8:	9a06      	ldr	r2, [sp, #24]
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	f300 80ba 	bgt.w	8006324 <_dtoa_r+0x884>
 80061b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	f000 80b2 	beq.w	800631c <_dtoa_r+0x87c>
 80061b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061bc:	9e07      	ldr	r6, [sp, #28]
 80061be:	9d04      	ldr	r5, [sp, #16]
 80061c0:	9a04      	ldr	r2, [sp, #16]
 80061c2:	441a      	add	r2, r3
 80061c4:	9204      	str	r2, [sp, #16]
 80061c6:	9a05      	ldr	r2, [sp, #20]
 80061c8:	2101      	movs	r1, #1
 80061ca:	441a      	add	r2, r3
 80061cc:	4620      	mov	r0, r4
 80061ce:	9205      	str	r2, [sp, #20]
 80061d0:	f000 fb58 	bl	8006884 <__i2b>
 80061d4:	4607      	mov	r7, r0
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	dd0c      	ble.n	80061f4 <_dtoa_r+0x754>
 80061da:	9b05      	ldr	r3, [sp, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd09      	ble.n	80061f4 <_dtoa_r+0x754>
 80061e0:	42ab      	cmp	r3, r5
 80061e2:	9a04      	ldr	r2, [sp, #16]
 80061e4:	bfa8      	it	ge
 80061e6:	462b      	movge	r3, r5
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	9204      	str	r2, [sp, #16]
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	1aed      	subs	r5, r5, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	9b07      	ldr	r3, [sp, #28]
 80061f6:	b31b      	cbz	r3, 8006240 <_dtoa_r+0x7a0>
 80061f8:	9b08      	ldr	r3, [sp, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80af 	beq.w	800635e <_dtoa_r+0x8be>
 8006200:	2e00      	cmp	r6, #0
 8006202:	dd13      	ble.n	800622c <_dtoa_r+0x78c>
 8006204:	4639      	mov	r1, r7
 8006206:	4632      	mov	r2, r6
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fbfb 	bl	8006a04 <__pow5mult>
 800620e:	ee18 2a10 	vmov	r2, s16
 8006212:	4601      	mov	r1, r0
 8006214:	4607      	mov	r7, r0
 8006216:	4620      	mov	r0, r4
 8006218:	f000 fb4a 	bl	80068b0 <__multiply>
 800621c:	ee18 1a10 	vmov	r1, s16
 8006220:	4680      	mov	r8, r0
 8006222:	4620      	mov	r0, r4
 8006224:	f000 fa76 	bl	8006714 <_Bfree>
 8006228:	ee08 8a10 	vmov	s16, r8
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	1b9a      	subs	r2, r3, r6
 8006230:	d006      	beq.n	8006240 <_dtoa_r+0x7a0>
 8006232:	ee18 1a10 	vmov	r1, s16
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fbe4 	bl	8006a04 <__pow5mult>
 800623c:	ee08 0a10 	vmov	s16, r0
 8006240:	2101      	movs	r1, #1
 8006242:	4620      	mov	r0, r4
 8006244:	f000 fb1e 	bl	8006884 <__i2b>
 8006248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	4606      	mov	r6, r0
 800624e:	f340 8088 	ble.w	8006362 <_dtoa_r+0x8c2>
 8006252:	461a      	mov	r2, r3
 8006254:	4601      	mov	r1, r0
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fbd4 	bl	8006a04 <__pow5mult>
 800625c:	9b06      	ldr	r3, [sp, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	4606      	mov	r6, r0
 8006262:	f340 8081 	ble.w	8006368 <_dtoa_r+0x8c8>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	6933      	ldr	r3, [r6, #16]
 800626c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006270:	6918      	ldr	r0, [r3, #16]
 8006272:	f000 fab7 	bl	80067e4 <__hi0bits>
 8006276:	f1c0 0020 	rsb	r0, r0, #32
 800627a:	9b05      	ldr	r3, [sp, #20]
 800627c:	4418      	add	r0, r3
 800627e:	f010 001f 	ands.w	r0, r0, #31
 8006282:	f000 8092 	beq.w	80063aa <_dtoa_r+0x90a>
 8006286:	f1c0 0320 	rsb	r3, r0, #32
 800628a:	2b04      	cmp	r3, #4
 800628c:	f340 808a 	ble.w	80063a4 <_dtoa_r+0x904>
 8006290:	f1c0 001c 	rsb	r0, r0, #28
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	4403      	add	r3, r0
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	9b05      	ldr	r3, [sp, #20]
 800629c:	4403      	add	r3, r0
 800629e:	4405      	add	r5, r0
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	9b04      	ldr	r3, [sp, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd07      	ble.n	80062b8 <_dtoa_r+0x818>
 80062a8:	ee18 1a10 	vmov	r1, s16
 80062ac:	461a      	mov	r2, r3
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 fc02 	bl	8006ab8 <__lshift>
 80062b4:	ee08 0a10 	vmov	s16, r0
 80062b8:	9b05      	ldr	r3, [sp, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dd05      	ble.n	80062ca <_dtoa_r+0x82a>
 80062be:	4631      	mov	r1, r6
 80062c0:	461a      	mov	r2, r3
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 fbf8 	bl	8006ab8 <__lshift>
 80062c8:	4606      	mov	r6, r0
 80062ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d06e      	beq.n	80063ae <_dtoa_r+0x90e>
 80062d0:	ee18 0a10 	vmov	r0, s16
 80062d4:	4631      	mov	r1, r6
 80062d6:	f000 fc5f 	bl	8006b98 <__mcmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	da67      	bge.n	80063ae <_dtoa_r+0x90e>
 80062de:	9b00      	ldr	r3, [sp, #0]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	ee18 1a10 	vmov	r1, s16
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	220a      	movs	r2, #10
 80062ea:	2300      	movs	r3, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fa33 	bl	8006758 <__multadd>
 80062f2:	9b08      	ldr	r3, [sp, #32]
 80062f4:	ee08 0a10 	vmov	s16, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 81b1 	beq.w	8006660 <_dtoa_r+0xbc0>
 80062fe:	2300      	movs	r3, #0
 8006300:	4639      	mov	r1, r7
 8006302:	220a      	movs	r2, #10
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fa27 	bl	8006758 <__multadd>
 800630a:	9b02      	ldr	r3, [sp, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	4607      	mov	r7, r0
 8006310:	f300 808e 	bgt.w	8006430 <_dtoa_r+0x990>
 8006314:	9b06      	ldr	r3, [sp, #24]
 8006316:	2b02      	cmp	r3, #2
 8006318:	dc51      	bgt.n	80063be <_dtoa_r+0x91e>
 800631a:	e089      	b.n	8006430 <_dtoa_r+0x990>
 800631c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800631e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006322:	e74b      	b.n	80061bc <_dtoa_r+0x71c>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	1e5e      	subs	r6, r3, #1
 8006328:	9b07      	ldr	r3, [sp, #28]
 800632a:	42b3      	cmp	r3, r6
 800632c:	bfbf      	itttt	lt
 800632e:	9b07      	ldrlt	r3, [sp, #28]
 8006330:	9607      	strlt	r6, [sp, #28]
 8006332:	1af2      	sublt	r2, r6, r3
 8006334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006336:	bfb6      	itet	lt
 8006338:	189b      	addlt	r3, r3, r2
 800633a:	1b9e      	subge	r6, r3, r6
 800633c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	bfb8      	it	lt
 8006342:	2600      	movlt	r6, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	bfb7      	itett	lt
 8006348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800634c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006350:	1a9d      	sublt	r5, r3, r2
 8006352:	2300      	movlt	r3, #0
 8006354:	e734      	b.n	80061c0 <_dtoa_r+0x720>
 8006356:	9e07      	ldr	r6, [sp, #28]
 8006358:	9d04      	ldr	r5, [sp, #16]
 800635a:	9f08      	ldr	r7, [sp, #32]
 800635c:	e73b      	b.n	80061d6 <_dtoa_r+0x736>
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	e767      	b.n	8006232 <_dtoa_r+0x792>
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b01      	cmp	r3, #1
 8006366:	dc18      	bgt.n	800639a <_dtoa_r+0x8fa>
 8006368:	f1ba 0f00 	cmp.w	sl, #0
 800636c:	d115      	bne.n	800639a <_dtoa_r+0x8fa>
 800636e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006372:	b993      	cbnz	r3, 800639a <_dtoa_r+0x8fa>
 8006374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006378:	0d1b      	lsrs	r3, r3, #20
 800637a:	051b      	lsls	r3, r3, #20
 800637c:	b183      	cbz	r3, 80063a0 <_dtoa_r+0x900>
 800637e:	9b04      	ldr	r3, [sp, #16]
 8006380:	3301      	adds	r3, #1
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	3301      	adds	r3, #1
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	f04f 0801 	mov.w	r8, #1
 800638e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f af6a 	bne.w	800626a <_dtoa_r+0x7ca>
 8006396:	2001      	movs	r0, #1
 8006398:	e76f      	b.n	800627a <_dtoa_r+0x7da>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	e7f6      	b.n	800638e <_dtoa_r+0x8ee>
 80063a0:	4698      	mov	r8, r3
 80063a2:	e7f4      	b.n	800638e <_dtoa_r+0x8ee>
 80063a4:	f43f af7d 	beq.w	80062a2 <_dtoa_r+0x802>
 80063a8:	4618      	mov	r0, r3
 80063aa:	301c      	adds	r0, #28
 80063ac:	e772      	b.n	8006294 <_dtoa_r+0x7f4>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dc37      	bgt.n	8006424 <_dtoa_r+0x984>
 80063b4:	9b06      	ldr	r3, [sp, #24]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	dd34      	ble.n	8006424 <_dtoa_r+0x984>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	9b02      	ldr	r3, [sp, #8]
 80063c0:	b96b      	cbnz	r3, 80063de <_dtoa_r+0x93e>
 80063c2:	4631      	mov	r1, r6
 80063c4:	2205      	movs	r2, #5
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f9c6 	bl	8006758 <__multadd>
 80063cc:	4601      	mov	r1, r0
 80063ce:	4606      	mov	r6, r0
 80063d0:	ee18 0a10 	vmov	r0, s16
 80063d4:	f000 fbe0 	bl	8006b98 <__mcmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f73f adbb 	bgt.w	8005f54 <_dtoa_r+0x4b4>
 80063de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e0:	9d01      	ldr	r5, [sp, #4]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	4631      	mov	r1, r6
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f991 	bl	8006714 <_Bfree>
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	f43f aea4 	beq.w	8006140 <_dtoa_r+0x6a0>
 80063f8:	f1b8 0f00 	cmp.w	r8, #0
 80063fc:	d005      	beq.n	800640a <_dtoa_r+0x96a>
 80063fe:	45b8      	cmp	r8, r7
 8006400:	d003      	beq.n	800640a <_dtoa_r+0x96a>
 8006402:	4641      	mov	r1, r8
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f985 	bl	8006714 <_Bfree>
 800640a:	4639      	mov	r1, r7
 800640c:	4620      	mov	r0, r4
 800640e:	f000 f981 	bl	8006714 <_Bfree>
 8006412:	e695      	b.n	8006140 <_dtoa_r+0x6a0>
 8006414:	2600      	movs	r6, #0
 8006416:	4637      	mov	r7, r6
 8006418:	e7e1      	b.n	80063de <_dtoa_r+0x93e>
 800641a:	9700      	str	r7, [sp, #0]
 800641c:	4637      	mov	r7, r6
 800641e:	e599      	b.n	8005f54 <_dtoa_r+0x4b4>
 8006420:	40240000 	.word	0x40240000
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80ca 	beq.w	80065c0 <_dtoa_r+0xb20>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	9302      	str	r3, [sp, #8]
 8006430:	2d00      	cmp	r5, #0
 8006432:	dd05      	ble.n	8006440 <_dtoa_r+0x9a0>
 8006434:	4639      	mov	r1, r7
 8006436:	462a      	mov	r2, r5
 8006438:	4620      	mov	r0, r4
 800643a:	f000 fb3d 	bl	8006ab8 <__lshift>
 800643e:	4607      	mov	r7, r0
 8006440:	f1b8 0f00 	cmp.w	r8, #0
 8006444:	d05b      	beq.n	80064fe <_dtoa_r+0xa5e>
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 f923 	bl	8006694 <_Balloc>
 800644e:	4605      	mov	r5, r0
 8006450:	b928      	cbnz	r0, 800645e <_dtoa_r+0x9be>
 8006452:	4b87      	ldr	r3, [pc, #540]	; (8006670 <_dtoa_r+0xbd0>)
 8006454:	4602      	mov	r2, r0
 8006456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800645a:	f7ff bb3b 	b.w	8005ad4 <_dtoa_r+0x34>
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	3202      	adds	r2, #2
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	f107 010c 	add.w	r1, r7, #12
 8006468:	300c      	adds	r0, #12
 800646a:	f7fe fded 	bl	8005048 <memcpy>
 800646e:	2201      	movs	r2, #1
 8006470:	4629      	mov	r1, r5
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fb20 	bl	8006ab8 <__lshift>
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	f103 0901 	add.w	r9, r3, #1
 800647e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006482:	4413      	add	r3, r2
 8006484:	9305      	str	r3, [sp, #20]
 8006486:	f00a 0301 	and.w	r3, sl, #1
 800648a:	46b8      	mov	r8, r7
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	4607      	mov	r7, r0
 8006490:	4631      	mov	r1, r6
 8006492:	ee18 0a10 	vmov	r0, s16
 8006496:	f7ff fa77 	bl	8005988 <quorem>
 800649a:	4641      	mov	r1, r8
 800649c:	9002      	str	r0, [sp, #8]
 800649e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064a2:	ee18 0a10 	vmov	r0, s16
 80064a6:	f000 fb77 	bl	8006b98 <__mcmp>
 80064aa:	463a      	mov	r2, r7
 80064ac:	9003      	str	r0, [sp, #12]
 80064ae:	4631      	mov	r1, r6
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fb8d 	bl	8006bd0 <__mdiff>
 80064b6:	68c2      	ldr	r2, [r0, #12]
 80064b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80064bc:	4605      	mov	r5, r0
 80064be:	bb02      	cbnz	r2, 8006502 <_dtoa_r+0xa62>
 80064c0:	4601      	mov	r1, r0
 80064c2:	ee18 0a10 	vmov	r0, s16
 80064c6:	f000 fb67 	bl	8006b98 <__mcmp>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4629      	mov	r1, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	9207      	str	r2, [sp, #28]
 80064d2:	f000 f91f 	bl	8006714 <_Bfree>
 80064d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80064da:	ea43 0102 	orr.w	r1, r3, r2
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	464d      	mov	r5, r9
 80064e4:	d10f      	bne.n	8006506 <_dtoa_r+0xa66>
 80064e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064ea:	d02a      	beq.n	8006542 <_dtoa_r+0xaa2>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dd02      	ble.n	80064f8 <_dtoa_r+0xa58>
 80064f2:	9b02      	ldr	r3, [sp, #8]
 80064f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80064f8:	f88b a000 	strb.w	sl, [fp]
 80064fc:	e775      	b.n	80063ea <_dtoa_r+0x94a>
 80064fe:	4638      	mov	r0, r7
 8006500:	e7ba      	b.n	8006478 <_dtoa_r+0x9d8>
 8006502:	2201      	movs	r2, #1
 8006504:	e7e2      	b.n	80064cc <_dtoa_r+0xa2c>
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db04      	blt.n	8006516 <_dtoa_r+0xa76>
 800650c:	9906      	ldr	r1, [sp, #24]
 800650e:	430b      	orrs	r3, r1
 8006510:	9904      	ldr	r1, [sp, #16]
 8006512:	430b      	orrs	r3, r1
 8006514:	d122      	bne.n	800655c <_dtoa_r+0xabc>
 8006516:	2a00      	cmp	r2, #0
 8006518:	ddee      	ble.n	80064f8 <_dtoa_r+0xa58>
 800651a:	ee18 1a10 	vmov	r1, s16
 800651e:	2201      	movs	r2, #1
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fac9 	bl	8006ab8 <__lshift>
 8006526:	4631      	mov	r1, r6
 8006528:	ee08 0a10 	vmov	s16, r0
 800652c:	f000 fb34 	bl	8006b98 <__mcmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	dc03      	bgt.n	800653c <_dtoa_r+0xa9c>
 8006534:	d1e0      	bne.n	80064f8 <_dtoa_r+0xa58>
 8006536:	f01a 0f01 	tst.w	sl, #1
 800653a:	d0dd      	beq.n	80064f8 <_dtoa_r+0xa58>
 800653c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006540:	d1d7      	bne.n	80064f2 <_dtoa_r+0xa52>
 8006542:	2339      	movs	r3, #57	; 0x39
 8006544:	f88b 3000 	strb.w	r3, [fp]
 8006548:	462b      	mov	r3, r5
 800654a:	461d      	mov	r5, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006552:	2a39      	cmp	r2, #57	; 0x39
 8006554:	d071      	beq.n	800663a <_dtoa_r+0xb9a>
 8006556:	3201      	adds	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e746      	b.n	80063ea <_dtoa_r+0x94a>
 800655c:	2a00      	cmp	r2, #0
 800655e:	dd07      	ble.n	8006570 <_dtoa_r+0xad0>
 8006560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006564:	d0ed      	beq.n	8006542 <_dtoa_r+0xaa2>
 8006566:	f10a 0301 	add.w	r3, sl, #1
 800656a:	f88b 3000 	strb.w	r3, [fp]
 800656e:	e73c      	b.n	80063ea <_dtoa_r+0x94a>
 8006570:	9b05      	ldr	r3, [sp, #20]
 8006572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006576:	4599      	cmp	r9, r3
 8006578:	d047      	beq.n	800660a <_dtoa_r+0xb6a>
 800657a:	ee18 1a10 	vmov	r1, s16
 800657e:	2300      	movs	r3, #0
 8006580:	220a      	movs	r2, #10
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f8e8 	bl	8006758 <__multadd>
 8006588:	45b8      	cmp	r8, r7
 800658a:	ee08 0a10 	vmov	s16, r0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f04f 020a 	mov.w	r2, #10
 8006596:	4641      	mov	r1, r8
 8006598:	4620      	mov	r0, r4
 800659a:	d106      	bne.n	80065aa <_dtoa_r+0xb0a>
 800659c:	f000 f8dc 	bl	8006758 <__multadd>
 80065a0:	4680      	mov	r8, r0
 80065a2:	4607      	mov	r7, r0
 80065a4:	f109 0901 	add.w	r9, r9, #1
 80065a8:	e772      	b.n	8006490 <_dtoa_r+0x9f0>
 80065aa:	f000 f8d5 	bl	8006758 <__multadd>
 80065ae:	4639      	mov	r1, r7
 80065b0:	4680      	mov	r8, r0
 80065b2:	2300      	movs	r3, #0
 80065b4:	220a      	movs	r2, #10
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 f8ce 	bl	8006758 <__multadd>
 80065bc:	4607      	mov	r7, r0
 80065be:	e7f1      	b.n	80065a4 <_dtoa_r+0xb04>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	9d01      	ldr	r5, [sp, #4]
 80065c6:	ee18 0a10 	vmov	r0, s16
 80065ca:	4631      	mov	r1, r6
 80065cc:	f7ff f9dc 	bl	8005988 <quorem>
 80065d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	f805 ab01 	strb.w	sl, [r5], #1
 80065da:	1aea      	subs	r2, r5, r3
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	4293      	cmp	r3, r2
 80065e0:	dd09      	ble.n	80065f6 <_dtoa_r+0xb56>
 80065e2:	ee18 1a10 	vmov	r1, s16
 80065e6:	2300      	movs	r3, #0
 80065e8:	220a      	movs	r2, #10
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f8b4 	bl	8006758 <__multadd>
 80065f0:	ee08 0a10 	vmov	s16, r0
 80065f4:	e7e7      	b.n	80065c6 <_dtoa_r+0xb26>
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfc8      	it	gt
 80065fc:	461d      	movgt	r5, r3
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	bfd8      	it	le
 8006602:	2501      	movle	r5, #1
 8006604:	441d      	add	r5, r3
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	ee18 1a10 	vmov	r1, s16
 800660e:	2201      	movs	r2, #1
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fa51 	bl	8006ab8 <__lshift>
 8006616:	4631      	mov	r1, r6
 8006618:	ee08 0a10 	vmov	s16, r0
 800661c:	f000 fabc 	bl	8006b98 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	dc91      	bgt.n	8006548 <_dtoa_r+0xaa8>
 8006624:	d102      	bne.n	800662c <_dtoa_r+0xb8c>
 8006626:	f01a 0f01 	tst.w	sl, #1
 800662a:	d18d      	bne.n	8006548 <_dtoa_r+0xaa8>
 800662c:	462b      	mov	r3, r5
 800662e:	461d      	mov	r5, r3
 8006630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006634:	2a30      	cmp	r2, #48	; 0x30
 8006636:	d0fa      	beq.n	800662e <_dtoa_r+0xb8e>
 8006638:	e6d7      	b.n	80063ea <_dtoa_r+0x94a>
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d184      	bne.n	800654a <_dtoa_r+0xaaa>
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2331      	movs	r3, #49	; 0x31
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	e6ce      	b.n	80063ea <_dtoa_r+0x94a>
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <_dtoa_r+0xbd4>)
 800664e:	f7ff ba95 	b.w	8005b7c <_dtoa_r+0xdc>
 8006652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006654:	2b00      	cmp	r3, #0
 8006656:	f47f aa6e 	bne.w	8005b36 <_dtoa_r+0x96>
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <_dtoa_r+0xbd8>)
 800665c:	f7ff ba8e 	b.w	8005b7c <_dtoa_r+0xdc>
 8006660:	9b02      	ldr	r3, [sp, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	dcae      	bgt.n	80065c4 <_dtoa_r+0xb24>
 8006666:	9b06      	ldr	r3, [sp, #24]
 8006668:	2b02      	cmp	r3, #2
 800666a:	f73f aea8 	bgt.w	80063be <_dtoa_r+0x91e>
 800666e:	e7a9      	b.n	80065c4 <_dtoa_r+0xb24>
 8006670:	08007fe7 	.word	0x08007fe7
 8006674:	08007f44 	.word	0x08007f44
 8006678:	08007f68 	.word	0x08007f68

0800667c <_localeconv_r>:
 800667c:	4800      	ldr	r0, [pc, #0]	; (8006680 <_localeconv_r+0x4>)
 800667e:	4770      	bx	lr
 8006680:	20000178 	.word	0x20000178

08006684 <malloc>:
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <malloc+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f000 bc09 	b.w	8006ea0 <_malloc_r>
 800668e:	bf00      	nop
 8006690:	20000024 	.word	0x20000024

08006694 <_Balloc>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006698:	4604      	mov	r4, r0
 800669a:	460d      	mov	r5, r1
 800669c:	b976      	cbnz	r6, 80066bc <_Balloc+0x28>
 800669e:	2010      	movs	r0, #16
 80066a0:	f7ff fff0 	bl	8006684 <malloc>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6260      	str	r0, [r4, #36]	; 0x24
 80066a8:	b920      	cbnz	r0, 80066b4 <_Balloc+0x20>
 80066aa:	4b18      	ldr	r3, [pc, #96]	; (800670c <_Balloc+0x78>)
 80066ac:	4818      	ldr	r0, [pc, #96]	; (8006710 <_Balloc+0x7c>)
 80066ae:	2166      	movs	r1, #102	; 0x66
 80066b0:	f000 fdd6 	bl	8007260 <__assert_func>
 80066b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066b8:	6006      	str	r6, [r0, #0]
 80066ba:	60c6      	str	r6, [r0, #12]
 80066bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066be:	68f3      	ldr	r3, [r6, #12]
 80066c0:	b183      	cbz	r3, 80066e4 <_Balloc+0x50>
 80066c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ca:	b9b8      	cbnz	r0, 80066fc <_Balloc+0x68>
 80066cc:	2101      	movs	r1, #1
 80066ce:	fa01 f605 	lsl.w	r6, r1, r5
 80066d2:	1d72      	adds	r2, r6, #5
 80066d4:	0092      	lsls	r2, r2, #2
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 fb60 	bl	8006d9c <_calloc_r>
 80066dc:	b160      	cbz	r0, 80066f8 <_Balloc+0x64>
 80066de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066e2:	e00e      	b.n	8006702 <_Balloc+0x6e>
 80066e4:	2221      	movs	r2, #33	; 0x21
 80066e6:	2104      	movs	r1, #4
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fb57 	bl	8006d9c <_calloc_r>
 80066ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f0:	60f0      	str	r0, [r6, #12]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e4      	bne.n	80066c2 <_Balloc+0x2e>
 80066f8:	2000      	movs	r0, #0
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	6802      	ldr	r2, [r0, #0]
 80066fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006702:	2300      	movs	r3, #0
 8006704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006708:	e7f7      	b.n	80066fa <_Balloc+0x66>
 800670a:	bf00      	nop
 800670c:	08007f75 	.word	0x08007f75
 8006710:	08007ff8 	.word	0x08007ff8

08006714 <_Bfree>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006718:	4605      	mov	r5, r0
 800671a:	460c      	mov	r4, r1
 800671c:	b976      	cbnz	r6, 800673c <_Bfree+0x28>
 800671e:	2010      	movs	r0, #16
 8006720:	f7ff ffb0 	bl	8006684 <malloc>
 8006724:	4602      	mov	r2, r0
 8006726:	6268      	str	r0, [r5, #36]	; 0x24
 8006728:	b920      	cbnz	r0, 8006734 <_Bfree+0x20>
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <_Bfree+0x3c>)
 800672c:	4809      	ldr	r0, [pc, #36]	; (8006754 <_Bfree+0x40>)
 800672e:	218a      	movs	r1, #138	; 0x8a
 8006730:	f000 fd96 	bl	8007260 <__assert_func>
 8006734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006738:	6006      	str	r6, [r0, #0]
 800673a:	60c6      	str	r6, [r0, #12]
 800673c:	b13c      	cbz	r4, 800674e <_Bfree+0x3a>
 800673e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006740:	6862      	ldr	r2, [r4, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006748:	6021      	str	r1, [r4, #0]
 800674a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800674e:	bd70      	pop	{r4, r5, r6, pc}
 8006750:	08007f75 	.word	0x08007f75
 8006754:	08007ff8 	.word	0x08007ff8

08006758 <__multadd>:
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	690d      	ldr	r5, [r1, #16]
 800675e:	4607      	mov	r7, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461e      	mov	r6, r3
 8006764:	f101 0c14 	add.w	ip, r1, #20
 8006768:	2000      	movs	r0, #0
 800676a:	f8dc 3000 	ldr.w	r3, [ip]
 800676e:	b299      	uxth	r1, r3
 8006770:	fb02 6101 	mla	r1, r2, r1, r6
 8006774:	0c1e      	lsrs	r6, r3, #16
 8006776:	0c0b      	lsrs	r3, r1, #16
 8006778:	fb02 3306 	mla	r3, r2, r6, r3
 800677c:	b289      	uxth	r1, r1
 800677e:	3001      	adds	r0, #1
 8006780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006784:	4285      	cmp	r5, r0
 8006786:	f84c 1b04 	str.w	r1, [ip], #4
 800678a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800678e:	dcec      	bgt.n	800676a <__multadd+0x12>
 8006790:	b30e      	cbz	r6, 80067d6 <__multadd+0x7e>
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	42ab      	cmp	r3, r5
 8006796:	dc19      	bgt.n	80067cc <__multadd+0x74>
 8006798:	6861      	ldr	r1, [r4, #4]
 800679a:	4638      	mov	r0, r7
 800679c:	3101      	adds	r1, #1
 800679e:	f7ff ff79 	bl	8006694 <_Balloc>
 80067a2:	4680      	mov	r8, r0
 80067a4:	b928      	cbnz	r0, 80067b2 <__multadd+0x5a>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <__multadd+0x84>)
 80067aa:	480d      	ldr	r0, [pc, #52]	; (80067e0 <__multadd+0x88>)
 80067ac:	21b5      	movs	r1, #181	; 0xb5
 80067ae:	f000 fd57 	bl	8007260 <__assert_func>
 80067b2:	6922      	ldr	r2, [r4, #16]
 80067b4:	3202      	adds	r2, #2
 80067b6:	f104 010c 	add.w	r1, r4, #12
 80067ba:	0092      	lsls	r2, r2, #2
 80067bc:	300c      	adds	r0, #12
 80067be:	f7fe fc43 	bl	8005048 <memcpy>
 80067c2:	4621      	mov	r1, r4
 80067c4:	4638      	mov	r0, r7
 80067c6:	f7ff ffa5 	bl	8006714 <_Bfree>
 80067ca:	4644      	mov	r4, r8
 80067cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067d0:	3501      	adds	r5, #1
 80067d2:	615e      	str	r6, [r3, #20]
 80067d4:	6125      	str	r5, [r4, #16]
 80067d6:	4620      	mov	r0, r4
 80067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067dc:	08007fe7 	.word	0x08007fe7
 80067e0:	08007ff8 	.word	0x08007ff8

080067e4 <__hi0bits>:
 80067e4:	0c03      	lsrs	r3, r0, #16
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	b9d3      	cbnz	r3, 8006820 <__hi0bits+0x3c>
 80067ea:	0400      	lsls	r0, r0, #16
 80067ec:	2310      	movs	r3, #16
 80067ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067f2:	bf04      	itt	eq
 80067f4:	0200      	lsleq	r0, r0, #8
 80067f6:	3308      	addeq	r3, #8
 80067f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067fc:	bf04      	itt	eq
 80067fe:	0100      	lsleq	r0, r0, #4
 8006800:	3304      	addeq	r3, #4
 8006802:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006806:	bf04      	itt	eq
 8006808:	0080      	lsleq	r0, r0, #2
 800680a:	3302      	addeq	r3, #2
 800680c:	2800      	cmp	r0, #0
 800680e:	db05      	blt.n	800681c <__hi0bits+0x38>
 8006810:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006814:	f103 0301 	add.w	r3, r3, #1
 8006818:	bf08      	it	eq
 800681a:	2320      	moveq	r3, #32
 800681c:	4618      	mov	r0, r3
 800681e:	4770      	bx	lr
 8006820:	2300      	movs	r3, #0
 8006822:	e7e4      	b.n	80067ee <__hi0bits+0xa>

08006824 <__lo0bits>:
 8006824:	6803      	ldr	r3, [r0, #0]
 8006826:	f013 0207 	ands.w	r2, r3, #7
 800682a:	4601      	mov	r1, r0
 800682c:	d00b      	beq.n	8006846 <__lo0bits+0x22>
 800682e:	07da      	lsls	r2, r3, #31
 8006830:	d423      	bmi.n	800687a <__lo0bits+0x56>
 8006832:	0798      	lsls	r0, r3, #30
 8006834:	bf49      	itett	mi
 8006836:	085b      	lsrmi	r3, r3, #1
 8006838:	089b      	lsrpl	r3, r3, #2
 800683a:	2001      	movmi	r0, #1
 800683c:	600b      	strmi	r3, [r1, #0]
 800683e:	bf5c      	itt	pl
 8006840:	600b      	strpl	r3, [r1, #0]
 8006842:	2002      	movpl	r0, #2
 8006844:	4770      	bx	lr
 8006846:	b298      	uxth	r0, r3
 8006848:	b9a8      	cbnz	r0, 8006876 <__lo0bits+0x52>
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	2010      	movs	r0, #16
 800684e:	b2da      	uxtb	r2, r3
 8006850:	b90a      	cbnz	r2, 8006856 <__lo0bits+0x32>
 8006852:	3008      	adds	r0, #8
 8006854:	0a1b      	lsrs	r3, r3, #8
 8006856:	071a      	lsls	r2, r3, #28
 8006858:	bf04      	itt	eq
 800685a:	091b      	lsreq	r3, r3, #4
 800685c:	3004      	addeq	r0, #4
 800685e:	079a      	lsls	r2, r3, #30
 8006860:	bf04      	itt	eq
 8006862:	089b      	lsreq	r3, r3, #2
 8006864:	3002      	addeq	r0, #2
 8006866:	07da      	lsls	r2, r3, #31
 8006868:	d403      	bmi.n	8006872 <__lo0bits+0x4e>
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	f100 0001 	add.w	r0, r0, #1
 8006870:	d005      	beq.n	800687e <__lo0bits+0x5a>
 8006872:	600b      	str	r3, [r1, #0]
 8006874:	4770      	bx	lr
 8006876:	4610      	mov	r0, r2
 8006878:	e7e9      	b.n	800684e <__lo0bits+0x2a>
 800687a:	2000      	movs	r0, #0
 800687c:	4770      	bx	lr
 800687e:	2020      	movs	r0, #32
 8006880:	4770      	bx	lr
	...

08006884 <__i2b>:
 8006884:	b510      	push	{r4, lr}
 8006886:	460c      	mov	r4, r1
 8006888:	2101      	movs	r1, #1
 800688a:	f7ff ff03 	bl	8006694 <_Balloc>
 800688e:	4602      	mov	r2, r0
 8006890:	b928      	cbnz	r0, 800689e <__i2b+0x1a>
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <__i2b+0x24>)
 8006894:	4805      	ldr	r0, [pc, #20]	; (80068ac <__i2b+0x28>)
 8006896:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800689a:	f000 fce1 	bl	8007260 <__assert_func>
 800689e:	2301      	movs	r3, #1
 80068a0:	6144      	str	r4, [r0, #20]
 80068a2:	6103      	str	r3, [r0, #16]
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	08007fe7 	.word	0x08007fe7
 80068ac:	08007ff8 	.word	0x08007ff8

080068b0 <__multiply>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	4691      	mov	r9, r2
 80068b6:	690a      	ldr	r2, [r1, #16]
 80068b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	bfb8      	it	lt
 80068c0:	460b      	movlt	r3, r1
 80068c2:	460c      	mov	r4, r1
 80068c4:	bfbc      	itt	lt
 80068c6:	464c      	movlt	r4, r9
 80068c8:	4699      	movlt	r9, r3
 80068ca:	6927      	ldr	r7, [r4, #16]
 80068cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068d0:	68a3      	ldr	r3, [r4, #8]
 80068d2:	6861      	ldr	r1, [r4, #4]
 80068d4:	eb07 060a 	add.w	r6, r7, sl
 80068d8:	42b3      	cmp	r3, r6
 80068da:	b085      	sub	sp, #20
 80068dc:	bfb8      	it	lt
 80068de:	3101      	addlt	r1, #1
 80068e0:	f7ff fed8 	bl	8006694 <_Balloc>
 80068e4:	b930      	cbnz	r0, 80068f4 <__multiply+0x44>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b44      	ldr	r3, [pc, #272]	; (80069fc <__multiply+0x14c>)
 80068ea:	4845      	ldr	r0, [pc, #276]	; (8006a00 <__multiply+0x150>)
 80068ec:	f240 115d 	movw	r1, #349	; 0x15d
 80068f0:	f000 fcb6 	bl	8007260 <__assert_func>
 80068f4:	f100 0514 	add.w	r5, r0, #20
 80068f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068fc:	462b      	mov	r3, r5
 80068fe:	2200      	movs	r2, #0
 8006900:	4543      	cmp	r3, r8
 8006902:	d321      	bcc.n	8006948 <__multiply+0x98>
 8006904:	f104 0314 	add.w	r3, r4, #20
 8006908:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800690c:	f109 0314 	add.w	r3, r9, #20
 8006910:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	1b3a      	subs	r2, r7, r4
 8006918:	3a15      	subs	r2, #21
 800691a:	f022 0203 	bic.w	r2, r2, #3
 800691e:	3204      	adds	r2, #4
 8006920:	f104 0115 	add.w	r1, r4, #21
 8006924:	428f      	cmp	r7, r1
 8006926:	bf38      	it	cc
 8006928:	2204      	movcc	r2, #4
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	9a02      	ldr	r2, [sp, #8]
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	429a      	cmp	r2, r3
 8006932:	d80c      	bhi.n	800694e <__multiply+0x9e>
 8006934:	2e00      	cmp	r6, #0
 8006936:	dd03      	ble.n	8006940 <__multiply+0x90>
 8006938:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05a      	beq.n	80069f6 <__multiply+0x146>
 8006940:	6106      	str	r6, [r0, #16]
 8006942:	b005      	add	sp, #20
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	f843 2b04 	str.w	r2, [r3], #4
 800694c:	e7d8      	b.n	8006900 <__multiply+0x50>
 800694e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006952:	f1ba 0f00 	cmp.w	sl, #0
 8006956:	d024      	beq.n	80069a2 <__multiply+0xf2>
 8006958:	f104 0e14 	add.w	lr, r4, #20
 800695c:	46a9      	mov	r9, r5
 800695e:	f04f 0c00 	mov.w	ip, #0
 8006962:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006966:	f8d9 1000 	ldr.w	r1, [r9]
 800696a:	fa1f fb82 	uxth.w	fp, r2
 800696e:	b289      	uxth	r1, r1
 8006970:	fb0a 110b 	mla	r1, sl, fp, r1
 8006974:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006978:	f8d9 2000 	ldr.w	r2, [r9]
 800697c:	4461      	add	r1, ip
 800697e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006982:	fb0a c20b 	mla	r2, sl, fp, ip
 8006986:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800698a:	b289      	uxth	r1, r1
 800698c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006990:	4577      	cmp	r7, lr
 8006992:	f849 1b04 	str.w	r1, [r9], #4
 8006996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800699a:	d8e2      	bhi.n	8006962 <__multiply+0xb2>
 800699c:	9a01      	ldr	r2, [sp, #4]
 800699e:	f845 c002 	str.w	ip, [r5, r2]
 80069a2:	9a03      	ldr	r2, [sp, #12]
 80069a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069a8:	3304      	adds	r3, #4
 80069aa:	f1b9 0f00 	cmp.w	r9, #0
 80069ae:	d020      	beq.n	80069f2 <__multiply+0x142>
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	f104 0c14 	add.w	ip, r4, #20
 80069b6:	46ae      	mov	lr, r5
 80069b8:	f04f 0a00 	mov.w	sl, #0
 80069bc:	f8bc b000 	ldrh.w	fp, [ip]
 80069c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069c4:	fb09 220b 	mla	r2, r9, fp, r2
 80069c8:	4492      	add	sl, r2
 80069ca:	b289      	uxth	r1, r1
 80069cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069d0:	f84e 1b04 	str.w	r1, [lr], #4
 80069d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069d8:	f8be 1000 	ldrh.w	r1, [lr]
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	fb09 1102 	mla	r1, r9, r2, r1
 80069e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069e6:	4567      	cmp	r7, ip
 80069e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069ec:	d8e6      	bhi.n	80069bc <__multiply+0x10c>
 80069ee:	9a01      	ldr	r2, [sp, #4]
 80069f0:	50a9      	str	r1, [r5, r2]
 80069f2:	3504      	adds	r5, #4
 80069f4:	e79a      	b.n	800692c <__multiply+0x7c>
 80069f6:	3e01      	subs	r6, #1
 80069f8:	e79c      	b.n	8006934 <__multiply+0x84>
 80069fa:	bf00      	nop
 80069fc:	08007fe7 	.word	0x08007fe7
 8006a00:	08007ff8 	.word	0x08007ff8

08006a04 <__pow5mult>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4615      	mov	r5, r2
 8006a0a:	f012 0203 	ands.w	r2, r2, #3
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460f      	mov	r7, r1
 8006a12:	d007      	beq.n	8006a24 <__pow5mult+0x20>
 8006a14:	4c25      	ldr	r4, [pc, #148]	; (8006aac <__pow5mult+0xa8>)
 8006a16:	3a01      	subs	r2, #1
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a1e:	f7ff fe9b 	bl	8006758 <__multadd>
 8006a22:	4607      	mov	r7, r0
 8006a24:	10ad      	asrs	r5, r5, #2
 8006a26:	d03d      	beq.n	8006aa4 <__pow5mult+0xa0>
 8006a28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a2a:	b97c      	cbnz	r4, 8006a4c <__pow5mult+0x48>
 8006a2c:	2010      	movs	r0, #16
 8006a2e:	f7ff fe29 	bl	8006684 <malloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	6270      	str	r0, [r6, #36]	; 0x24
 8006a36:	b928      	cbnz	r0, 8006a44 <__pow5mult+0x40>
 8006a38:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <__pow5mult+0xac>)
 8006a3a:	481e      	ldr	r0, [pc, #120]	; (8006ab4 <__pow5mult+0xb0>)
 8006a3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a40:	f000 fc0e 	bl	8007260 <__assert_func>
 8006a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a48:	6004      	str	r4, [r0, #0]
 8006a4a:	60c4      	str	r4, [r0, #12]
 8006a4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a54:	b94c      	cbnz	r4, 8006a6a <__pow5mult+0x66>
 8006a56:	f240 2171 	movw	r1, #625	; 0x271
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff12 	bl	8006884 <__i2b>
 8006a60:	2300      	movs	r3, #0
 8006a62:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a66:	4604      	mov	r4, r0
 8006a68:	6003      	str	r3, [r0, #0]
 8006a6a:	f04f 0900 	mov.w	r9, #0
 8006a6e:	07eb      	lsls	r3, r5, #31
 8006a70:	d50a      	bpl.n	8006a88 <__pow5mult+0x84>
 8006a72:	4639      	mov	r1, r7
 8006a74:	4622      	mov	r2, r4
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7ff ff1a 	bl	80068b0 <__multiply>
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff fe47 	bl	8006714 <_Bfree>
 8006a86:	4647      	mov	r7, r8
 8006a88:	106d      	asrs	r5, r5, #1
 8006a8a:	d00b      	beq.n	8006aa4 <__pow5mult+0xa0>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	b938      	cbnz	r0, 8006aa0 <__pow5mult+0x9c>
 8006a90:	4622      	mov	r2, r4
 8006a92:	4621      	mov	r1, r4
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff ff0b 	bl	80068b0 <__multiply>
 8006a9a:	6020      	str	r0, [r4, #0]
 8006a9c:	f8c0 9000 	str.w	r9, [r0]
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	e7e4      	b.n	8006a6e <__pow5mult+0x6a>
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aaa:	bf00      	nop
 8006aac:	08008148 	.word	0x08008148
 8006ab0:	08007f75 	.word	0x08007f75
 8006ab4:	08007ff8 	.word	0x08007ff8

08006ab8 <__lshift>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	460c      	mov	r4, r1
 8006abe:	6849      	ldr	r1, [r1, #4]
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	4607      	mov	r7, r0
 8006aca:	4691      	mov	r9, r2
 8006acc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ad0:	f108 0601 	add.w	r6, r8, #1
 8006ad4:	42b3      	cmp	r3, r6
 8006ad6:	db0b      	blt.n	8006af0 <__lshift+0x38>
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f7ff fddb 	bl	8006694 <_Balloc>
 8006ade:	4605      	mov	r5, r0
 8006ae0:	b948      	cbnz	r0, 8006af6 <__lshift+0x3e>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <__lshift+0xd8>)
 8006ae6:	482b      	ldr	r0, [pc, #172]	; (8006b94 <__lshift+0xdc>)
 8006ae8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006aec:	f000 fbb8 	bl	8007260 <__assert_func>
 8006af0:	3101      	adds	r1, #1
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	e7ee      	b.n	8006ad4 <__lshift+0x1c>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f100 0114 	add.w	r1, r0, #20
 8006afc:	f100 0210 	add.w	r2, r0, #16
 8006b00:	4618      	mov	r0, r3
 8006b02:	4553      	cmp	r3, sl
 8006b04:	db37      	blt.n	8006b76 <__lshift+0xbe>
 8006b06:	6920      	ldr	r0, [r4, #16]
 8006b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b0c:	f104 0314 	add.w	r3, r4, #20
 8006b10:	f019 091f 	ands.w	r9, r9, #31
 8006b14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b1c:	d02f      	beq.n	8006b7e <__lshift+0xc6>
 8006b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006b22:	468a      	mov	sl, r1
 8006b24:	f04f 0c00 	mov.w	ip, #0
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	fa02 f209 	lsl.w	r2, r2, r9
 8006b2e:	ea42 020c 	orr.w	r2, r2, ip
 8006b32:	f84a 2b04 	str.w	r2, [sl], #4
 8006b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b3a:	4298      	cmp	r0, r3
 8006b3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b40:	d8f2      	bhi.n	8006b28 <__lshift+0x70>
 8006b42:	1b03      	subs	r3, r0, r4
 8006b44:	3b15      	subs	r3, #21
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	f104 0215 	add.w	r2, r4, #21
 8006b50:	4290      	cmp	r0, r2
 8006b52:	bf38      	it	cc
 8006b54:	2304      	movcc	r3, #4
 8006b56:	f841 c003 	str.w	ip, [r1, r3]
 8006b5a:	f1bc 0f00 	cmp.w	ip, #0
 8006b5e:	d001      	beq.n	8006b64 <__lshift+0xac>
 8006b60:	f108 0602 	add.w	r6, r8, #2
 8006b64:	3e01      	subs	r6, #1
 8006b66:	4638      	mov	r0, r7
 8006b68:	612e      	str	r6, [r5, #16]
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	f7ff fdd2 	bl	8006714 <_Bfree>
 8006b70:	4628      	mov	r0, r5
 8006b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	e7c1      	b.n	8006b02 <__lshift+0x4a>
 8006b7e:	3904      	subs	r1, #4
 8006b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b88:	4298      	cmp	r0, r3
 8006b8a:	d8f9      	bhi.n	8006b80 <__lshift+0xc8>
 8006b8c:	e7ea      	b.n	8006b64 <__lshift+0xac>
 8006b8e:	bf00      	nop
 8006b90:	08007fe7 	.word	0x08007fe7
 8006b94:	08007ff8 	.word	0x08007ff8

08006b98 <__mcmp>:
 8006b98:	b530      	push	{r4, r5, lr}
 8006b9a:	6902      	ldr	r2, [r0, #16]
 8006b9c:	690c      	ldr	r4, [r1, #16]
 8006b9e:	1b12      	subs	r2, r2, r4
 8006ba0:	d10e      	bne.n	8006bc0 <__mcmp+0x28>
 8006ba2:	f100 0314 	add.w	r3, r0, #20
 8006ba6:	3114      	adds	r1, #20
 8006ba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006bb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006bb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	d003      	beq.n	8006bc4 <__mcmp+0x2c>
 8006bbc:	d305      	bcc.n	8006bca <__mcmp+0x32>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	bd30      	pop	{r4, r5, pc}
 8006bc4:	4283      	cmp	r3, r0
 8006bc6:	d3f3      	bcc.n	8006bb0 <__mcmp+0x18>
 8006bc8:	e7fa      	b.n	8006bc0 <__mcmp+0x28>
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	e7f7      	b.n	8006bc0 <__mcmp+0x28>

08006bd0 <__mdiff>:
 8006bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4690      	mov	r8, r2
 8006bde:	f7ff ffdb 	bl	8006b98 <__mcmp>
 8006be2:	1e05      	subs	r5, r0, #0
 8006be4:	d110      	bne.n	8006c08 <__mdiff+0x38>
 8006be6:	4629      	mov	r1, r5
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff fd53 	bl	8006694 <_Balloc>
 8006bee:	b930      	cbnz	r0, 8006bfe <__mdiff+0x2e>
 8006bf0:	4b3a      	ldr	r3, [pc, #232]	; (8006cdc <__mdiff+0x10c>)
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f240 2132 	movw	r1, #562	; 0x232
 8006bf8:	4839      	ldr	r0, [pc, #228]	; (8006ce0 <__mdiff+0x110>)
 8006bfa:	f000 fb31 	bl	8007260 <__assert_func>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c08:	bfa4      	itt	ge
 8006c0a:	4643      	movge	r3, r8
 8006c0c:	46a0      	movge	r8, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c14:	bfa6      	itte	ge
 8006c16:	461c      	movge	r4, r3
 8006c18:	2500      	movge	r5, #0
 8006c1a:	2501      	movlt	r5, #1
 8006c1c:	f7ff fd3a 	bl	8006694 <_Balloc>
 8006c20:	b920      	cbnz	r0, 8006c2c <__mdiff+0x5c>
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <__mdiff+0x10c>)
 8006c24:	4602      	mov	r2, r0
 8006c26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c2a:	e7e5      	b.n	8006bf8 <__mdiff+0x28>
 8006c2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c30:	6926      	ldr	r6, [r4, #16]
 8006c32:	60c5      	str	r5, [r0, #12]
 8006c34:	f104 0914 	add.w	r9, r4, #20
 8006c38:	f108 0514 	add.w	r5, r8, #20
 8006c3c:	f100 0e14 	add.w	lr, r0, #20
 8006c40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c48:	f108 0210 	add.w	r2, r8, #16
 8006c4c:	46f2      	mov	sl, lr
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c58:	fa1f f883 	uxth.w	r8, r3
 8006c5c:	fa11 f18b 	uxtah	r1, r1, fp
 8006c60:	0c1b      	lsrs	r3, r3, #16
 8006c62:	eba1 0808 	sub.w	r8, r1, r8
 8006c66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c6e:	fa1f f888 	uxth.w	r8, r8
 8006c72:	1419      	asrs	r1, r3, #16
 8006c74:	454e      	cmp	r6, r9
 8006c76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c7a:	f84a 3b04 	str.w	r3, [sl], #4
 8006c7e:	d8e7      	bhi.n	8006c50 <__mdiff+0x80>
 8006c80:	1b33      	subs	r3, r6, r4
 8006c82:	3b15      	subs	r3, #21
 8006c84:	f023 0303 	bic.w	r3, r3, #3
 8006c88:	3304      	adds	r3, #4
 8006c8a:	3415      	adds	r4, #21
 8006c8c:	42a6      	cmp	r6, r4
 8006c8e:	bf38      	it	cc
 8006c90:	2304      	movcc	r3, #4
 8006c92:	441d      	add	r5, r3
 8006c94:	4473      	add	r3, lr
 8006c96:	469e      	mov	lr, r3
 8006c98:	462e      	mov	r6, r5
 8006c9a:	4566      	cmp	r6, ip
 8006c9c:	d30e      	bcc.n	8006cbc <__mdiff+0xec>
 8006c9e:	f10c 0203 	add.w	r2, ip, #3
 8006ca2:	1b52      	subs	r2, r2, r5
 8006ca4:	f022 0203 	bic.w	r2, r2, #3
 8006ca8:	3d03      	subs	r5, #3
 8006caa:	45ac      	cmp	ip, r5
 8006cac:	bf38      	it	cc
 8006cae:	2200      	movcc	r2, #0
 8006cb0:	441a      	add	r2, r3
 8006cb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006cb6:	b17b      	cbz	r3, 8006cd8 <__mdiff+0x108>
 8006cb8:	6107      	str	r7, [r0, #16]
 8006cba:	e7a3      	b.n	8006c04 <__mdiff+0x34>
 8006cbc:	f856 8b04 	ldr.w	r8, [r6], #4
 8006cc0:	fa11 f288 	uxtah	r2, r1, r8
 8006cc4:	1414      	asrs	r4, r2, #16
 8006cc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006cd0:	f84e 2b04 	str.w	r2, [lr], #4
 8006cd4:	1421      	asrs	r1, r4, #16
 8006cd6:	e7e0      	b.n	8006c9a <__mdiff+0xca>
 8006cd8:	3f01      	subs	r7, #1
 8006cda:	e7ea      	b.n	8006cb2 <__mdiff+0xe2>
 8006cdc:	08007fe7 	.word	0x08007fe7
 8006ce0:	08007ff8 	.word	0x08007ff8

08006ce4 <__d2b>:
 8006ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4689      	mov	r9, r1
 8006cea:	2101      	movs	r1, #1
 8006cec:	ec57 6b10 	vmov	r6, r7, d0
 8006cf0:	4690      	mov	r8, r2
 8006cf2:	f7ff fccf 	bl	8006694 <_Balloc>
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	b930      	cbnz	r0, 8006d08 <__d2b+0x24>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <__d2b+0xb0>)
 8006cfe:	4826      	ldr	r0, [pc, #152]	; (8006d98 <__d2b+0xb4>)
 8006d00:	f240 310a 	movw	r1, #778	; 0x30a
 8006d04:	f000 faac 	bl	8007260 <__assert_func>
 8006d08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d10:	bb35      	cbnz	r5, 8006d60 <__d2b+0x7c>
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	d028      	beq.n	8006d6a <__d2b+0x86>
 8006d18:	4668      	mov	r0, sp
 8006d1a:	9600      	str	r6, [sp, #0]
 8006d1c:	f7ff fd82 	bl	8006824 <__lo0bits>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	b300      	cbz	r0, 8006d66 <__d2b+0x82>
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	f1c0 0320 	rsb	r3, r0, #32
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	40c2      	lsrs	r2, r0
 8006d32:	6163      	str	r3, [r4, #20]
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	61a3      	str	r3, [r4, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2202      	movne	r2, #2
 8006d40:	2201      	moveq	r2, #1
 8006d42:	6122      	str	r2, [r4, #16]
 8006d44:	b1d5      	cbz	r5, 8006d7c <__d2b+0x98>
 8006d46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d4a:	4405      	add	r5, r0
 8006d4c:	f8c9 5000 	str.w	r5, [r9]
 8006d50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d54:	f8c8 0000 	str.w	r0, [r8]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	b003      	add	sp, #12
 8006d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d64:	e7d5      	b.n	8006d12 <__d2b+0x2e>
 8006d66:	6161      	str	r1, [r4, #20]
 8006d68:	e7e5      	b.n	8006d36 <__d2b+0x52>
 8006d6a:	a801      	add	r0, sp, #4
 8006d6c:	f7ff fd5a 	bl	8006824 <__lo0bits>
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	2201      	movs	r2, #1
 8006d76:	6122      	str	r2, [r4, #16]
 8006d78:	3020      	adds	r0, #32
 8006d7a:	e7e3      	b.n	8006d44 <__d2b+0x60>
 8006d7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d84:	f8c9 0000 	str.w	r0, [r9]
 8006d88:	6918      	ldr	r0, [r3, #16]
 8006d8a:	f7ff fd2b 	bl	80067e4 <__hi0bits>
 8006d8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d92:	e7df      	b.n	8006d54 <__d2b+0x70>
 8006d94:	08007fe7 	.word	0x08007fe7
 8006d98:	08007ff8 	.word	0x08007ff8

08006d9c <_calloc_r>:
 8006d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9e:	fba1 2402 	umull	r2, r4, r1, r2
 8006da2:	b94c      	cbnz	r4, 8006db8 <_calloc_r+0x1c>
 8006da4:	4611      	mov	r1, r2
 8006da6:	9201      	str	r2, [sp, #4]
 8006da8:	f000 f87a 	bl	8006ea0 <_malloc_r>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	4605      	mov	r5, r0
 8006db0:	b930      	cbnz	r0, 8006dc0 <_calloc_r+0x24>
 8006db2:	4628      	mov	r0, r5
 8006db4:	b003      	add	sp, #12
 8006db6:	bd30      	pop	{r4, r5, pc}
 8006db8:	220c      	movs	r2, #12
 8006dba:	6002      	str	r2, [r0, #0]
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	e7f8      	b.n	8006db2 <_calloc_r+0x16>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	f7fe f94f 	bl	8005064 <memset>
 8006dc6:	e7f4      	b.n	8006db2 <_calloc_r+0x16>

08006dc8 <_free_r>:
 8006dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d044      	beq.n	8006e58 <_free_r+0x90>
 8006dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd2:	9001      	str	r0, [sp, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dda:	bfb8      	it	lt
 8006ddc:	18e4      	addlt	r4, r4, r3
 8006dde:	f000 fa9b 	bl	8007318 <__malloc_lock>
 8006de2:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <_free_r+0x94>)
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	6813      	ldr	r3, [r2, #0]
 8006de8:	b933      	cbnz	r3, 8006df8 <_free_r+0x30>
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	6014      	str	r4, [r2, #0]
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006df4:	f000 ba96 	b.w	8007324 <__malloc_unlock>
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	d908      	bls.n	8006e0e <_free_r+0x46>
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	1961      	adds	r1, r4, r5
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf01      	itttt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	1949      	addeq	r1, r1, r5
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	e7ed      	b.n	8006dea <_free_r+0x22>
 8006e0e:	461a      	mov	r2, r3
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	b10b      	cbz	r3, 8006e18 <_free_r+0x50>
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d9fa      	bls.n	8006e0e <_free_r+0x46>
 8006e18:	6811      	ldr	r1, [r2, #0]
 8006e1a:	1855      	adds	r5, r2, r1
 8006e1c:	42a5      	cmp	r5, r4
 8006e1e:	d10b      	bne.n	8006e38 <_free_r+0x70>
 8006e20:	6824      	ldr	r4, [r4, #0]
 8006e22:	4421      	add	r1, r4
 8006e24:	1854      	adds	r4, r2, r1
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	6011      	str	r1, [r2, #0]
 8006e2a:	d1e0      	bne.n	8006dee <_free_r+0x26>
 8006e2c:	681c      	ldr	r4, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	6053      	str	r3, [r2, #4]
 8006e32:	4421      	add	r1, r4
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	e7da      	b.n	8006dee <_free_r+0x26>
 8006e38:	d902      	bls.n	8006e40 <_free_r+0x78>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	e7d6      	b.n	8006dee <_free_r+0x26>
 8006e40:	6825      	ldr	r5, [r4, #0]
 8006e42:	1961      	adds	r1, r4, r5
 8006e44:	428b      	cmp	r3, r1
 8006e46:	bf04      	itt	eq
 8006e48:	6819      	ldreq	r1, [r3, #0]
 8006e4a:	685b      	ldreq	r3, [r3, #4]
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	bf04      	itt	eq
 8006e50:	1949      	addeq	r1, r1, r5
 8006e52:	6021      	streq	r1, [r4, #0]
 8006e54:	6054      	str	r4, [r2, #4]
 8006e56:	e7ca      	b.n	8006dee <_free_r+0x26>
 8006e58:	b003      	add	sp, #12
 8006e5a:	bd30      	pop	{r4, r5, pc}
 8006e5c:	2000035c 	.word	0x2000035c

08006e60 <sbrk_aligned>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4e0e      	ldr	r6, [pc, #56]	; (8006e9c <sbrk_aligned+0x3c>)
 8006e64:	460c      	mov	r4, r1
 8006e66:	6831      	ldr	r1, [r6, #0]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	b911      	cbnz	r1, 8006e72 <sbrk_aligned+0x12>
 8006e6c:	f000 f9e8 	bl	8007240 <_sbrk_r>
 8006e70:	6030      	str	r0, [r6, #0]
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f9e3 	bl	8007240 <_sbrk_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	d00a      	beq.n	8006e94 <sbrk_aligned+0x34>
 8006e7e:	1cc4      	adds	r4, r0, #3
 8006e80:	f024 0403 	bic.w	r4, r4, #3
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	d007      	beq.n	8006e98 <sbrk_aligned+0x38>
 8006e88:	1a21      	subs	r1, r4, r0
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f9d8 	bl	8007240 <_sbrk_r>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d101      	bne.n	8006e98 <sbrk_aligned+0x38>
 8006e94:	f04f 34ff 	mov.w	r4, #4294967295
 8006e98:	4620      	mov	r0, r4
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	20000360 	.word	0x20000360

08006ea0 <_malloc_r>:
 8006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	1ccd      	adds	r5, r1, #3
 8006ea6:	f025 0503 	bic.w	r5, r5, #3
 8006eaa:	3508      	adds	r5, #8
 8006eac:	2d0c      	cmp	r5, #12
 8006eae:	bf38      	it	cc
 8006eb0:	250c      	movcc	r5, #12
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	db01      	blt.n	8006ebc <_malloc_r+0x1c>
 8006eb8:	42a9      	cmp	r1, r5
 8006eba:	d905      	bls.n	8006ec8 <_malloc_r+0x28>
 8006ebc:	230c      	movs	r3, #12
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec8:	4e2e      	ldr	r6, [pc, #184]	; (8006f84 <_malloc_r+0xe4>)
 8006eca:	f000 fa25 	bl	8007318 <__malloc_lock>
 8006ece:	6833      	ldr	r3, [r6, #0]
 8006ed0:	461c      	mov	r4, r3
 8006ed2:	bb34      	cbnz	r4, 8006f22 <_malloc_r+0x82>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f7ff ffc2 	bl	8006e60 <sbrk_aligned>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	4604      	mov	r4, r0
 8006ee0:	d14d      	bne.n	8006f7e <_malloc_r+0xde>
 8006ee2:	6834      	ldr	r4, [r6, #0]
 8006ee4:	4626      	mov	r6, r4
 8006ee6:	2e00      	cmp	r6, #0
 8006ee8:	d140      	bne.n	8006f6c <_malloc_r+0xcc>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	4631      	mov	r1, r6
 8006eee:	4638      	mov	r0, r7
 8006ef0:	eb04 0803 	add.w	r8, r4, r3
 8006ef4:	f000 f9a4 	bl	8007240 <_sbrk_r>
 8006ef8:	4580      	cmp	r8, r0
 8006efa:	d13a      	bne.n	8006f72 <_malloc_r+0xd2>
 8006efc:	6821      	ldr	r1, [r4, #0]
 8006efe:	3503      	adds	r5, #3
 8006f00:	1a6d      	subs	r5, r5, r1
 8006f02:	f025 0503 	bic.w	r5, r5, #3
 8006f06:	3508      	adds	r5, #8
 8006f08:	2d0c      	cmp	r5, #12
 8006f0a:	bf38      	it	cc
 8006f0c:	250c      	movcc	r5, #12
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff ffa5 	bl	8006e60 <sbrk_aligned>
 8006f16:	3001      	adds	r0, #1
 8006f18:	d02b      	beq.n	8006f72 <_malloc_r+0xd2>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	442b      	add	r3, r5
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	e00e      	b.n	8006f40 <_malloc_r+0xa0>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	1b52      	subs	r2, r2, r5
 8006f26:	d41e      	bmi.n	8006f66 <_malloc_r+0xc6>
 8006f28:	2a0b      	cmp	r2, #11
 8006f2a:	d916      	bls.n	8006f5a <_malloc_r+0xba>
 8006f2c:	1961      	adds	r1, r4, r5
 8006f2e:	42a3      	cmp	r3, r4
 8006f30:	6025      	str	r5, [r4, #0]
 8006f32:	bf18      	it	ne
 8006f34:	6059      	strne	r1, [r3, #4]
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	bf08      	it	eq
 8006f3a:	6031      	streq	r1, [r6, #0]
 8006f3c:	5162      	str	r2, [r4, r5]
 8006f3e:	604b      	str	r3, [r1, #4]
 8006f40:	4638      	mov	r0, r7
 8006f42:	f104 060b 	add.w	r6, r4, #11
 8006f46:	f000 f9ed 	bl	8007324 <__malloc_unlock>
 8006f4a:	f026 0607 	bic.w	r6, r6, #7
 8006f4e:	1d23      	adds	r3, r4, #4
 8006f50:	1af2      	subs	r2, r6, r3
 8006f52:	d0b6      	beq.n	8006ec2 <_malloc_r+0x22>
 8006f54:	1b9b      	subs	r3, r3, r6
 8006f56:	50a3      	str	r3, [r4, r2]
 8006f58:	e7b3      	b.n	8006ec2 <_malloc_r+0x22>
 8006f5a:	6862      	ldr	r2, [r4, #4]
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	bf0c      	ite	eq
 8006f60:	6032      	streq	r2, [r6, #0]
 8006f62:	605a      	strne	r2, [r3, #4]
 8006f64:	e7ec      	b.n	8006f40 <_malloc_r+0xa0>
 8006f66:	4623      	mov	r3, r4
 8006f68:	6864      	ldr	r4, [r4, #4]
 8006f6a:	e7b2      	b.n	8006ed2 <_malloc_r+0x32>
 8006f6c:	4634      	mov	r4, r6
 8006f6e:	6876      	ldr	r6, [r6, #4]
 8006f70:	e7b9      	b.n	8006ee6 <_malloc_r+0x46>
 8006f72:	230c      	movs	r3, #12
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	4638      	mov	r0, r7
 8006f78:	f000 f9d4 	bl	8007324 <__malloc_unlock>
 8006f7c:	e7a1      	b.n	8006ec2 <_malloc_r+0x22>
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	e7de      	b.n	8006f40 <_malloc_r+0xa0>
 8006f82:	bf00      	nop
 8006f84:	2000035c 	.word	0x2000035c

08006f88 <__ssputs_r>:
 8006f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	688e      	ldr	r6, [r1, #8]
 8006f8e:	429e      	cmp	r6, r3
 8006f90:	4682      	mov	sl, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	4690      	mov	r8, r2
 8006f96:	461f      	mov	r7, r3
 8006f98:	d838      	bhi.n	800700c <__ssputs_r+0x84>
 8006f9a:	898a      	ldrh	r2, [r1, #12]
 8006f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fa0:	d032      	beq.n	8007008 <__ssputs_r+0x80>
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	6909      	ldr	r1, [r1, #16]
 8006fa6:	eba5 0901 	sub.w	r9, r5, r1
 8006faa:	6965      	ldr	r5, [r4, #20]
 8006fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	444b      	add	r3, r9
 8006fb8:	106d      	asrs	r5, r5, #1
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	bf38      	it	cc
 8006fbe:	461d      	movcc	r5, r3
 8006fc0:	0553      	lsls	r3, r2, #21
 8006fc2:	d531      	bpl.n	8007028 <__ssputs_r+0xa0>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7ff ff6b 	bl	8006ea0 <_malloc_r>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	b950      	cbnz	r0, 8006fe4 <__ssputs_r+0x5c>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	f8ca 3000 	str.w	r3, [sl]
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe4:	6921      	ldr	r1, [r4, #16]
 8006fe6:	464a      	mov	r2, r9
 8006fe8:	f7fe f82e 	bl	8005048 <memcpy>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	6126      	str	r6, [r4, #16]
 8006ffa:	6165      	str	r5, [r4, #20]
 8006ffc:	444e      	add	r6, r9
 8006ffe:	eba5 0509 	sub.w	r5, r5, r9
 8007002:	6026      	str	r6, [r4, #0]
 8007004:	60a5      	str	r5, [r4, #8]
 8007006:	463e      	mov	r6, r7
 8007008:	42be      	cmp	r6, r7
 800700a:	d900      	bls.n	800700e <__ssputs_r+0x86>
 800700c:	463e      	mov	r6, r7
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	4632      	mov	r2, r6
 8007012:	4641      	mov	r1, r8
 8007014:	f000 f966 	bl	80072e4 <memmove>
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	1b9b      	subs	r3, r3, r6
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	4433      	add	r3, r6
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	2000      	movs	r0, #0
 8007026:	e7db      	b.n	8006fe0 <__ssputs_r+0x58>
 8007028:	462a      	mov	r2, r5
 800702a:	f000 f981 	bl	8007330 <_realloc_r>
 800702e:	4606      	mov	r6, r0
 8007030:	2800      	cmp	r0, #0
 8007032:	d1e1      	bne.n	8006ff8 <__ssputs_r+0x70>
 8007034:	6921      	ldr	r1, [r4, #16]
 8007036:	4650      	mov	r0, sl
 8007038:	f7ff fec6 	bl	8006dc8 <_free_r>
 800703c:	e7c7      	b.n	8006fce <__ssputs_r+0x46>
	...

08007040 <_svfiprintf_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	4698      	mov	r8, r3
 8007046:	898b      	ldrh	r3, [r1, #12]
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	b09d      	sub	sp, #116	; 0x74
 800704c:	4607      	mov	r7, r0
 800704e:	460d      	mov	r5, r1
 8007050:	4614      	mov	r4, r2
 8007052:	d50e      	bpl.n	8007072 <_svfiprintf_r+0x32>
 8007054:	690b      	ldr	r3, [r1, #16]
 8007056:	b963      	cbnz	r3, 8007072 <_svfiprintf_r+0x32>
 8007058:	2140      	movs	r1, #64	; 0x40
 800705a:	f7ff ff21 	bl	8006ea0 <_malloc_r>
 800705e:	6028      	str	r0, [r5, #0]
 8007060:	6128      	str	r0, [r5, #16]
 8007062:	b920      	cbnz	r0, 800706e <_svfiprintf_r+0x2e>
 8007064:	230c      	movs	r3, #12
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	e0d1      	b.n	8007212 <_svfiprintf_r+0x1d2>
 800706e:	2340      	movs	r3, #64	; 0x40
 8007070:	616b      	str	r3, [r5, #20]
 8007072:	2300      	movs	r3, #0
 8007074:	9309      	str	r3, [sp, #36]	; 0x24
 8007076:	2320      	movs	r3, #32
 8007078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007080:	2330      	movs	r3, #48	; 0x30
 8007082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800722c <_svfiprintf_r+0x1ec>
 8007086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800708a:	f04f 0901 	mov.w	r9, #1
 800708e:	4623      	mov	r3, r4
 8007090:	469a      	mov	sl, r3
 8007092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007096:	b10a      	cbz	r2, 800709c <_svfiprintf_r+0x5c>
 8007098:	2a25      	cmp	r2, #37	; 0x25
 800709a:	d1f9      	bne.n	8007090 <_svfiprintf_r+0x50>
 800709c:	ebba 0b04 	subs.w	fp, sl, r4
 80070a0:	d00b      	beq.n	80070ba <_svfiprintf_r+0x7a>
 80070a2:	465b      	mov	r3, fp
 80070a4:	4622      	mov	r2, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff ff6d 	bl	8006f88 <__ssputs_r>
 80070ae:	3001      	adds	r0, #1
 80070b0:	f000 80aa 	beq.w	8007208 <_svfiprintf_r+0x1c8>
 80070b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b6:	445a      	add	r2, fp
 80070b8:	9209      	str	r2, [sp, #36]	; 0x24
 80070ba:	f89a 3000 	ldrb.w	r3, [sl]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80a2 	beq.w	8007208 <_svfiprintf_r+0x1c8>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ce:	f10a 0a01 	add.w	sl, sl, #1
 80070d2:	9304      	str	r3, [sp, #16]
 80070d4:	9307      	str	r3, [sp, #28]
 80070d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070da:	931a      	str	r3, [sp, #104]	; 0x68
 80070dc:	4654      	mov	r4, sl
 80070de:	2205      	movs	r2, #5
 80070e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e4:	4851      	ldr	r0, [pc, #324]	; (800722c <_svfiprintf_r+0x1ec>)
 80070e6:	f7f9 f88b 	bl	8000200 <memchr>
 80070ea:	9a04      	ldr	r2, [sp, #16]
 80070ec:	b9d8      	cbnz	r0, 8007126 <_svfiprintf_r+0xe6>
 80070ee:	06d0      	lsls	r0, r2, #27
 80070f0:	bf44      	itt	mi
 80070f2:	2320      	movmi	r3, #32
 80070f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f8:	0711      	lsls	r1, r2, #28
 80070fa:	bf44      	itt	mi
 80070fc:	232b      	movmi	r3, #43	; 0x2b
 80070fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007102:	f89a 3000 	ldrb.w	r3, [sl]
 8007106:	2b2a      	cmp	r3, #42	; 0x2a
 8007108:	d015      	beq.n	8007136 <_svfiprintf_r+0xf6>
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	4654      	mov	r4, sl
 800710e:	2000      	movs	r0, #0
 8007110:	f04f 0c0a 	mov.w	ip, #10
 8007114:	4621      	mov	r1, r4
 8007116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800711a:	3b30      	subs	r3, #48	; 0x30
 800711c:	2b09      	cmp	r3, #9
 800711e:	d94e      	bls.n	80071be <_svfiprintf_r+0x17e>
 8007120:	b1b0      	cbz	r0, 8007150 <_svfiprintf_r+0x110>
 8007122:	9207      	str	r2, [sp, #28]
 8007124:	e014      	b.n	8007150 <_svfiprintf_r+0x110>
 8007126:	eba0 0308 	sub.w	r3, r0, r8
 800712a:	fa09 f303 	lsl.w	r3, r9, r3
 800712e:	4313      	orrs	r3, r2
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	46a2      	mov	sl, r4
 8007134:	e7d2      	b.n	80070dc <_svfiprintf_r+0x9c>
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	1d19      	adds	r1, r3, #4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfbb      	ittet	lt
 8007142:	425b      	neglt	r3, r3
 8007144:	f042 0202 	orrlt.w	r2, r2, #2
 8007148:	9307      	strge	r3, [sp, #28]
 800714a:	9307      	strlt	r3, [sp, #28]
 800714c:	bfb8      	it	lt
 800714e:	9204      	strlt	r2, [sp, #16]
 8007150:	7823      	ldrb	r3, [r4, #0]
 8007152:	2b2e      	cmp	r3, #46	; 0x2e
 8007154:	d10c      	bne.n	8007170 <_svfiprintf_r+0x130>
 8007156:	7863      	ldrb	r3, [r4, #1]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d135      	bne.n	80071c8 <_svfiprintf_r+0x188>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	9203      	str	r2, [sp, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfb8      	it	lt
 8007168:	f04f 33ff 	movlt.w	r3, #4294967295
 800716c:	3402      	adds	r4, #2
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800723c <_svfiprintf_r+0x1fc>
 8007174:	7821      	ldrb	r1, [r4, #0]
 8007176:	2203      	movs	r2, #3
 8007178:	4650      	mov	r0, sl
 800717a:	f7f9 f841 	bl	8000200 <memchr>
 800717e:	b140      	cbz	r0, 8007192 <_svfiprintf_r+0x152>
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	eba0 000a 	sub.w	r0, r0, sl
 8007186:	fa03 f000 	lsl.w	r0, r3, r0
 800718a:	9b04      	ldr	r3, [sp, #16]
 800718c:	4303      	orrs	r3, r0
 800718e:	3401      	adds	r4, #1
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007196:	4826      	ldr	r0, [pc, #152]	; (8007230 <_svfiprintf_r+0x1f0>)
 8007198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719c:	2206      	movs	r2, #6
 800719e:	f7f9 f82f 	bl	8000200 <memchr>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d038      	beq.n	8007218 <_svfiprintf_r+0x1d8>
 80071a6:	4b23      	ldr	r3, [pc, #140]	; (8007234 <_svfiprintf_r+0x1f4>)
 80071a8:	bb1b      	cbnz	r3, 80071f2 <_svfiprintf_r+0x1b2>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	3307      	adds	r3, #7
 80071ae:	f023 0307 	bic.w	r3, r3, #7
 80071b2:	3308      	adds	r3, #8
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	4433      	add	r3, r6
 80071ba:	9309      	str	r3, [sp, #36]	; 0x24
 80071bc:	e767      	b.n	800708e <_svfiprintf_r+0x4e>
 80071be:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c2:	460c      	mov	r4, r1
 80071c4:	2001      	movs	r0, #1
 80071c6:	e7a5      	b.n	8007114 <_svfiprintf_r+0xd4>
 80071c8:	2300      	movs	r3, #0
 80071ca:	3401      	adds	r4, #1
 80071cc:	9305      	str	r3, [sp, #20]
 80071ce:	4619      	mov	r1, r3
 80071d0:	f04f 0c0a 	mov.w	ip, #10
 80071d4:	4620      	mov	r0, r4
 80071d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071da:	3a30      	subs	r2, #48	; 0x30
 80071dc:	2a09      	cmp	r2, #9
 80071de:	d903      	bls.n	80071e8 <_svfiprintf_r+0x1a8>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0c5      	beq.n	8007170 <_svfiprintf_r+0x130>
 80071e4:	9105      	str	r1, [sp, #20]
 80071e6:	e7c3      	b.n	8007170 <_svfiprintf_r+0x130>
 80071e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ec:	4604      	mov	r4, r0
 80071ee:	2301      	movs	r3, #1
 80071f0:	e7f0      	b.n	80071d4 <_svfiprintf_r+0x194>
 80071f2:	ab03      	add	r3, sp, #12
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	462a      	mov	r2, r5
 80071f8:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <_svfiprintf_r+0x1f8>)
 80071fa:	a904      	add	r1, sp, #16
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7fd ffd9 	bl	80051b4 <_printf_float>
 8007202:	1c42      	adds	r2, r0, #1
 8007204:	4606      	mov	r6, r0
 8007206:	d1d6      	bne.n	80071b6 <_svfiprintf_r+0x176>
 8007208:	89ab      	ldrh	r3, [r5, #12]
 800720a:	065b      	lsls	r3, r3, #25
 800720c:	f53f af2c 	bmi.w	8007068 <_svfiprintf_r+0x28>
 8007210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007212:	b01d      	add	sp, #116	; 0x74
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	ab03      	add	r3, sp, #12
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	462a      	mov	r2, r5
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <_svfiprintf_r+0x1f8>)
 8007220:	a904      	add	r1, sp, #16
 8007222:	4638      	mov	r0, r7
 8007224:	f7fe fa6a 	bl	80056fc <_printf_i>
 8007228:	e7eb      	b.n	8007202 <_svfiprintf_r+0x1c2>
 800722a:	bf00      	nop
 800722c:	08008154 	.word	0x08008154
 8007230:	0800815e 	.word	0x0800815e
 8007234:	080051b5 	.word	0x080051b5
 8007238:	08006f89 	.word	0x08006f89
 800723c:	0800815a 	.word	0x0800815a

08007240 <_sbrk_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d06      	ldr	r5, [pc, #24]	; (800725c <_sbrk_r+0x1c>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	f7fb f83c 	bl	80022c8 <_sbrk>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_sbrk_r+0x1a>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_sbrk_r+0x1a>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20000364 	.word	0x20000364

08007260 <__assert_func>:
 8007260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007262:	4614      	mov	r4, r2
 8007264:	461a      	mov	r2, r3
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <__assert_func+0x2c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4605      	mov	r5, r0
 800726c:	68d8      	ldr	r0, [r3, #12]
 800726e:	b14c      	cbz	r4, 8007284 <__assert_func+0x24>
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <__assert_func+0x30>)
 8007272:	9100      	str	r1, [sp, #0]
 8007274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007278:	4906      	ldr	r1, [pc, #24]	; (8007294 <__assert_func+0x34>)
 800727a:	462b      	mov	r3, r5
 800727c:	f000 f80e 	bl	800729c <fiprintf>
 8007280:	f000 faac 	bl	80077dc <abort>
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <__assert_func+0x38>)
 8007286:	461c      	mov	r4, r3
 8007288:	e7f3      	b.n	8007272 <__assert_func+0x12>
 800728a:	bf00      	nop
 800728c:	20000024 	.word	0x20000024
 8007290:	08008165 	.word	0x08008165
 8007294:	08008172 	.word	0x08008172
 8007298:	080081a0 	.word	0x080081a0

0800729c <fiprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b503      	push	{r0, r1, lr}
 80072a0:	4601      	mov	r1, r0
 80072a2:	ab03      	add	r3, sp, #12
 80072a4:	4805      	ldr	r0, [pc, #20]	; (80072bc <fiprintf+0x20>)
 80072a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	f000 f897 	bl	80073e0 <_vfiprintf_r>
 80072b2:	b002      	add	sp, #8
 80072b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b8:	b003      	add	sp, #12
 80072ba:	4770      	bx	lr
 80072bc:	20000024 	.word	0x20000024

080072c0 <__ascii_mbtowc>:
 80072c0:	b082      	sub	sp, #8
 80072c2:	b901      	cbnz	r1, 80072c6 <__ascii_mbtowc+0x6>
 80072c4:	a901      	add	r1, sp, #4
 80072c6:	b142      	cbz	r2, 80072da <__ascii_mbtowc+0x1a>
 80072c8:	b14b      	cbz	r3, 80072de <__ascii_mbtowc+0x1e>
 80072ca:	7813      	ldrb	r3, [r2, #0]
 80072cc:	600b      	str	r3, [r1, #0]
 80072ce:	7812      	ldrb	r2, [r2, #0]
 80072d0:	1e10      	subs	r0, r2, #0
 80072d2:	bf18      	it	ne
 80072d4:	2001      	movne	r0, #1
 80072d6:	b002      	add	sp, #8
 80072d8:	4770      	bx	lr
 80072da:	4610      	mov	r0, r2
 80072dc:	e7fb      	b.n	80072d6 <__ascii_mbtowc+0x16>
 80072de:	f06f 0001 	mvn.w	r0, #1
 80072e2:	e7f8      	b.n	80072d6 <__ascii_mbtowc+0x16>

080072e4 <memmove>:
 80072e4:	4288      	cmp	r0, r1
 80072e6:	b510      	push	{r4, lr}
 80072e8:	eb01 0402 	add.w	r4, r1, r2
 80072ec:	d902      	bls.n	80072f4 <memmove+0x10>
 80072ee:	4284      	cmp	r4, r0
 80072f0:	4623      	mov	r3, r4
 80072f2:	d807      	bhi.n	8007304 <memmove+0x20>
 80072f4:	1e43      	subs	r3, r0, #1
 80072f6:	42a1      	cmp	r1, r4
 80072f8:	d008      	beq.n	800730c <memmove+0x28>
 80072fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007302:	e7f8      	b.n	80072f6 <memmove+0x12>
 8007304:	4402      	add	r2, r0
 8007306:	4601      	mov	r1, r0
 8007308:	428a      	cmp	r2, r1
 800730a:	d100      	bne.n	800730e <memmove+0x2a>
 800730c:	bd10      	pop	{r4, pc}
 800730e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007316:	e7f7      	b.n	8007308 <memmove+0x24>

08007318 <__malloc_lock>:
 8007318:	4801      	ldr	r0, [pc, #4]	; (8007320 <__malloc_lock+0x8>)
 800731a:	f000 bc1f 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 800731e:	bf00      	nop
 8007320:	20000368 	.word	0x20000368

08007324 <__malloc_unlock>:
 8007324:	4801      	ldr	r0, [pc, #4]	; (800732c <__malloc_unlock+0x8>)
 8007326:	f000 bc1a 	b.w	8007b5e <__retarget_lock_release_recursive>
 800732a:	bf00      	nop
 800732c:	20000368 	.word	0x20000368

08007330 <_realloc_r>:
 8007330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007334:	4680      	mov	r8, r0
 8007336:	4614      	mov	r4, r2
 8007338:	460e      	mov	r6, r1
 800733a:	b921      	cbnz	r1, 8007346 <_realloc_r+0x16>
 800733c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	4611      	mov	r1, r2
 8007342:	f7ff bdad 	b.w	8006ea0 <_malloc_r>
 8007346:	b92a      	cbnz	r2, 8007354 <_realloc_r+0x24>
 8007348:	f7ff fd3e 	bl	8006dc8 <_free_r>
 800734c:	4625      	mov	r5, r4
 800734e:	4628      	mov	r0, r5
 8007350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007354:	f000 fc6a 	bl	8007c2c <_malloc_usable_size_r>
 8007358:	4284      	cmp	r4, r0
 800735a:	4607      	mov	r7, r0
 800735c:	d802      	bhi.n	8007364 <_realloc_r+0x34>
 800735e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007362:	d812      	bhi.n	800738a <_realloc_r+0x5a>
 8007364:	4621      	mov	r1, r4
 8007366:	4640      	mov	r0, r8
 8007368:	f7ff fd9a 	bl	8006ea0 <_malloc_r>
 800736c:	4605      	mov	r5, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	d0ed      	beq.n	800734e <_realloc_r+0x1e>
 8007372:	42bc      	cmp	r4, r7
 8007374:	4622      	mov	r2, r4
 8007376:	4631      	mov	r1, r6
 8007378:	bf28      	it	cs
 800737a:	463a      	movcs	r2, r7
 800737c:	f7fd fe64 	bl	8005048 <memcpy>
 8007380:	4631      	mov	r1, r6
 8007382:	4640      	mov	r0, r8
 8007384:	f7ff fd20 	bl	8006dc8 <_free_r>
 8007388:	e7e1      	b.n	800734e <_realloc_r+0x1e>
 800738a:	4635      	mov	r5, r6
 800738c:	e7df      	b.n	800734e <_realloc_r+0x1e>

0800738e <__sfputc_r>:
 800738e:	6893      	ldr	r3, [r2, #8]
 8007390:	3b01      	subs	r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	b410      	push	{r4}
 8007396:	6093      	str	r3, [r2, #8]
 8007398:	da08      	bge.n	80073ac <__sfputc_r+0x1e>
 800739a:	6994      	ldr	r4, [r2, #24]
 800739c:	42a3      	cmp	r3, r4
 800739e:	db01      	blt.n	80073a4 <__sfputc_r+0x16>
 80073a0:	290a      	cmp	r1, #10
 80073a2:	d103      	bne.n	80073ac <__sfputc_r+0x1e>
 80073a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a8:	f000 b94a 	b.w	8007640 <__swbuf_r>
 80073ac:	6813      	ldr	r3, [r2, #0]
 80073ae:	1c58      	adds	r0, r3, #1
 80073b0:	6010      	str	r0, [r2, #0]
 80073b2:	7019      	strb	r1, [r3, #0]
 80073b4:	4608      	mov	r0, r1
 80073b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <__sfputs_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	4614      	mov	r4, r2
 80073c4:	18d5      	adds	r5, r2, r3
 80073c6:	42ac      	cmp	r4, r5
 80073c8:	d101      	bne.n	80073ce <__sfputs_r+0x12>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e007      	b.n	80073de <__sfputs_r+0x22>
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	463a      	mov	r2, r7
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff ffda 	bl	800738e <__sfputc_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d1f3      	bne.n	80073c6 <__sfputs_r+0xa>
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073e0 <_vfiprintf_r>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	460d      	mov	r5, r1
 80073e6:	b09d      	sub	sp, #116	; 0x74
 80073e8:	4614      	mov	r4, r2
 80073ea:	4698      	mov	r8, r3
 80073ec:	4606      	mov	r6, r0
 80073ee:	b118      	cbz	r0, 80073f8 <_vfiprintf_r+0x18>
 80073f0:	6983      	ldr	r3, [r0, #24]
 80073f2:	b90b      	cbnz	r3, 80073f8 <_vfiprintf_r+0x18>
 80073f4:	f000 fb14 	bl	8007a20 <__sinit>
 80073f8:	4b89      	ldr	r3, [pc, #548]	; (8007620 <_vfiprintf_r+0x240>)
 80073fa:	429d      	cmp	r5, r3
 80073fc:	d11b      	bne.n	8007436 <_vfiprintf_r+0x56>
 80073fe:	6875      	ldr	r5, [r6, #4]
 8007400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007402:	07d9      	lsls	r1, r3, #31
 8007404:	d405      	bmi.n	8007412 <_vfiprintf_r+0x32>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	059a      	lsls	r2, r3, #22
 800740a:	d402      	bmi.n	8007412 <_vfiprintf_r+0x32>
 800740c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800740e:	f000 fba5 	bl	8007b5c <__retarget_lock_acquire_recursive>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	071b      	lsls	r3, r3, #28
 8007416:	d501      	bpl.n	800741c <_vfiprintf_r+0x3c>
 8007418:	692b      	ldr	r3, [r5, #16]
 800741a:	b9eb      	cbnz	r3, 8007458 <_vfiprintf_r+0x78>
 800741c:	4629      	mov	r1, r5
 800741e:	4630      	mov	r0, r6
 8007420:	f000 f96e 	bl	8007700 <__swsetup_r>
 8007424:	b1c0      	cbz	r0, 8007458 <_vfiprintf_r+0x78>
 8007426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007428:	07dc      	lsls	r4, r3, #31
 800742a:	d50e      	bpl.n	800744a <_vfiprintf_r+0x6a>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b01d      	add	sp, #116	; 0x74
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	4b7b      	ldr	r3, [pc, #492]	; (8007624 <_vfiprintf_r+0x244>)
 8007438:	429d      	cmp	r5, r3
 800743a:	d101      	bne.n	8007440 <_vfiprintf_r+0x60>
 800743c:	68b5      	ldr	r5, [r6, #8]
 800743e:	e7df      	b.n	8007400 <_vfiprintf_r+0x20>
 8007440:	4b79      	ldr	r3, [pc, #484]	; (8007628 <_vfiprintf_r+0x248>)
 8007442:	429d      	cmp	r5, r3
 8007444:	bf08      	it	eq
 8007446:	68f5      	ldreq	r5, [r6, #12]
 8007448:	e7da      	b.n	8007400 <_vfiprintf_r+0x20>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	0598      	lsls	r0, r3, #22
 800744e:	d4ed      	bmi.n	800742c <_vfiprintf_r+0x4c>
 8007450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007452:	f000 fb84 	bl	8007b5e <__retarget_lock_release_recursive>
 8007456:	e7e9      	b.n	800742c <_vfiprintf_r+0x4c>
 8007458:	2300      	movs	r3, #0
 800745a:	9309      	str	r3, [sp, #36]	; 0x24
 800745c:	2320      	movs	r3, #32
 800745e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007462:	f8cd 800c 	str.w	r8, [sp, #12]
 8007466:	2330      	movs	r3, #48	; 0x30
 8007468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800762c <_vfiprintf_r+0x24c>
 800746c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007470:	f04f 0901 	mov.w	r9, #1
 8007474:	4623      	mov	r3, r4
 8007476:	469a      	mov	sl, r3
 8007478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747c:	b10a      	cbz	r2, 8007482 <_vfiprintf_r+0xa2>
 800747e:	2a25      	cmp	r2, #37	; 0x25
 8007480:	d1f9      	bne.n	8007476 <_vfiprintf_r+0x96>
 8007482:	ebba 0b04 	subs.w	fp, sl, r4
 8007486:	d00b      	beq.n	80074a0 <_vfiprintf_r+0xc0>
 8007488:	465b      	mov	r3, fp
 800748a:	4622      	mov	r2, r4
 800748c:	4629      	mov	r1, r5
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff ff94 	bl	80073bc <__sfputs_r>
 8007494:	3001      	adds	r0, #1
 8007496:	f000 80aa 	beq.w	80075ee <_vfiprintf_r+0x20e>
 800749a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800749c:	445a      	add	r2, fp
 800749e:	9209      	str	r2, [sp, #36]	; 0x24
 80074a0:	f89a 3000 	ldrb.w	r3, [sl]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 80a2 	beq.w	80075ee <_vfiprintf_r+0x20e>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 32ff 	mov.w	r2, #4294967295
 80074b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b4:	f10a 0a01 	add.w	sl, sl, #1
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	9307      	str	r3, [sp, #28]
 80074bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074c0:	931a      	str	r3, [sp, #104]	; 0x68
 80074c2:	4654      	mov	r4, sl
 80074c4:	2205      	movs	r2, #5
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	4858      	ldr	r0, [pc, #352]	; (800762c <_vfiprintf_r+0x24c>)
 80074cc:	f7f8 fe98 	bl	8000200 <memchr>
 80074d0:	9a04      	ldr	r2, [sp, #16]
 80074d2:	b9d8      	cbnz	r0, 800750c <_vfiprintf_r+0x12c>
 80074d4:	06d1      	lsls	r1, r2, #27
 80074d6:	bf44      	itt	mi
 80074d8:	2320      	movmi	r3, #32
 80074da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074de:	0713      	lsls	r3, r2, #28
 80074e0:	bf44      	itt	mi
 80074e2:	232b      	movmi	r3, #43	; 0x2b
 80074e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074e8:	f89a 3000 	ldrb.w	r3, [sl]
 80074ec:	2b2a      	cmp	r3, #42	; 0x2a
 80074ee:	d015      	beq.n	800751c <_vfiprintf_r+0x13c>
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	4654      	mov	r4, sl
 80074f4:	2000      	movs	r0, #0
 80074f6:	f04f 0c0a 	mov.w	ip, #10
 80074fa:	4621      	mov	r1, r4
 80074fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007500:	3b30      	subs	r3, #48	; 0x30
 8007502:	2b09      	cmp	r3, #9
 8007504:	d94e      	bls.n	80075a4 <_vfiprintf_r+0x1c4>
 8007506:	b1b0      	cbz	r0, 8007536 <_vfiprintf_r+0x156>
 8007508:	9207      	str	r2, [sp, #28]
 800750a:	e014      	b.n	8007536 <_vfiprintf_r+0x156>
 800750c:	eba0 0308 	sub.w	r3, r0, r8
 8007510:	fa09 f303 	lsl.w	r3, r9, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	9304      	str	r3, [sp, #16]
 8007518:	46a2      	mov	sl, r4
 800751a:	e7d2      	b.n	80074c2 <_vfiprintf_r+0xe2>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9103      	str	r1, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfbb      	ittet	lt
 8007528:	425b      	neglt	r3, r3
 800752a:	f042 0202 	orrlt.w	r2, r2, #2
 800752e:	9307      	strge	r3, [sp, #28]
 8007530:	9307      	strlt	r3, [sp, #28]
 8007532:	bfb8      	it	lt
 8007534:	9204      	strlt	r2, [sp, #16]
 8007536:	7823      	ldrb	r3, [r4, #0]
 8007538:	2b2e      	cmp	r3, #46	; 0x2e
 800753a:	d10c      	bne.n	8007556 <_vfiprintf_r+0x176>
 800753c:	7863      	ldrb	r3, [r4, #1]
 800753e:	2b2a      	cmp	r3, #42	; 0x2a
 8007540:	d135      	bne.n	80075ae <_vfiprintf_r+0x1ce>
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	9203      	str	r2, [sp, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfb8      	it	lt
 800754e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007552:	3402      	adds	r4, #2
 8007554:	9305      	str	r3, [sp, #20]
 8007556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800763c <_vfiprintf_r+0x25c>
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	2203      	movs	r2, #3
 800755e:	4650      	mov	r0, sl
 8007560:	f7f8 fe4e 	bl	8000200 <memchr>
 8007564:	b140      	cbz	r0, 8007578 <_vfiprintf_r+0x198>
 8007566:	2340      	movs	r3, #64	; 0x40
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	fa03 f000 	lsl.w	r0, r3, r0
 8007570:	9b04      	ldr	r3, [sp, #16]
 8007572:	4303      	orrs	r3, r0
 8007574:	3401      	adds	r4, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	482c      	ldr	r0, [pc, #176]	; (8007630 <_vfiprintf_r+0x250>)
 800757e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007582:	2206      	movs	r2, #6
 8007584:	f7f8 fe3c 	bl	8000200 <memchr>
 8007588:	2800      	cmp	r0, #0
 800758a:	d03f      	beq.n	800760c <_vfiprintf_r+0x22c>
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <_vfiprintf_r+0x254>)
 800758e:	bb1b      	cbnz	r3, 80075d8 <_vfiprintf_r+0x1f8>
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	3307      	adds	r3, #7
 8007594:	f023 0307 	bic.w	r3, r3, #7
 8007598:	3308      	adds	r3, #8
 800759a:	9303      	str	r3, [sp, #12]
 800759c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759e:	443b      	add	r3, r7
 80075a0:	9309      	str	r3, [sp, #36]	; 0x24
 80075a2:	e767      	b.n	8007474 <_vfiprintf_r+0x94>
 80075a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a8:	460c      	mov	r4, r1
 80075aa:	2001      	movs	r0, #1
 80075ac:	e7a5      	b.n	80074fa <_vfiprintf_r+0x11a>
 80075ae:	2300      	movs	r3, #0
 80075b0:	3401      	adds	r4, #1
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	4619      	mov	r1, r3
 80075b6:	f04f 0c0a 	mov.w	ip, #10
 80075ba:	4620      	mov	r0, r4
 80075bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c0:	3a30      	subs	r2, #48	; 0x30
 80075c2:	2a09      	cmp	r2, #9
 80075c4:	d903      	bls.n	80075ce <_vfiprintf_r+0x1ee>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0c5      	beq.n	8007556 <_vfiprintf_r+0x176>
 80075ca:	9105      	str	r1, [sp, #20]
 80075cc:	e7c3      	b.n	8007556 <_vfiprintf_r+0x176>
 80075ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d2:	4604      	mov	r4, r0
 80075d4:	2301      	movs	r3, #1
 80075d6:	e7f0      	b.n	80075ba <_vfiprintf_r+0x1da>
 80075d8:	ab03      	add	r3, sp, #12
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	462a      	mov	r2, r5
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <_vfiprintf_r+0x258>)
 80075e0:	a904      	add	r1, sp, #16
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7fd fde6 	bl	80051b4 <_printf_float>
 80075e8:	4607      	mov	r7, r0
 80075ea:	1c78      	adds	r0, r7, #1
 80075ec:	d1d6      	bne.n	800759c <_vfiprintf_r+0x1bc>
 80075ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	d405      	bmi.n	8007600 <_vfiprintf_r+0x220>
 80075f4:	89ab      	ldrh	r3, [r5, #12]
 80075f6:	059a      	lsls	r2, r3, #22
 80075f8:	d402      	bmi.n	8007600 <_vfiprintf_r+0x220>
 80075fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fc:	f000 faaf 	bl	8007b5e <__retarget_lock_release_recursive>
 8007600:	89ab      	ldrh	r3, [r5, #12]
 8007602:	065b      	lsls	r3, r3, #25
 8007604:	f53f af12 	bmi.w	800742c <_vfiprintf_r+0x4c>
 8007608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800760a:	e711      	b.n	8007430 <_vfiprintf_r+0x50>
 800760c:	ab03      	add	r3, sp, #12
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	462a      	mov	r2, r5
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <_vfiprintf_r+0x258>)
 8007614:	a904      	add	r1, sp, #16
 8007616:	4630      	mov	r0, r6
 8007618:	f7fe f870 	bl	80056fc <_printf_i>
 800761c:	e7e4      	b.n	80075e8 <_vfiprintf_r+0x208>
 800761e:	bf00      	nop
 8007620:	080082cc 	.word	0x080082cc
 8007624:	080082ec 	.word	0x080082ec
 8007628:	080082ac 	.word	0x080082ac
 800762c:	08008154 	.word	0x08008154
 8007630:	0800815e 	.word	0x0800815e
 8007634:	080051b5 	.word	0x080051b5
 8007638:	080073bd 	.word	0x080073bd
 800763c:	0800815a 	.word	0x0800815a

08007640 <__swbuf_r>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	460e      	mov	r6, r1
 8007644:	4614      	mov	r4, r2
 8007646:	4605      	mov	r5, r0
 8007648:	b118      	cbz	r0, 8007652 <__swbuf_r+0x12>
 800764a:	6983      	ldr	r3, [r0, #24]
 800764c:	b90b      	cbnz	r3, 8007652 <__swbuf_r+0x12>
 800764e:	f000 f9e7 	bl	8007a20 <__sinit>
 8007652:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <__swbuf_r+0x98>)
 8007654:	429c      	cmp	r4, r3
 8007656:	d12b      	bne.n	80076b0 <__swbuf_r+0x70>
 8007658:	686c      	ldr	r4, [r5, #4]
 800765a:	69a3      	ldr	r3, [r4, #24]
 800765c:	60a3      	str	r3, [r4, #8]
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	071a      	lsls	r2, r3, #28
 8007662:	d52f      	bpl.n	80076c4 <__swbuf_r+0x84>
 8007664:	6923      	ldr	r3, [r4, #16]
 8007666:	b36b      	cbz	r3, 80076c4 <__swbuf_r+0x84>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1ac0      	subs	r0, r0, r3
 800766e:	6963      	ldr	r3, [r4, #20]
 8007670:	b2f6      	uxtb	r6, r6
 8007672:	4283      	cmp	r3, r0
 8007674:	4637      	mov	r7, r6
 8007676:	dc04      	bgt.n	8007682 <__swbuf_r+0x42>
 8007678:	4621      	mov	r1, r4
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f93c 	bl	80078f8 <_fflush_r>
 8007680:	bb30      	cbnz	r0, 80076d0 <__swbuf_r+0x90>
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	3b01      	subs	r3, #1
 8007686:	60a3      	str	r3, [r4, #8]
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	6022      	str	r2, [r4, #0]
 800768e:	701e      	strb	r6, [r3, #0]
 8007690:	6963      	ldr	r3, [r4, #20]
 8007692:	3001      	adds	r0, #1
 8007694:	4283      	cmp	r3, r0
 8007696:	d004      	beq.n	80076a2 <__swbuf_r+0x62>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	07db      	lsls	r3, r3, #31
 800769c:	d506      	bpl.n	80076ac <__swbuf_r+0x6c>
 800769e:	2e0a      	cmp	r6, #10
 80076a0:	d104      	bne.n	80076ac <__swbuf_r+0x6c>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 f927 	bl	80078f8 <_fflush_r>
 80076aa:	b988      	cbnz	r0, 80076d0 <__swbuf_r+0x90>
 80076ac:	4638      	mov	r0, r7
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <__swbuf_r+0x9c>)
 80076b2:	429c      	cmp	r4, r3
 80076b4:	d101      	bne.n	80076ba <__swbuf_r+0x7a>
 80076b6:	68ac      	ldr	r4, [r5, #8]
 80076b8:	e7cf      	b.n	800765a <__swbuf_r+0x1a>
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <__swbuf_r+0xa0>)
 80076bc:	429c      	cmp	r4, r3
 80076be:	bf08      	it	eq
 80076c0:	68ec      	ldreq	r4, [r5, #12]
 80076c2:	e7ca      	b.n	800765a <__swbuf_r+0x1a>
 80076c4:	4621      	mov	r1, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 f81a 	bl	8007700 <__swsetup_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d0cb      	beq.n	8007668 <__swbuf_r+0x28>
 80076d0:	f04f 37ff 	mov.w	r7, #4294967295
 80076d4:	e7ea      	b.n	80076ac <__swbuf_r+0x6c>
 80076d6:	bf00      	nop
 80076d8:	080082cc 	.word	0x080082cc
 80076dc:	080082ec 	.word	0x080082ec
 80076e0:	080082ac 	.word	0x080082ac

080076e4 <__ascii_wctomb>:
 80076e4:	b149      	cbz	r1, 80076fa <__ascii_wctomb+0x16>
 80076e6:	2aff      	cmp	r2, #255	; 0xff
 80076e8:	bf85      	ittet	hi
 80076ea:	238a      	movhi	r3, #138	; 0x8a
 80076ec:	6003      	strhi	r3, [r0, #0]
 80076ee:	700a      	strbls	r2, [r1, #0]
 80076f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80076f4:	bf98      	it	ls
 80076f6:	2001      	movls	r0, #1
 80076f8:	4770      	bx	lr
 80076fa:	4608      	mov	r0, r1
 80076fc:	4770      	bx	lr
	...

08007700 <__swsetup_r>:
 8007700:	4b32      	ldr	r3, [pc, #200]	; (80077cc <__swsetup_r+0xcc>)
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	681d      	ldr	r5, [r3, #0]
 8007706:	4606      	mov	r6, r0
 8007708:	460c      	mov	r4, r1
 800770a:	b125      	cbz	r5, 8007716 <__swsetup_r+0x16>
 800770c:	69ab      	ldr	r3, [r5, #24]
 800770e:	b913      	cbnz	r3, 8007716 <__swsetup_r+0x16>
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f985 	bl	8007a20 <__sinit>
 8007716:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <__swsetup_r+0xd0>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d10f      	bne.n	800773c <__swsetup_r+0x3c>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007724:	0719      	lsls	r1, r3, #28
 8007726:	d42c      	bmi.n	8007782 <__swsetup_r+0x82>
 8007728:	06dd      	lsls	r5, r3, #27
 800772a:	d411      	bmi.n	8007750 <__swsetup_r+0x50>
 800772c:	2309      	movs	r3, #9
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	f04f 30ff 	mov.w	r0, #4294967295
 800773a:	e03e      	b.n	80077ba <__swsetup_r+0xba>
 800773c:	4b25      	ldr	r3, [pc, #148]	; (80077d4 <__swsetup_r+0xd4>)
 800773e:	429c      	cmp	r4, r3
 8007740:	d101      	bne.n	8007746 <__swsetup_r+0x46>
 8007742:	68ac      	ldr	r4, [r5, #8]
 8007744:	e7eb      	b.n	800771e <__swsetup_r+0x1e>
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <__swsetup_r+0xd8>)
 8007748:	429c      	cmp	r4, r3
 800774a:	bf08      	it	eq
 800774c:	68ec      	ldreq	r4, [r5, #12]
 800774e:	e7e6      	b.n	800771e <__swsetup_r+0x1e>
 8007750:	0758      	lsls	r0, r3, #29
 8007752:	d512      	bpl.n	800777a <__swsetup_r+0x7a>
 8007754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007756:	b141      	cbz	r1, 800776a <__swsetup_r+0x6a>
 8007758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775c:	4299      	cmp	r1, r3
 800775e:	d002      	beq.n	8007766 <__swsetup_r+0x66>
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff fb31 	bl	8006dc8 <_free_r>
 8007766:	2300      	movs	r3, #0
 8007768:	6363      	str	r3, [r4, #52]	; 0x34
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	2300      	movs	r3, #0
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0308 	orr.w	r3, r3, #8
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	b94b      	cbnz	r3, 800779a <__swsetup_r+0x9a>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d003      	beq.n	800779a <__swsetup_r+0x9a>
 8007792:	4621      	mov	r1, r4
 8007794:	4630      	mov	r0, r6
 8007796:	f000 fa09 	bl	8007bac <__smakebuf_r>
 800779a:	89a0      	ldrh	r0, [r4, #12]
 800779c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077a0:	f010 0301 	ands.w	r3, r0, #1
 80077a4:	d00a      	beq.n	80077bc <__swsetup_r+0xbc>
 80077a6:	2300      	movs	r3, #0
 80077a8:	60a3      	str	r3, [r4, #8]
 80077aa:	6963      	ldr	r3, [r4, #20]
 80077ac:	425b      	negs	r3, r3
 80077ae:	61a3      	str	r3, [r4, #24]
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	b943      	cbnz	r3, 80077c6 <__swsetup_r+0xc6>
 80077b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077b8:	d1ba      	bne.n	8007730 <__swsetup_r+0x30>
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	0781      	lsls	r1, r0, #30
 80077be:	bf58      	it	pl
 80077c0:	6963      	ldrpl	r3, [r4, #20]
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	e7f4      	b.n	80077b0 <__swsetup_r+0xb0>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e7f7      	b.n	80077ba <__swsetup_r+0xba>
 80077ca:	bf00      	nop
 80077cc:	20000024 	.word	0x20000024
 80077d0:	080082cc 	.word	0x080082cc
 80077d4:	080082ec 	.word	0x080082ec
 80077d8:	080082ac 	.word	0x080082ac

080077dc <abort>:
 80077dc:	b508      	push	{r3, lr}
 80077de:	2006      	movs	r0, #6
 80077e0:	f000 fa54 	bl	8007c8c <raise>
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7fa fcf7 	bl	80021d8 <_exit>
	...

080077ec <__sflush_r>:
 80077ec:	898a      	ldrh	r2, [r1, #12]
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	4605      	mov	r5, r0
 80077f4:	0710      	lsls	r0, r2, #28
 80077f6:	460c      	mov	r4, r1
 80077f8:	d458      	bmi.n	80078ac <__sflush_r+0xc0>
 80077fa:	684b      	ldr	r3, [r1, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dc05      	bgt.n	800780c <__sflush_r+0x20>
 8007800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	dc02      	bgt.n	800780c <__sflush_r+0x20>
 8007806:	2000      	movs	r0, #0
 8007808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800780e:	2e00      	cmp	r6, #0
 8007810:	d0f9      	beq.n	8007806 <__sflush_r+0x1a>
 8007812:	2300      	movs	r3, #0
 8007814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007818:	682f      	ldr	r7, [r5, #0]
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	d032      	beq.n	8007884 <__sflush_r+0x98>
 800781e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	075a      	lsls	r2, r3, #29
 8007824:	d505      	bpl.n	8007832 <__sflush_r+0x46>
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	1ac0      	subs	r0, r0, r3
 800782a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800782c:	b10b      	cbz	r3, 8007832 <__sflush_r+0x46>
 800782e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007830:	1ac0      	subs	r0, r0, r3
 8007832:	2300      	movs	r3, #0
 8007834:	4602      	mov	r2, r0
 8007836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007838:	6a21      	ldr	r1, [r4, #32]
 800783a:	4628      	mov	r0, r5
 800783c:	47b0      	blx	r6
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	d106      	bne.n	8007852 <__sflush_r+0x66>
 8007844:	6829      	ldr	r1, [r5, #0]
 8007846:	291d      	cmp	r1, #29
 8007848:	d82c      	bhi.n	80078a4 <__sflush_r+0xb8>
 800784a:	4a2a      	ldr	r2, [pc, #168]	; (80078f4 <__sflush_r+0x108>)
 800784c:	40ca      	lsrs	r2, r1
 800784e:	07d6      	lsls	r6, r2, #31
 8007850:	d528      	bpl.n	80078a4 <__sflush_r+0xb8>
 8007852:	2200      	movs	r2, #0
 8007854:	6062      	str	r2, [r4, #4]
 8007856:	04d9      	lsls	r1, r3, #19
 8007858:	6922      	ldr	r2, [r4, #16]
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	d504      	bpl.n	8007868 <__sflush_r+0x7c>
 800785e:	1c42      	adds	r2, r0, #1
 8007860:	d101      	bne.n	8007866 <__sflush_r+0x7a>
 8007862:	682b      	ldr	r3, [r5, #0]
 8007864:	b903      	cbnz	r3, 8007868 <__sflush_r+0x7c>
 8007866:	6560      	str	r0, [r4, #84]	; 0x54
 8007868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786a:	602f      	str	r7, [r5, #0]
 800786c:	2900      	cmp	r1, #0
 800786e:	d0ca      	beq.n	8007806 <__sflush_r+0x1a>
 8007870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <__sflush_r+0x92>
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff faa5 	bl	8006dc8 <_free_r>
 800787e:	2000      	movs	r0, #0
 8007880:	6360      	str	r0, [r4, #52]	; 0x34
 8007882:	e7c1      	b.n	8007808 <__sflush_r+0x1c>
 8007884:	6a21      	ldr	r1, [r4, #32]
 8007886:	2301      	movs	r3, #1
 8007888:	4628      	mov	r0, r5
 800788a:	47b0      	blx	r6
 800788c:	1c41      	adds	r1, r0, #1
 800788e:	d1c7      	bne.n	8007820 <__sflush_r+0x34>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0c4      	beq.n	8007820 <__sflush_r+0x34>
 8007896:	2b1d      	cmp	r3, #29
 8007898:	d001      	beq.n	800789e <__sflush_r+0xb2>
 800789a:	2b16      	cmp	r3, #22
 800789c:	d101      	bne.n	80078a2 <__sflush_r+0xb6>
 800789e:	602f      	str	r7, [r5, #0]
 80078a0:	e7b1      	b.n	8007806 <__sflush_r+0x1a>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	e7ad      	b.n	8007808 <__sflush_r+0x1c>
 80078ac:	690f      	ldr	r7, [r1, #16]
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	d0a9      	beq.n	8007806 <__sflush_r+0x1a>
 80078b2:	0793      	lsls	r3, r2, #30
 80078b4:	680e      	ldr	r6, [r1, #0]
 80078b6:	bf08      	it	eq
 80078b8:	694b      	ldreq	r3, [r1, #20]
 80078ba:	600f      	str	r7, [r1, #0]
 80078bc:	bf18      	it	ne
 80078be:	2300      	movne	r3, #0
 80078c0:	eba6 0807 	sub.w	r8, r6, r7
 80078c4:	608b      	str	r3, [r1, #8]
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	dd9c      	ble.n	8007806 <__sflush_r+0x1a>
 80078cc:	6a21      	ldr	r1, [r4, #32]
 80078ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078d0:	4643      	mov	r3, r8
 80078d2:	463a      	mov	r2, r7
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b0      	blx	r6
 80078d8:	2800      	cmp	r0, #0
 80078da:	dc06      	bgt.n	80078ea <__sflush_r+0xfe>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e78e      	b.n	8007808 <__sflush_r+0x1c>
 80078ea:	4407      	add	r7, r0
 80078ec:	eba8 0800 	sub.w	r8, r8, r0
 80078f0:	e7e9      	b.n	80078c6 <__sflush_r+0xda>
 80078f2:	bf00      	nop
 80078f4:	20400001 	.word	0x20400001

080078f8 <_fflush_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	b913      	cbnz	r3, 8007908 <_fflush_r+0x10>
 8007902:	2500      	movs	r5, #0
 8007904:	4628      	mov	r0, r5
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	b118      	cbz	r0, 8007912 <_fflush_r+0x1a>
 800790a:	6983      	ldr	r3, [r0, #24]
 800790c:	b90b      	cbnz	r3, 8007912 <_fflush_r+0x1a>
 800790e:	f000 f887 	bl	8007a20 <__sinit>
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <_fflush_r+0x6c>)
 8007914:	429c      	cmp	r4, r3
 8007916:	d11b      	bne.n	8007950 <_fflush_r+0x58>
 8007918:	686c      	ldr	r4, [r5, #4]
 800791a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ef      	beq.n	8007902 <_fflush_r+0xa>
 8007922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007924:	07d0      	lsls	r0, r2, #31
 8007926:	d404      	bmi.n	8007932 <_fflush_r+0x3a>
 8007928:	0599      	lsls	r1, r3, #22
 800792a:	d402      	bmi.n	8007932 <_fflush_r+0x3a>
 800792c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800792e:	f000 f915 	bl	8007b5c <__retarget_lock_acquire_recursive>
 8007932:	4628      	mov	r0, r5
 8007934:	4621      	mov	r1, r4
 8007936:	f7ff ff59 	bl	80077ec <__sflush_r>
 800793a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	4605      	mov	r5, r0
 8007940:	d4e0      	bmi.n	8007904 <_fflush_r+0xc>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d4dd      	bmi.n	8007904 <_fflush_r+0xc>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f000 f908 	bl	8007b5e <__retarget_lock_release_recursive>
 800794e:	e7d9      	b.n	8007904 <_fflush_r+0xc>
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <_fflush_r+0x70>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <_fflush_r+0x62>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7df      	b.n	800791a <_fflush_r+0x22>
 800795a:	4b04      	ldr	r3, [pc, #16]	; (800796c <_fflush_r+0x74>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7da      	b.n	800791a <_fflush_r+0x22>
 8007964:	080082cc 	.word	0x080082cc
 8007968:	080082ec 	.word	0x080082ec
 800796c:	080082ac 	.word	0x080082ac

08007970 <std>:
 8007970:	2300      	movs	r3, #0
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	e9c0 3300 	strd	r3, r3, [r0]
 800797a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800797e:	6083      	str	r3, [r0, #8]
 8007980:	8181      	strh	r1, [r0, #12]
 8007982:	6643      	str	r3, [r0, #100]	; 0x64
 8007984:	81c2      	strh	r2, [r0, #14]
 8007986:	6183      	str	r3, [r0, #24]
 8007988:	4619      	mov	r1, r3
 800798a:	2208      	movs	r2, #8
 800798c:	305c      	adds	r0, #92	; 0x5c
 800798e:	f7fd fb69 	bl	8005064 <memset>
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <std+0x38>)
 8007994:	6263      	str	r3, [r4, #36]	; 0x24
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <std+0x3c>)
 8007998:	62a3      	str	r3, [r4, #40]	; 0x28
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <std+0x40>)
 800799c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x44>)
 80079a0:	6224      	str	r4, [r4, #32]
 80079a2:	6323      	str	r3, [r4, #48]	; 0x30
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop
 80079a8:	08007cc5 	.word	0x08007cc5
 80079ac:	08007ce7 	.word	0x08007ce7
 80079b0:	08007d1f 	.word	0x08007d1f
 80079b4:	08007d43 	.word	0x08007d43

080079b8 <_cleanup_r>:
 80079b8:	4901      	ldr	r1, [pc, #4]	; (80079c0 <_cleanup_r+0x8>)
 80079ba:	f000 b8af 	b.w	8007b1c <_fwalk_reent>
 80079be:	bf00      	nop
 80079c0:	080078f9 	.word	0x080078f9

080079c4 <__sfmoreglue>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	2268      	movs	r2, #104	; 0x68
 80079c8:	1e4d      	subs	r5, r1, #1
 80079ca:	4355      	muls	r5, r2
 80079cc:	460e      	mov	r6, r1
 80079ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079d2:	f7ff fa65 	bl	8006ea0 <_malloc_r>
 80079d6:	4604      	mov	r4, r0
 80079d8:	b140      	cbz	r0, 80079ec <__sfmoreglue+0x28>
 80079da:	2100      	movs	r1, #0
 80079dc:	e9c0 1600 	strd	r1, r6, [r0]
 80079e0:	300c      	adds	r0, #12
 80079e2:	60a0      	str	r0, [r4, #8]
 80079e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079e8:	f7fd fb3c 	bl	8005064 <memset>
 80079ec:	4620      	mov	r0, r4
 80079ee:	bd70      	pop	{r4, r5, r6, pc}

080079f0 <__sfp_lock_acquire>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__sfp_lock_acquire+0x8>)
 80079f2:	f000 b8b3 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	20000369 	.word	0x20000369

080079fc <__sfp_lock_release>:
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <__sfp_lock_release+0x8>)
 80079fe:	f000 b8ae 	b.w	8007b5e <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	20000369 	.word	0x20000369

08007a08 <__sinit_lock_acquire>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sinit_lock_acquire+0x8>)
 8007a0a:	f000 b8a7 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	2000036a 	.word	0x2000036a

08007a14 <__sinit_lock_release>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sinit_lock_release+0x8>)
 8007a16:	f000 b8a2 	b.w	8007b5e <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	2000036a 	.word	0x2000036a

08007a20 <__sinit>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	f7ff fff0 	bl	8007a08 <__sinit_lock_acquire>
 8007a28:	69a3      	ldr	r3, [r4, #24]
 8007a2a:	b11b      	cbz	r3, 8007a34 <__sinit+0x14>
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	f7ff bff0 	b.w	8007a14 <__sinit_lock_release>
 8007a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a38:	6523      	str	r3, [r4, #80]	; 0x50
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <__sinit+0x68>)
 8007a3c:	4a13      	ldr	r2, [pc, #76]	; (8007a8c <__sinit+0x6c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	bf04      	itt	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	61a3      	streq	r3, [r4, #24]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 f820 	bl	8007a90 <__sfp>
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f81c 	bl	8007a90 <__sfp>
 8007a58:	60a0      	str	r0, [r4, #8]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f818 	bl	8007a90 <__sfp>
 8007a60:	2200      	movs	r2, #0
 8007a62:	60e0      	str	r0, [r4, #12]
 8007a64:	2104      	movs	r1, #4
 8007a66:	6860      	ldr	r0, [r4, #4]
 8007a68:	f7ff ff82 	bl	8007970 <std>
 8007a6c:	68a0      	ldr	r0, [r4, #8]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	2109      	movs	r1, #9
 8007a72:	f7ff ff7d 	bl	8007970 <std>
 8007a76:	68e0      	ldr	r0, [r4, #12]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	2112      	movs	r1, #18
 8007a7c:	f7ff ff78 	bl	8007970 <std>
 8007a80:	2301      	movs	r3, #1
 8007a82:	61a3      	str	r3, [r4, #24]
 8007a84:	e7d2      	b.n	8007a2c <__sinit+0xc>
 8007a86:	bf00      	nop
 8007a88:	08007f30 	.word	0x08007f30
 8007a8c:	080079b9 	.word	0x080079b9

08007a90 <__sfp>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	4607      	mov	r7, r0
 8007a94:	f7ff ffac 	bl	80079f0 <__sfp_lock_acquire>
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <__sfp+0x84>)
 8007a9a:	681e      	ldr	r6, [r3, #0]
 8007a9c:	69b3      	ldr	r3, [r6, #24]
 8007a9e:	b913      	cbnz	r3, 8007aa6 <__sfp+0x16>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ffbd 	bl	8007a20 <__sinit>
 8007aa6:	3648      	adds	r6, #72	; 0x48
 8007aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	d503      	bpl.n	8007ab8 <__sfp+0x28>
 8007ab0:	6833      	ldr	r3, [r6, #0]
 8007ab2:	b30b      	cbz	r3, 8007af8 <__sfp+0x68>
 8007ab4:	6836      	ldr	r6, [r6, #0]
 8007ab6:	e7f7      	b.n	8007aa8 <__sfp+0x18>
 8007ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007abc:	b9d5      	cbnz	r5, 8007af4 <__sfp+0x64>
 8007abe:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <__sfp+0x88>)
 8007ac0:	60e3      	str	r3, [r4, #12]
 8007ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8007ac8:	f000 f847 	bl	8007b5a <__retarget_lock_init_recursive>
 8007acc:	f7ff ff96 	bl	80079fc <__sfp_lock_release>
 8007ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	61a5      	str	r5, [r4, #24]
 8007adc:	2208      	movs	r2, #8
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ae4:	f7fd fabe 	bl	8005064 <memset>
 8007ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007af0:	4620      	mov	r0, r4
 8007af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af4:	3468      	adds	r4, #104	; 0x68
 8007af6:	e7d9      	b.n	8007aac <__sfp+0x1c>
 8007af8:	2104      	movs	r1, #4
 8007afa:	4638      	mov	r0, r7
 8007afc:	f7ff ff62 	bl	80079c4 <__sfmoreglue>
 8007b00:	4604      	mov	r4, r0
 8007b02:	6030      	str	r0, [r6, #0]
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d1d5      	bne.n	8007ab4 <__sfp+0x24>
 8007b08:	f7ff ff78 	bl	80079fc <__sfp_lock_release>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	e7ee      	b.n	8007af0 <__sfp+0x60>
 8007b12:	bf00      	nop
 8007b14:	08007f30 	.word	0x08007f30
 8007b18:	ffff0001 	.word	0xffff0001

08007b1c <_fwalk_reent>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4606      	mov	r6, r0
 8007b22:	4688      	mov	r8, r1
 8007b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b28:	2700      	movs	r7, #0
 8007b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b32:	d505      	bpl.n	8007b40 <_fwalk_reent+0x24>
 8007b34:	6824      	ldr	r4, [r4, #0]
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d1f7      	bne.n	8007b2a <_fwalk_reent+0xe>
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b40:	89ab      	ldrh	r3, [r5, #12]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d907      	bls.n	8007b56 <_fwalk_reent+0x3a>
 8007b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	d003      	beq.n	8007b56 <_fwalk_reent+0x3a>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	47c0      	blx	r8
 8007b54:	4307      	orrs	r7, r0
 8007b56:	3568      	adds	r5, #104	; 0x68
 8007b58:	e7e9      	b.n	8007b2e <_fwalk_reent+0x12>

08007b5a <__retarget_lock_init_recursive>:
 8007b5a:	4770      	bx	lr

08007b5c <__retarget_lock_acquire_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <__retarget_lock_release_recursive>:
 8007b5e:	4770      	bx	lr

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460e      	mov	r6, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	b096      	sub	sp, #88	; 0x58
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	461d      	mov	r5, r3
 8007b70:	da08      	bge.n	8007b84 <__swhatbuf_r+0x24>
 8007b72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	061a      	lsls	r2, r3, #24
 8007b7c:	d410      	bmi.n	8007ba0 <__swhatbuf_r+0x40>
 8007b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b82:	e00e      	b.n	8007ba2 <__swhatbuf_r+0x42>
 8007b84:	466a      	mov	r2, sp
 8007b86:	f000 f903 	bl	8007d90 <_fstat_r>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	dbf1      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b8e:	9a01      	ldr	r2, [sp, #4]
 8007b90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b98:	425a      	negs	r2, r3
 8007b9a:	415a      	adcs	r2, r3
 8007b9c:	602a      	str	r2, [r5, #0]
 8007b9e:	e7ee      	b.n	8007b7e <__swhatbuf_r+0x1e>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	b016      	add	sp, #88	; 0x58
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bac <__smakebuf_r>:
 8007bac:	898b      	ldrh	r3, [r1, #12]
 8007bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bb0:	079d      	lsls	r5, r3, #30
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	d507      	bpl.n	8007bc8 <__smakebuf_r+0x1c>
 8007bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	b002      	add	sp, #8
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	ab01      	add	r3, sp, #4
 8007bca:	466a      	mov	r2, sp
 8007bcc:	f7ff ffc8 	bl	8007b60 <__swhatbuf_r>
 8007bd0:	9900      	ldr	r1, [sp, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff f963 	bl	8006ea0 <_malloc_r>
 8007bda:	b948      	cbnz	r0, 8007bf0 <__smakebuf_r+0x44>
 8007bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be0:	059a      	lsls	r2, r3, #22
 8007be2:	d4ef      	bmi.n	8007bc4 <__smakebuf_r+0x18>
 8007be4:	f023 0303 	bic.w	r3, r3, #3
 8007be8:	f043 0302 	orr.w	r3, r3, #2
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7e3      	b.n	8007bb8 <__smakebuf_r+0xc>
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <__smakebuf_r+0x7c>)
 8007bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	6020      	str	r0, [r4, #0]
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	6163      	str	r3, [r4, #20]
 8007c02:	9b01      	ldr	r3, [sp, #4]
 8007c04:	6120      	str	r0, [r4, #16]
 8007c06:	b15b      	cbz	r3, 8007c20 <__smakebuf_r+0x74>
 8007c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 f8d1 	bl	8007db4 <_isatty_r>
 8007c12:	b128      	cbz	r0, 8007c20 <__smakebuf_r+0x74>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	89a0      	ldrh	r0, [r4, #12]
 8007c22:	4305      	orrs	r5, r0
 8007c24:	81a5      	strh	r5, [r4, #12]
 8007c26:	e7cd      	b.n	8007bc4 <__smakebuf_r+0x18>
 8007c28:	080079b9 	.word	0x080079b9

08007c2c <_malloc_usable_size_r>:
 8007c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c30:	1f18      	subs	r0, r3, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfbc      	itt	lt
 8007c36:	580b      	ldrlt	r3, [r1, r0]
 8007c38:	18c0      	addlt	r0, r0, r3
 8007c3a:	4770      	bx	lr

08007c3c <_raise_r>:
 8007c3c:	291f      	cmp	r1, #31
 8007c3e:	b538      	push	{r3, r4, r5, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	d904      	bls.n	8007c50 <_raise_r+0x14>
 8007c46:	2316      	movs	r3, #22
 8007c48:	6003      	str	r3, [r0, #0]
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c52:	b112      	cbz	r2, 8007c5a <_raise_r+0x1e>
 8007c54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c58:	b94b      	cbnz	r3, 8007c6e <_raise_r+0x32>
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 f830 	bl	8007cc0 <_getpid_r>
 8007c60:	462a      	mov	r2, r5
 8007c62:	4601      	mov	r1, r0
 8007c64:	4620      	mov	r0, r4
 8007c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c6a:	f000 b817 	b.w	8007c9c <_kill_r>
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d00a      	beq.n	8007c88 <_raise_r+0x4c>
 8007c72:	1c59      	adds	r1, r3, #1
 8007c74:	d103      	bne.n	8007c7e <_raise_r+0x42>
 8007c76:	2316      	movs	r3, #22
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7e7      	b.n	8007c4e <_raise_r+0x12>
 8007c7e:	2400      	movs	r4, #0
 8007c80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c84:	4628      	mov	r0, r5
 8007c86:	4798      	blx	r3
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e7e0      	b.n	8007c4e <_raise_r+0x12>

08007c8c <raise>:
 8007c8c:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <raise+0xc>)
 8007c8e:	4601      	mov	r1, r0
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	f7ff bfd3 	b.w	8007c3c <_raise_r>
 8007c96:	bf00      	nop
 8007c98:	20000024 	.word	0x20000024

08007c9c <_kill_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_kill_r+0x20>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	f7fa fa85 	bl	80021b8 <_kill>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d102      	bne.n	8007cb8 <_kill_r+0x1c>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b103      	cbz	r3, 8007cb8 <_kill_r+0x1c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000364 	.word	0x20000364

08007cc0 <_getpid_r>:
 8007cc0:	f7fa ba72 	b.w	80021a8 <_getpid>

08007cc4 <__sread>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ccc:	f000 f894 	bl	8007df8 <_read_r>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	bfab      	itete	ge
 8007cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cd8:	181b      	addge	r3, r3, r0
 8007cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cde:	bfac      	ite	ge
 8007ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ce2:	81a3      	strhlt	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__swrite>:
 8007ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	461f      	mov	r7, r3
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	05db      	lsls	r3, r3, #23
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	d505      	bpl.n	8007d04 <__swrite+0x1e>
 8007cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f000 f868 	bl	8007dd4 <_lseek_r>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1a:	f000 b817 	b.w	8007d4c <_write_r>

08007d1e <__sseek>:
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d26:	f000 f855 	bl	8007dd4 <_lseek_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	bf15      	itete	ne
 8007d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d3a:	81a3      	strheq	r3, [r4, #12]
 8007d3c:	bf18      	it	ne
 8007d3e:	81a3      	strhne	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__sclose>:
 8007d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d46:	f000 b813 	b.w	8007d70 <_close_r>
	...

08007d4c <_write_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d07      	ldr	r5, [pc, #28]	; (8007d6c <_write_r+0x20>)
 8007d50:	4604      	mov	r4, r0
 8007d52:	4608      	mov	r0, r1
 8007d54:	4611      	mov	r1, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	602a      	str	r2, [r5, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f7fa fa63 	bl	8002226 <_write>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_write_r+0x1e>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_write_r+0x1e>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20000364 	.word	0x20000364

08007d70 <_close_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d06      	ldr	r5, [pc, #24]	; (8007d8c <_close_r+0x1c>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	f7fa fa6f 	bl	800225e <_close>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_close_r+0x1a>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_close_r+0x1a>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000364 	.word	0x20000364

08007d90 <_fstat_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	; (8007db0 <_fstat_r+0x20>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	f7fa fa6a 	bl	8002276 <_fstat>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d102      	bne.n	8007dac <_fstat_r+0x1c>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	b103      	cbz	r3, 8007dac <_fstat_r+0x1c>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20000364 	.word	0x20000364

08007db4 <_isatty_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d06      	ldr	r5, [pc, #24]	; (8007dd0 <_isatty_r+0x1c>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	f7fa fa69 	bl	8002296 <_isatty>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_isatty_r+0x1a>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_isatty_r+0x1a>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20000364 	.word	0x20000364

08007dd4 <_lseek_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	; (8007df4 <_lseek_r+0x20>)
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f7fa fa62 	bl	80022ac <_lseek>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_lseek_r+0x1e>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_lseek_r+0x1e>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20000364 	.word	0x20000364

08007df8 <_read_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d07      	ldr	r5, [pc, #28]	; (8007e18 <_read_r+0x20>)
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	4611      	mov	r1, r2
 8007e02:	2200      	movs	r2, #0
 8007e04:	602a      	str	r2, [r5, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f7fa f9f0 	bl	80021ec <_read>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_read_r+0x1e>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_read_r+0x1e>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	20000364 	.word	0x20000364

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr
